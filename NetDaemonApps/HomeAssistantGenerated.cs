//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v25.10.0.0
//   At: 2025-03-30T15:56:53.7678440-04:00
//
// *** Make sure the version of the codegen tool and your nugets NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/user/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace HomeAssistantGenerated;
public static class GeneratedExtensions
{
    ///<summary>Registers all injectable generated types in the serviceCollection</summary>
    public static IServiceCollection AddHomeAssistantGenerated(this IServiceCollection serviceCollection)
    {
        serviceCollection.AddTransient<IEntityFactory, GeneratedEntityFactory>();
        serviceCollection.AddTransient<Entities>();
        serviceCollection.AddTransient<LightEntities>();
        serviceCollection.AddTransient<MediaPlayerEntities>();
        serviceCollection.AddTransient<AlarmControlPanelEntities>();
        serviceCollection.AddTransient<AutomationEntities>();
        serviceCollection.AddTransient<BinarySensorEntities>();
        serviceCollection.AddTransient<ButtonEntities>();
        serviceCollection.AddTransient<CalendarEntities>();
        serviceCollection.AddTransient<CameraEntities>();
        serviceCollection.AddTransient<ClimateEntities>();
        serviceCollection.AddTransient<ConfigEditorEntities>();
        serviceCollection.AddTransient<ConversationEntities>();
        serviceCollection.AddTransient<CoverEntities>();
        serviceCollection.AddTransient<DeviceTrackerEntities>();
        serviceCollection.AddTransient<EventEntities>();
        serviceCollection.AddTransient<FanEntities>();
        serviceCollection.AddTransient<GoveeEntities>();
        serviceCollection.AddTransient<ImageEntities>();
        serviceCollection.AddTransient<LockEntities>();
        serviceCollection.AddTransient<NumberEntities>();
        serviceCollection.AddTransient<PersonEntities>();
        serviceCollection.AddTransient<RemoteEntities>();
        serviceCollection.AddTransient<SceneEntities>();
        serviceCollection.AddTransient<ScheduleEntities>();
        serviceCollection.AddTransient<ScriptEntities>();
        serviceCollection.AddTransient<SelectEntities>();
        serviceCollection.AddTransient<SensorEntities>();
        serviceCollection.AddTransient<SensorEntities>();
        serviceCollection.AddTransient<SirenEntities>();
        serviceCollection.AddTransient<SttEntities>();
        serviceCollection.AddTransient<SunEntities>();
        serviceCollection.AddTransient<SwitchEntities>();
        serviceCollection.AddTransient<TodoEntities>();
        serviceCollection.AddTransient<TtsEntities>();
        serviceCollection.AddTransient<UpdateEntities>();
        serviceCollection.AddTransient<VacuumEntities>();
        serviceCollection.AddTransient<WeatherEntities>();
        serviceCollection.AddTransient<ZoneEntities>();
        serviceCollection.AddTransient<InputBooleanEntities>();
        serviceCollection.AddTransient<Services>();
        serviceCollection.AddTransient<AlarmControlPanelServices>();
        serviceCollection.AddTransient<AlexaMediaServices>();
        serviceCollection.AddTransient<AndroidtvServices>();
        serviceCollection.AddTransient<AutomationServices>();
        serviceCollection.AddTransient<BondServices>();
        serviceCollection.AddTransient<ButtonServices>();
        serviceCollection.AddTransient<CalendarServices>();
        serviceCollection.AddTransient<CameraServices>();
        serviceCollection.AddTransient<ClimateServices>();
        serviceCollection.AddTransient<CloudServices>();
        serviceCollection.AddTransient<ConversationServices>();
        serviceCollection.AddTransient<CounterServices>();
        serviceCollection.AddTransient<CoverServices>();
        serviceCollection.AddTransient<DeviceTrackerServices>();
        serviceCollection.AddTransient<EcovacsServices>();
        serviceCollection.AddTransient<EsphomeServices>();
        serviceCollection.AddTransient<FanServices>();
        serviceCollection.AddTransient<FfmpegServices>();
        serviceCollection.AddTransient<FrontendServices>();
        serviceCollection.AddTransient<GroupServices>();
        serviceCollection.AddTransient<HassioServices>();
        serviceCollection.AddTransient<HomeassistantServices>();
        serviceCollection.AddTransient<HueServices>();
        serviceCollection.AddTransient<ImageServices>();
        serviceCollection.AddTransient<InputBooleanServices>();
        serviceCollection.AddTransient<InputButtonServices>();
        serviceCollection.AddTransient<InputDatetimeServices>();
        serviceCollection.AddTransient<InputNumberServices>();
        serviceCollection.AddTransient<InputSelectServices>();
        serviceCollection.AddTransient<InputTextServices>();
        serviceCollection.AddTransient<LawnMowerServices>();
        serviceCollection.AddTransient<LightServices>();
        serviceCollection.AddTransient<LockServices>();
        serviceCollection.AddTransient<LogbookServices>();
        serviceCollection.AddTransient<LoggerServices>();
        serviceCollection.AddTransient<MediaPlayerServices>();
        serviceCollection.AddTransient<MqttServices>();
        serviceCollection.AddTransient<NotifyServices>();
        serviceCollection.AddTransient<NumberServices>();
        serviceCollection.AddTransient<PersistentNotificationServices>();
        serviceCollection.AddTransient<PersonServices>();
        serviceCollection.AddTransient<RecorderServices>();
        serviceCollection.AddTransient<RemoteServices>();
        serviceCollection.AddTransient<ReolinkServices>();
        serviceCollection.AddTransient<SceneServices>();
        serviceCollection.AddTransient<ScheduleServices>();
        serviceCollection.AddTransient<ScriptServices>();
        serviceCollection.AddTransient<SelectServices>();
        serviceCollection.AddTransient<ShoppingListServices>();
        serviceCollection.AddTransient<SirenServices>();
        serviceCollection.AddTransient<SonosServices>();
        serviceCollection.AddTransient<SwitchServices>();
        serviceCollection.AddTransient<SystemLogServices>();
        serviceCollection.AddTransient<TemplateServices>();
        serviceCollection.AddTransient<TimerServices>();
        serviceCollection.AddTransient<TodoServices>();
        serviceCollection.AddTransient<TodoistServices>();
        serviceCollection.AddTransient<TtsServices>();
        serviceCollection.AddTransient<UpdateServices>();
        serviceCollection.AddTransient<VacuumServices>();
        serviceCollection.AddTransient<VesyncServices>();
        serviceCollection.AddTransient<WeatherServices>();
        serviceCollection.AddTransient<WebostvServices>();
        serviceCollection.AddTransient<ZhaServices>();
        serviceCollection.AddTransient<ZoneServices>();
        serviceCollection.AddTransient<ZwaveJsServices>();
        return serviceCollection;
    }
}

/// <summary>
/// Allows HassModel to instantiate the correct generated Entity types
/// </summary>
public class GeneratedEntityFactory : IEntityFactory
{
    public Entity CreateEntity(IHaContext haContext, string entityId)
    {
        var dot = entityId.IndexOf('.', StringComparison.Ordinal);
        var domain = dot < 0 ? entityId.AsSpan() : entityId[..dot];
        return domain switch
        {
            "alarm_control_panel" => new AlarmControlPanelEntity(haContext, entityId),
            "automation" => new AutomationEntity(haContext, entityId),
            "binary_sensor" => new BinarySensorEntity(haContext, entityId),
            "button" => new ButtonEntity(haContext, entityId),
            "calendar" => new CalendarEntity(haContext, entityId),
            "camera" => new CameraEntity(haContext, entityId),
            "climate" => new ClimateEntity(haContext, entityId),
            "config_editor" => new ConfigEditorEntity(haContext, entityId),
            "conversation" => new ConversationEntity(haContext, entityId),
            "cover" => new CoverEntity(haContext, entityId),
            "device_tracker" => new DeviceTrackerEntity(haContext, entityId),
            "event" => new EventEntity(haContext, entityId),
            "fan" => new FanEntity(haContext, entityId),
            "govee" => new GoveeEntity(haContext, entityId),
            "image" => new ImageEntity(haContext, entityId),
            "input_boolean" => new InputBooleanEntity(haContext, entityId),
            "light" => new LightEntity(haContext, entityId),
            "lock" => new LockEntity(haContext, entityId),
            "media_player" => new MediaPlayerEntity(haContext, entityId),
            "number" => new NumberEntity(haContext, entityId),
            "person" => new PersonEntity(haContext, entityId),
            "remote" => new RemoteEntity(haContext, entityId),
            "scene" => new SceneEntity(haContext, entityId),
            "schedule" => new ScheduleEntity(haContext, entityId),
            "script" => new ScriptEntity(haContext, entityId),
            "select" => new SelectEntity(haContext, entityId),
            "sensor" when IsNumeric() => new NumericSensorEntity(haContext, entityId),
            "sensor" => new SensorEntity(haContext, entityId),
            "siren" => new SirenEntity(haContext, entityId),
            "stt" => new SttEntity(haContext, entityId),
            "sun" => new SunEntity(haContext, entityId),
            "switch" => new SwitchEntity(haContext, entityId),
            "todo" => new TodoEntity(haContext, entityId),
            "tts" => new TtsEntity(haContext, entityId),
            "update" => new UpdateEntity(haContext, entityId),
            "vacuum" => new VacuumEntity(haContext, entityId),
            "weather" => new WeatherEntity(haContext, entityId),
            "zone" => new ZoneEntity(haContext, entityId),
            _ => new Entity(haContext, entityId)};
        bool IsNumeric() => haContext.GetState(entityId)?.AttributesJson?.TryGetProperty("unit_of_measurement", out _) ?? false;
    }
}

public interface IEntities
{
    LightEntities Light { get; }

    MediaPlayerEntities MediaPlayer { get; }

    AlarmControlPanelEntities AlarmControlPanel { get; }

    AutomationEntities Automation { get; }

    BinarySensorEntities BinarySensor { get; }

    ButtonEntities Button { get; }

    CalendarEntities Calendar { get; }

    CameraEntities Camera { get; }

    ClimateEntities Climate { get; }

    ConfigEditorEntities ConfigEditor { get; }

    ConversationEntities Conversation { get; }

    CoverEntities Cover { get; }

    DeviceTrackerEntities DeviceTracker { get; }

    EventEntities Event { get; }

    FanEntities Fan { get; }

    GoveeEntities Govee { get; }

    ImageEntities Image { get; }

    LockEntities Lock { get; }

    NumberEntities Number { get; }

    PersonEntities Person { get; }

    RemoteEntities Remote { get; }

    SceneEntities Scene { get; }

    ScheduleEntities Schedule { get; }

    ScriptEntities Script { get; }

    SelectEntities Select { get; }

    SensorEntities Sensor { get; }

    SirenEntities Siren { get; }

    SttEntities Stt { get; }

    SunEntities Sun { get; }

    SwitchEntities Switch { get; }

    TodoEntities Todo { get; }

    TtsEntities Tts { get; }

    UpdateEntities Update { get; }

    VacuumEntities Vacuum { get; }

    WeatherEntities Weather { get; }

    ZoneEntities Zone { get; }

    InputBooleanEntities InputBoolean { get; }
}

public partial class Entities : IEntities
{
    private readonly IHaContext _haContext;
    public Entities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public LightEntities Light => new(_haContext);
    public MediaPlayerEntities MediaPlayer => new(_haContext);
    public AlarmControlPanelEntities AlarmControlPanel => new(_haContext);
    public AutomationEntities Automation => new(_haContext);
    public BinarySensorEntities BinarySensor => new(_haContext);
    public ButtonEntities Button => new(_haContext);
    public CalendarEntities Calendar => new(_haContext);
    public CameraEntities Camera => new(_haContext);
    public ClimateEntities Climate => new(_haContext);
    public ConfigEditorEntities ConfigEditor => new(_haContext);
    public ConversationEntities Conversation => new(_haContext);
    public CoverEntities Cover => new(_haContext);
    public DeviceTrackerEntities DeviceTracker => new(_haContext);
    public EventEntities Event => new(_haContext);
    public FanEntities Fan => new(_haContext);
    public GoveeEntities Govee => new(_haContext);
    public ImageEntities Image => new(_haContext);
    public LockEntities Lock => new(_haContext);
    public NumberEntities Number => new(_haContext);
    public PersonEntities Person => new(_haContext);
    public RemoteEntities Remote => new(_haContext);
    public SceneEntities Scene => new(_haContext);
    public ScheduleEntities Schedule => new(_haContext);
    public ScriptEntities Script => new(_haContext);
    public SelectEntities Select => new(_haContext);
    public SensorEntities Sensor => new(_haContext);
    public SirenEntities Siren => new(_haContext);
    public SttEntities Stt => new(_haContext);
    public SunEntities Sun => new(_haContext);
    public SwitchEntities Switch => new(_haContext);
    public TodoEntities Todo => new(_haContext);
    public TtsEntities Tts => new(_haContext);
    public UpdateEntities Update => new(_haContext);
    public VacuumEntities Vacuum => new(_haContext);
    public WeatherEntities Weather => new(_haContext);
    public ZoneEntities Zone => new(_haContext);
    public InputBooleanEntities InputBoolean => new(_haContext);
}

public partial class LightEntities
{
    private readonly IHaContext _haContext;
    public LightEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all light entities currently registered (at runtime) in Home Assistant as LightEntity</summary>
    public IEnumerable<LightEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("light.")).Select(e => new LightEntity(e));
    ///<summary>Bed LEDs</summary>
    public LightEntity BedLeds => new(_haContext, "light.bed_leds");
    ///<summary>Bedroom Down Light</summary>
    public LightEntity BedroomDownLight => new(_haContext, "light.bedroom_down_light");
    ///<summary>Bedroom Up Light</summary>
    public LightEntity BedroomUpLight => new(_haContext, "light.bedroom_up_light");
    ///<summary>Christmas tree</summary>
    public LightEntity ChristmasTree => new(_haContext, "light.christmas_tree");
    ///<summary>Corner LEDs</summary>
    public LightEntity CornerLeds => new(_haContext, "light.corner_leds");
    ///<summary>Floor Lamp Left</summary>
    public LightEntity FloorLampLeft => new(_haContext, "light.floor_lamp_left");
    ///<summary>Floor Lamp Left Segment 001</summary>
    public LightEntity FloorLampLeftSegment001 => new(_haContext, "light.floor_lamp_left_segment_001");
    ///<summary>Floor Lamp Left Segment 002</summary>
    public LightEntity FloorLampLeftSegment002 => new(_haContext, "light.floor_lamp_left_segment_002");
    ///<summary>Floor Lamp Left Segment 003</summary>
    public LightEntity FloorLampLeftSegment003 => new(_haContext, "light.floor_lamp_left_segment_003");
    ///<summary>Floor Lamp Left Segment 004</summary>
    public LightEntity FloorLampLeftSegment004 => new(_haContext, "light.floor_lamp_left_segment_004");
    ///<summary>Floor Lamp Left Segment 005</summary>
    public LightEntity FloorLampLeftSegment005 => new(_haContext, "light.floor_lamp_left_segment_005");
    ///<summary>Floor Lamp Left Segment 006</summary>
    public LightEntity FloorLampLeftSegment006 => new(_haContext, "light.floor_lamp_left_segment_006");
    ///<summary>Floor Lamp Left Segment 007</summary>
    public LightEntity FloorLampLeftSegment007 => new(_haContext, "light.floor_lamp_left_segment_007");
    ///<summary>Floor Lamp Left Segment 008</summary>
    public LightEntity FloorLampLeftSegment008 => new(_haContext, "light.floor_lamp_left_segment_008");
    ///<summary>Floor Lamp Left Segment 009</summary>
    public LightEntity FloorLampLeftSegment009 => new(_haContext, "light.floor_lamp_left_segment_009");
    ///<summary>Floor Lamp Left Segment 010</summary>
    public LightEntity FloorLampLeftSegment010 => new(_haContext, "light.floor_lamp_left_segment_010");
    ///<summary>Floor Lamp Left Segment 011</summary>
    public LightEntity FloorLampLeftSegment011 => new(_haContext, "light.floor_lamp_left_segment_011");
    ///<summary>Floor Lamp Left Segment 012</summary>
    public LightEntity FloorLampLeftSegment012 => new(_haContext, "light.floor_lamp_left_segment_012");
    ///<summary>Floor Lamp Left Segment 013</summary>
    public LightEntity FloorLampLeftSegment013 => new(_haContext, "light.floor_lamp_left_segment_013");
    ///<summary>Floor Lamp Left Segment 014</summary>
    public LightEntity FloorLampLeftSegment014 => new(_haContext, "light.floor_lamp_left_segment_014");
    ///<summary>Floor Lamp Left Segment 015</summary>
    public LightEntity FloorLampLeftSegment015 => new(_haContext, "light.floor_lamp_left_segment_015");
    ///<summary>Floor Lamp Left Segment 016</summary>
    public LightEntity FloorLampLeftSegment016 => new(_haContext, "light.floor_lamp_left_segment_016");
    ///<summary>Floor Lamp Right</summary>
    public LightEntity FloorLampRight => new(_haContext, "light.floor_lamp_right");
    ///<summary>Floor Lamp Right Segment 001</summary>
    public LightEntity FloorLampRightSegment001 => new(_haContext, "light.floor_lamp_right_segment_001");
    ///<summary>Floor Lamp Right Segment 002</summary>
    public LightEntity FloorLampRightSegment002 => new(_haContext, "light.floor_lamp_right_segment_002");
    ///<summary>Floor Lamp Right Segment 003</summary>
    public LightEntity FloorLampRightSegment003 => new(_haContext, "light.floor_lamp_right_segment_003");
    ///<summary>Floor Lamp Right Segment 004</summary>
    public LightEntity FloorLampRightSegment004 => new(_haContext, "light.floor_lamp_right_segment_004");
    ///<summary>Floor Lamp Right Segment 005</summary>
    public LightEntity FloorLampRightSegment005 => new(_haContext, "light.floor_lamp_right_segment_005");
    ///<summary>Floor Lamp Right Segment 006</summary>
    public LightEntity FloorLampRightSegment006 => new(_haContext, "light.floor_lamp_right_segment_006");
    ///<summary>Floor Lamp Right Segment 007</summary>
    public LightEntity FloorLampRightSegment007 => new(_haContext, "light.floor_lamp_right_segment_007");
    ///<summary>Floor Lamp Right Segment 008</summary>
    public LightEntity FloorLampRightSegment008 => new(_haContext, "light.floor_lamp_right_segment_008");
    ///<summary>Floor Lamp Right Segment 009</summary>
    public LightEntity FloorLampRightSegment009 => new(_haContext, "light.floor_lamp_right_segment_009");
    ///<summary>Floor Lamp Right Segment 010</summary>
    public LightEntity FloorLampRightSegment010 => new(_haContext, "light.floor_lamp_right_segment_010");
    ///<summary>Floor Lamp Right Segment 011</summary>
    public LightEntity FloorLampRightSegment011 => new(_haContext, "light.floor_lamp_right_segment_011");
    ///<summary>Floor Lamp Right Segment 012</summary>
    public LightEntity FloorLampRightSegment012 => new(_haContext, "light.floor_lamp_right_segment_012");
    ///<summary>Floor Lamp Right Segment 013</summary>
    public LightEntity FloorLampRightSegment013 => new(_haContext, "light.floor_lamp_right_segment_013");
    ///<summary>Floor Lamp Right Segment 014</summary>
    public LightEntity FloorLampRightSegment014 => new(_haContext, "light.floor_lamp_right_segment_014");
    ///<summary>Floor Lamp Right Segment 015</summary>
    public LightEntity FloorLampRightSegment015 => new(_haContext, "light.floor_lamp_right_segment_015");
    ///<summary>Floor Lamp Right Segment 016</summary>
    public LightEntity FloorLampRightSegment016 => new(_haContext, "light.floor_lamp_right_segment_016");
    ///<summary>Front Floodlight</summary>
    public LightEntity FrontFloodlight => new(_haContext, "light.front_floodlight");
    ///<summary>Front yard</summary>
    public LightEntity FrontYard => new(_haContext, "light.front_yard");
    ///<summary>Garage Status LED</summary>
    public LightEntity GarageStatusLed => new(_haContext, "light.garage_status_led");
    ///<summary>Hue Lily outdoor spotlight 1</summary>
    public LightEntity HueLilyOutdoorSpotlight1 => new(_haContext, "light.hue_lily_outdoor_spotlight_1");
    ///<summary>Hue Play Center</summary>
    public LightEntity HuePlayCenter => new(_haContext, "light.hue_play_center");
    ///<summary>Hue Play Left</summary>
    public LightEntity HuePlayLeft => new(_haContext, "light.hue_play_left");
    ///<summary>Hue Play Right</summary>
    public LightEntity HuePlayRight => new(_haContext, "light.hue_play_right");
    ///<summary>Justin’s Office</summary>
    public LightEntity JustinsOffice => new(_haContext, "light.justins_office");
    ///<summary>Justin’s Office</summary>
    public LightEntity JustinsOffice2 => new(_haContext, "light.justins_office_2");
    public LightEntity Kitchen => new(_haContext, "light.kitchen");
    ///<summary>Main Status LED</summary>
    public LightEntity MainStatusLed => new(_haContext, "light.main_status_led");
    ///<summary>Nightstand lights</summary>
    public LightEntity NightstandLights => new(_haContext, "light.nightstand_lights");
    ///<summary>Overhead</summary>
    public LightEntity Overhead => new(_haContext, "light.overhead");
    ///<summary>Permanent Lights</summary>
    public LightEntity PermanentLights => new(_haContext, "light.permanent_lights");
    ///<summary>Permanent Lights Segment 001</summary>
    public LightEntity PermanentLightsSegment001 => new(_haContext, "light.permanent_lights_segment_001");
    ///<summary>Permanent Lights Segment 002</summary>
    public LightEntity PermanentLightsSegment002 => new(_haContext, "light.permanent_lights_segment_002");
    ///<summary>Permanent Lights Segment 003</summary>
    public LightEntity PermanentLightsSegment003 => new(_haContext, "light.permanent_lights_segment_003");
    ///<summary>Permanent Lights Segment 004</summary>
    public LightEntity PermanentLightsSegment004 => new(_haContext, "light.permanent_lights_segment_004");
    ///<summary>Permanent Lights Segment 005</summary>
    public LightEntity PermanentLightsSegment005 => new(_haContext, "light.permanent_lights_segment_005");
    ///<summary>Permanent Lights Segment 006</summary>
    public LightEntity PermanentLightsSegment006 => new(_haContext, "light.permanent_lights_segment_006");
    ///<summary>Permanent Lights Segment 007</summary>
    public LightEntity PermanentLightsSegment007 => new(_haContext, "light.permanent_lights_segment_007");
    ///<summary>Permanent Lights Segment 008</summary>
    public LightEntity PermanentLightsSegment008 => new(_haContext, "light.permanent_lights_segment_008");
    ///<summary>Permanent Lights Segment 009</summary>
    public LightEntity PermanentLightsSegment009 => new(_haContext, "light.permanent_lights_segment_009");
    ///<summary>Permanent Lights Segment 010</summary>
    public LightEntity PermanentLightsSegment010 => new(_haContext, "light.permanent_lights_segment_010");
    ///<summary>Permanent Lights Segment 011</summary>
    public LightEntity PermanentLightsSegment011 => new(_haContext, "light.permanent_lights_segment_011");
    ///<summary>Permanent Lights Segment 012</summary>
    public LightEntity PermanentLightsSegment012 => new(_haContext, "light.permanent_lights_segment_012");
    ///<summary>Permanent Lights Segment 013</summary>
    public LightEntity PermanentLightsSegment013 => new(_haContext, "light.permanent_lights_segment_013");
    ///<summary>Permanent Lights Segment 014</summary>
    public LightEntity PermanentLightsSegment014 => new(_haContext, "light.permanent_lights_segment_014");
    ///<summary>Permanent Lights Segment 015</summary>
    public LightEntity PermanentLightsSegment015 => new(_haContext, "light.permanent_lights_segment_015");
    ///<summary>Permanent Lights Segment 016</summary>
    public LightEntity PermanentLightsSegment016 => new(_haContext, "light.permanent_lights_segment_016");
    ///<summary>Permanent Lights Segment 017</summary>
    public LightEntity PermanentLightsSegment017 => new(_haContext, "light.permanent_lights_segment_017");
    ///<summary>Permanent Lights Segment 018</summary>
    public LightEntity PermanentLightsSegment018 => new(_haContext, "light.permanent_lights_segment_018");
    ///<summary>Permanent Lights Segment 019</summary>
    public LightEntity PermanentLightsSegment019 => new(_haContext, "light.permanent_lights_segment_019");
    ///<summary>Permanent Lights Segment 020</summary>
    public LightEntity PermanentLightsSegment020 => new(_haContext, "light.permanent_lights_segment_020");
    ///<summary>Permanent Lights Segment 021</summary>
    public LightEntity PermanentLightsSegment021 => new(_haContext, "light.permanent_lights_segment_021");
    ///<summary>Permanent Lights Segment 022</summary>
    public LightEntity PermanentLightsSegment022 => new(_haContext, "light.permanent_lights_segment_022");
    ///<summary>Permanent Lights Segment 023</summary>
    public LightEntity PermanentLightsSegment023 => new(_haContext, "light.permanent_lights_segment_023");
    ///<summary>Permanent Lights Segment 024</summary>
    public LightEntity PermanentLightsSegment024 => new(_haContext, "light.permanent_lights_segment_024");
    ///<summary>Permanent Lights Segment 025</summary>
    public LightEntity PermanentLightsSegment025 => new(_haContext, "light.permanent_lights_segment_025");
    ///<summary>Permanent Lights Segment 026</summary>
    public LightEntity PermanentLightsSegment026 => new(_haContext, "light.permanent_lights_segment_026");
    ///<summary>Permanent Lights Segment 027</summary>
    public LightEntity PermanentLightsSegment027 => new(_haContext, "light.permanent_lights_segment_027");
    ///<summary>ratgdov2.5i 0a070c Light</summary>
    public LightEntity Ratgdov25i0a070cLight => new(_haContext, "light.ratgdov25i_0a070c_light");
    ///<summary>Shawn desk</summary>
    public LightEntity ShawnDesk => new(_haContext, "light.shawn_desk");
    ///<summary>Shawn monitor LEDs</summary>
    public LightEntity ShawnMonitorLeds => new(_haContext, "light.shawn_monitor_leds");
    ///<summary>Shawn Office Chair Light</summary>
    public LightEntity ShawnOfficeChairLight => new(_haContext, "light.shawn_office_chair_light");
    ///<summary>Shawn’s Office</summary>
    public LightEntity ShawnsOffice => new(_haContext, "light.shawns_office");
}

public partial class MediaPlayerEntities
{
    private readonly IHaContext _haContext;
    public MediaPlayerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all media_player entities currently registered (at runtime) in Home Assistant as MediaPlayerEntity</summary>
    public IEnumerable<MediaPlayerEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("media_player.")).Select(e => new MediaPlayerEntity(e));
    ///<summary>Downstairs Tv</summary>
    public MediaPlayerEntity DownstairsTv => new(_haContext, "media_player.downstairs_tv");
    ///<summary>Everywhere</summary>
    public MediaPlayerEntity Everywhere => new(_haContext, "media_player.everywhere");
    ///<summary>Fire TV 192.168.20.66</summary>
    public MediaPlayerEntity FireTv1921682066 => new(_haContext, "media_player.fire_tv_192_168_20_66");
    ///<summary>Front Office Dot</summary>
    public MediaPlayerEntity FrontOfficeDot => new(_haContext, "media_player.front_office_dot");
    ///<summary>Garage</summary>
    public MediaPlayerEntity Garage => new(_haContext, "media_player.garage");
    ///<summary>Garage Echo</summary>
    public MediaPlayerEntity GarageEcho => new(_haContext, "media_player.garage_echo");
    ///<summary>Garage Lights</summary>
    public MediaPlayerEntity GarageLights => new(_haContext, "media_player.garage_lights");
    ///<summary>Justin&apos;s 2nd Echo Pop</summary>
    public MediaPlayerEntity JustinS2ndEchoPop => new(_haContext, "media_player.justin_s_2nd_echo_pop");
    ///<summary>Justin&apos;s Fire TV</summary>
    public MediaPlayerEntity JustinSFireTv => new(_haContext, "media_player.justin_s_fire_tv");
    ///<summary>Kitchen</summary>
    public MediaPlayerEntity Kitchen => new(_haContext, "media_player.kitchen");
    ///<summary>Living room TV</summary>
    public MediaPlayerEntity LivingRoomTv => new(_haContext, "media_player.living_room_tv");
    ///<summary>Master Bath</summary>
    public MediaPlayerEntity MasterBath => new(_haContext, "media_player.master_bath");
    public MediaPlayerEntity Office => new(_haContext, "media_player.office");
    ///<summary>Office</summary>
    public MediaPlayerEntity Office2 => new(_haContext, "media_player.office_2");
    ///<summary>Shawn&apos;s Fire TV</summary>
    public MediaPlayerEntity ShawnSFireTv => new(_haContext, "media_player.shawn_s_fire_tv");
    ///<summary>Shawn&apos;s Fire TV Stick</summary>
    public MediaPlayerEntity ShawnSFireTvStick => new(_haContext, "media_player.shawn_s_fire_tv_stick");
    ///<summary>Shawn&apos;s Office Tv</summary>
    public MediaPlayerEntity ShawnSOfficeTv => new(_haContext, "media_player.shawn_s_office_tv");
    ///<summary>Spotify Husbear</summary>
    public MediaPlayerEntity SpotifyHusbear => new(_haContext, "media_player.spotify_husbear");
    ///<summary>Spotify Zuma</summary>
    public MediaPlayerEntity SpotifyZuma => new(_haContext, "media_player.spotify_zuma");
    ///<summary>This Device</summary>
    public MediaPlayerEntity ThisDevice => new(_haContext, "media_player.this_device");
}

public partial class AlarmControlPanelEntities
{
    private readonly IHaContext _haContext;
    public AlarmControlPanelEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all alarm_control_panel entities currently registered (at runtime) in Home Assistant as AlarmControlPanelEntity</summary>
    public IEnumerable<AlarmControlPanelEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("alarm_control_panel.")).Select(e => new AlarmControlPanelEntity(e));
    ///<summary>Home Alarm</summary>
    public AlarmControlPanelEntity HomeAlarm => new(_haContext, "alarm_control_panel.home_alarm");
}

public partial class AutomationEntities
{
    private readonly IHaContext _haContext;
    public AutomationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all automation entities currently registered (at runtime) in Home Assistant as AutomationEntity</summary>
    public IEnumerable<AutomationEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("automation.")).Select(e => new AutomationEntity(e));
    ///<summary>All named window closed</summary>
    public AutomationEntity AllNamedWindowClosed => new(_haContext, "automation.all_named_window_closed");
    ///<summary>An Hour Before Sunrise</summary>
    public AutomationEntity AnHourBeforeSunrise => new(_haContext, "automation.an_hour_before_sunrise");
    ///<summary>An hour before sunset</summary>
    public AutomationEntity AnHourBeforeSunset => new(_haContext, "automation.an_hour_before_sunset");
    ///<summary>Armed away</summary>
    public AutomationEntity ArmedAway => new(_haContext, "automation.armed_away");
    ///<summary>Armed home</summary>
    public AutomationEntity ArmedHome => new(_haContext, "automation.armed_home");
    ///<summary>Armed night</summary>
    public AutomationEntity ArmedNight => new(_haContext, "automation.armed_night");
    ///<summary>The sun sets</summary>
    public AutomationEntity AtSunSet => new(_haContext, "automation.at_sun_set");
    ///<summary>Outside Camera Detects Person</summary>
    public AutomationEntity CameraPersonDetected => new(_haContext, "automation.camera_person_detected");
    ///<summary>Desktop Resumed</summary>
    public AutomationEntity DesktopResumed => new(_haContext, "automation.desktop_resumed");
    ///<summary>Disarmed</summary>
    public AutomationEntity Disarmed => new(_haContext, "automation.disarmed");
    ///<summary>Schedule Justin office hours</summary>
    public AutomationEntity DuringJustinOfficeHours => new(_haContext, "automation.during_justin_office_hours");
    ///<summary>Enter grocery store</summary>
    public AutomationEntity EnterGroceryStore => new(_haContext, "automation.enter_grocery_store");
    ///<summary>Motion in shawn&apos;s office</summary>
    public AutomationEntity FirstMotionInShawnSOffice => new(_haContext, "automation.first_motion_in_shawn_s_office");
    ///<summary>From armed night</summary>
    public AutomationEntity FromArmedNight => new(_haContext, "automation.from_armed_night");
    ///<summary>Front door locked</summary>
    public AutomationEntity FrontDoorLocked => new(_haContext, "automation.front_door_locked");
    ///<summary>Front door unlocked</summary>
    public AutomationEntity FrontDoorUnlocked => new(_haContext, "automation.front_door_unlocked");
    ///<summary>Garage closed</summary>
    public AutomationEntity GarageCloseAlwaysOn => new(_haContext, "automation.garage_close_always_on");
    ///<summary>Home state change</summary>
    public AutomationEntity HomeStateChange => new(_haContext, "automation.home_state_change");
    ///<summary>Everyone has left home</summary>
    public AutomationEntity HouseEveryoneLeft => new(_haContext, "automation.house_everyone_left");
    ///<summary>Any named window is open</summary>
    public AutomationEntity HyperionGameIsOpen => new(_haContext, "automation.hyperion_game_is_open");
    ///<summary>Schedule Justin out of office</summary>
    public AutomationEntity JustinOutOfOffice => new(_haContext, "automation.justin_out_of_office");
    ///<summary>Living room tv turns on</summary>
    public AutomationEntity LivingRoomTvTurnsOn => new(_haContext, "automation.living_room_tv_turns_on");
    ///<summary>Main camera detects person</summary>
    public AutomationEntity MainCameraDetectsPerson => new(_haContext, "automation.main_camera_detects_person");
    ///<summary>Midnight</summary>
    public AutomationEntity Midnight => new(_haContext, "automation.midnight");
    ///<summary>Someone leaves home</summary>
    public AutomationEntity NewAutomation => new(_haContext, "automation.new_automation");
    ///<summary>Shawn leaves home</summary>
    public AutomationEntity ShawnLeavesHome => new(_haContext, "automation.shawn_leaves_home");
    ///<summary>Shawn&apos;s Macbook started using mic</summary>
    public AutomationEntity ShawnSMacbookAudioInUse => new(_haContext, "automation.shawn_s_macbook_audio_in_use");
    ///<summary>Shawn&apos;s Macbook stopped using mic</summary>
    public AutomationEntity ShawnSMacbookStoppedUsingMic => new(_haContext, "automation.shawn_s_macbook_stopped_using_mic");
    ///<summary>Someone comes home</summary>
    public AutomationEntity SomeoneCanHome => new(_haContext, "automation.someone_can_home");
    ///<summary>Water leak detected</summary>
    public AutomationEntity WaterLeakDetected => new(_haContext, "automation.water_leak_detected");
    ///<summary>Garage is left open</summary>
    public AutomationEntity WhenGarageIsLeftOpen => new(_haContext, "automation.when_garage_is_left_open");
    ///<summary>Garage open</summary>
    public AutomationEntity WhenGarageOpenOrFrontUnlockedAlwaysOn => new(_haContext, "automation.when_garage_open_or_front_unlocked_always_on");
}

public partial class BinarySensorEntities
{
    private readonly IHaContext _haContext;
    public BinarySensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all binary_sensor entities currently registered (at runtime) in Home Assistant as BinarySensorEntity</summary>
    public IEnumerable<BinarySensorEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("binary_sensor.")).Select(e => new BinarySensorEntity(e));
    ///<summary>Back Animal</summary>
    public BinarySensorEntity BackAnimal => new(_haContext, "binary_sensor.back_animal");
    ///<summary>Back Motion</summary>
    public BinarySensorEntity BackMotion => new(_haContext, "binary_sensor.back_motion");
    ///<summary>Back Person</summary>
    public BinarySensorEntity BackPerson => new(_haContext, "binary_sensor.back_person");
    ///<summary>Back Vehicle</summary>
    public BinarySensorEntity BackVehicle => new(_haContext, "binary_sensor.back_vehicle");
    ///<summary>Cuddle Bear Focus</summary>
    public BinarySensorEntity CuddleBearFocus => new(_haContext, "binary_sensor.cuddle_bear_focus");
    ///<summary>DESKTOP-TCFUKDG DESKTOP-TCFUKDG_namedwindow_diablo_open</summary>
    public BinarySensorEntity DesktopTcfukdgDesktopTcfukdgNamedwindowDiabloOpen => new(_haContext, "binary_sensor.desktop_tcfukdg_desktop_tcfukdg_namedwindow_diablo_open");
    ///<summary>DESKTOP-TCFUKDG DESKTOP-TCFUKDG_namedwindow_hell_let_loose</summary>
    public BinarySensorEntity DesktopTcfukdgDesktopTcfukdgNamedwindowHellLetLoose => new(_haContext, "binary_sensor.desktop_tcfukdg_desktop_tcfukdg_namedwindow_hell_let_loose");
    ///<summary>DESKTOP-TCFUKDG DESKTOP-TCFUKDG_namedwindow_helldivers</summary>
    public BinarySensorEntity DesktopTcfukdgDesktopTcfukdgNamedwindowHelldivers => new(_haContext, "binary_sensor.desktop_tcfukdg_desktop_tcfukdg_namedwindow_helldivers");
    ///<summary>DESKTOP-TCFUKDG DESKTOP-TCFUKDG_namedwindow_league</summary>
    public BinarySensorEntity DesktopTcfukdgDesktopTcfukdgNamedwindowLeague => new(_haContext, "binary_sensor.desktop_tcfukdg_desktop_tcfukdg_namedwindow_league");
    ///<summary>DESKTOP-TCFUKDG DESKTOP-TCFUKDG_namedwindow_Lethal_company</summary>
    public BinarySensorEntity DesktopTcfukdgDesktopTcfukdgNamedwindowLethalCompany => new(_haContext, "binary_sensor.desktop_tcfukdg_desktop_tcfukdg_namedwindow_lethal_company");
    ///<summary>DESKTOP-TCFUKDG DESKTOP-TCFUKDG_namedwindow_marvel_rivals</summary>
    public BinarySensorEntity DesktopTcfukdgDesktopTcfukdgNamedwindowMarvelRivals => new(_haContext, "binary_sensor.desktop_tcfukdg_desktop_tcfukdg_namedwindow_marvel_rivals");
    ///<summary>DESKTOP-TCFUKDG DESKTOP-TCFUKDG_namedwindow_path_of_exile</summary>
    public BinarySensorEntity DesktopTcfukdgDesktopTcfukdgNamedwindowPathOfExile => new(_haContext, "binary_sensor.desktop_tcfukdg_desktop_tcfukdg_namedwindow_path_of_exile");
    ///<summary>DESKTOP-TCFUKDG DESKTOP-TCFUKDG_namedwindow_warhammer</summary>
    public BinarySensorEntity DesktopTcfukdgDesktopTcfukdgNamedwindowWarhammer => new(_haContext, "binary_sensor.desktop_tcfukdg_desktop_tcfukdg_namedwindow_warhammer");
    ///<summary>Doorbell Motion</summary>
    public BinarySensorEntity DoorbellMotion => new(_haContext, "binary_sensor.doorbell_motion");
    ///<summary>Doorbell Package</summary>
    public BinarySensorEntity DoorbellPackage => new(_haContext, "binary_sensor.doorbell_package");
    ///<summary>Doorbell Person</summary>
    public BinarySensorEntity DoorbellPerson => new(_haContext, "binary_sensor.doorbell_person");
    ///<summary>Doorbell Visitor</summary>
    public BinarySensorEntity DoorbellVisitor => new(_haContext, "binary_sensor.doorbell_visitor");
    ///<summary>East Side Animal</summary>
    public BinarySensorEntity EastSideAnimal => new(_haContext, "binary_sensor.east_side_animal");
    ///<summary>East Side Motion</summary>
    public BinarySensorEntity EastSideMotion => new(_haContext, "binary_sensor.east_side_motion");
    ///<summary>East Side Person</summary>
    public BinarySensorEntity EastSidePerson => new(_haContext, "binary_sensor.east_side_person");
    ///<summary>East Side Vehicle</summary>
    public BinarySensorEntity EastSideVehicle => new(_haContext, "binary_sensor.east_side_vehicle");
    ///<summary>Frank Mop attached</summary>
    public BinarySensorEntity FrankMopAttached => new(_haContext, "binary_sensor.frank_mop_attached");
    ///<summary>Front Motion</summary>
    public BinarySensorEntity FrontMotion => new(_haContext, "binary_sensor.front_motion");
    ///<summary>Front Person</summary>
    public BinarySensorEntity FrontPerson => new(_haContext, "binary_sensor.front_person");
    ///<summary>Front Pet</summary>
    public BinarySensorEntity FrontPet => new(_haContext, "binary_sensor.front_pet");
    ///<summary>Front Vehicle</summary>
    public BinarySensorEntity FrontVehicle => new(_haContext, "binary_sensor.front_vehicle");
    ///<summary>Garage Animal</summary>
    public BinarySensorEntity GarageAnimal => new(_haContext, "binary_sensor.garage_animal");
    ///<summary>Garage Motion</summary>
    public BinarySensorEntity GarageMotion => new(_haContext, "binary_sensor.garage_motion");
    ///<summary>Garage Person</summary>
    public BinarySensorEntity GaragePerson => new(_haContext, "binary_sensor.garage_person");
    ///<summary>Home Connect 620 Connected Smart Lock Keypad temporary disabled</summary>
    public BinarySensorEntity HomeConnect620ConnectedSmartLockKeypadTemporaryDisabled => new(_haContext, "binary_sensor.home_connect_620_connected_smart_lock_keypad_temporary_disabled");
    ///<summary>Home Connect 620 Connected Smart Lock Lock jammed</summary>
    public BinarySensorEntity HomeConnect620ConnectedSmartLockLockJammed => new(_haContext, "binary_sensor.home_connect_620_connected_smart_lock_lock_jammed");
    ///<summary>Home Connect 620 Connected Smart Lock Low battery level</summary>
    public BinarySensorEntity HomeConnect620ConnectedSmartLockLowBatteryLevel => new(_haContext, "binary_sensor.home_connect_620_connected_smart_lock_low_battery_level");
    ///<summary>Home Connect 620 Connected Smart Lock Power has been applied</summary>
    public BinarySensorEntity HomeConnect620ConnectedSmartLockPowerHasBeenApplied => new(_haContext, "binary_sensor.home_connect_620_connected_smart_lock_power_has_been_applied");
    ///<summary>Home Connect 620 Connected Smart Lock Replace battery now</summary>
    public BinarySensorEntity HomeConnect620ConnectedSmartLockReplaceBatteryNow => new(_haContext, "binary_sensor.home_connect_620_connected_smart_lock_replace_battery_now");
    ///<summary>Home Connect 620 Connected Smart Lock Replace battery soon</summary>
    public BinarySensorEntity HomeConnect620ConnectedSmartLockReplaceBatterySoon => new(_haContext, "binary_sensor.home_connect_620_connected_smart_lock_replace_battery_soon");
    ///<summary>Home Connect 620 Connected Smart Lock Tampering, product cover removed</summary>
    public BinarySensorEntity HomeConnect620ConnectedSmartLockTamperingProductCoverRemoved => new(_haContext, "binary_sensor.home_connect_620_connected_smart_lock_tampering_product_cover_removed");
    ///<summary>Husbear Focus</summary>
    public BinarySensorEntity HusbearFocus => new(_haContext, "binary_sensor.husbear_focus");
    ///<summary>Lanai Animal</summary>
    public BinarySensorEntity LanaiAnimal => new(_haContext, "binary_sensor.lanai_animal");
    ///<summary>Lanai Motion</summary>
    public BinarySensorEntity LanaiMotion => new(_haContext, "binary_sensor.lanai_motion");
    ///<summary>Lanai Person</summary>
    public BinarySensorEntity LanaiPerson => new(_haContext, "binary_sensor.lanai_person");
    ///<summary>Lanai Vehicle</summary>
    public BinarySensorEntity LanaiVehicle => new(_haContext, "binary_sensor.lanai_vehicle");
    ///<summary>LUMI lumi.sensor_wleak.aq1 Moisture</summary>
    public BinarySensorEntity LumiLumiSensorWleakAq1Moisture => new(_haContext, "binary_sensor.lumi_lumi_sensor_wleak_aq1_moisture");
    ///<summary>LUMI lumi.sensor_wleak.aq2 Moisture</summary>
    public BinarySensorEntity LumiLumiSensorWleakAq2Moisture2 => new(_haContext, "binary_sensor.lumi_lumi_sensor_wleak_aq2_moisture_2");
    ///<summary>LUMI lumi.sensor_wleak.aq3 Moisture</summary>
    public BinarySensorEntity LumiLumiSensorWleakAq3Moisture2 => new(_haContext, "binary_sensor.lumi_lumi_sensor_wleak_aq3_moisture_2");
    ///<summary>Main Motion</summary>
    public BinarySensorEntity MainMotion => new(_haContext, "binary_sensor.main_motion");
    ///<summary>Main Person</summary>
    public BinarySensorEntity MainPerson => new(_haContext, "binary_sensor.main_person");
    ///<summary>Main Animal</summary>
    public BinarySensorEntity MainPet => new(_haContext, "binary_sensor.main_pet");
    ///<summary>ratgdov2.5i 0a070c Button</summary>
    public BinarySensorEntity Ratgdov25i0a070cButton => new(_haContext, "binary_sensor.ratgdov25i_0a070c_button");
    ///<summary>ratgdov2.5i 0a070c Dry contact close</summary>
    public BinarySensorEntity Ratgdov25i0a070cDryContactClose => new(_haContext, "binary_sensor.ratgdov25i_0a070c_dry_contact_close");
    ///<summary>ratgdov2.5i 0a070c Dry contact light</summary>
    public BinarySensorEntity Ratgdov25i0a070cDryContactLight => new(_haContext, "binary_sensor.ratgdov25i_0a070c_dry_contact_light");
    ///<summary>ratgdov2.5i 0a070c Dry contact open</summary>
    public BinarySensorEntity Ratgdov25i0a070cDryContactOpen => new(_haContext, "binary_sensor.ratgdov25i_0a070c_dry_contact_open");
    ///<summary>ratgdov2.5i 0a070c Motion</summary>
    public BinarySensorEntity Ratgdov25i0a070cMotion => new(_haContext, "binary_sensor.ratgdov25i_0a070c_motion");
    ///<summary>ratgdov2.5i 0a070c Motor</summary>
    public BinarySensorEntity Ratgdov25i0a070cMotor => new(_haContext, "binary_sensor.ratgdov25i_0a070c_motor");
    ///<summary>ratgdov2.5i 0a070c Obstruction</summary>
    public BinarySensorEntity Ratgdov25i0a070cObstruction => new(_haContext, "binary_sensor.ratgdov25i_0a070c_obstruction");
    ///<summary>Remote UI</summary>
    public BinarySensorEntity RemoteUi => new(_haContext, "binary_sensor.remote_ui");
    ///<summary>Room light</summary>
    public BinarySensorEntity RoomLight => new(_haContext, "binary_sensor.room_light");
    ///<summary>Shawn office Hue motion sensor Motion</summary>
    public BinarySensorEntity ShawnOfficeHueMotionSensorMotion => new(_haContext, "binary_sensor.shawn_office_hue_motion_sensor_motion");
    ///<summary>ShawnComputer</summary>
    public BinarySensorEntity Shawncomputer => new(_haContext, "binary_sensor.shawncomputer");
    ///<summary>Shawn’s iPad Focus</summary>
    public BinarySensorEntity ShawnsIpadFocus => new(_haContext, "binary_sensor.shawns_ipad_focus");
    ///<summary>Shawn’s iPhone Focus</summary>
    public BinarySensorEntity ShawnsIphoneFocus => new(_haContext, "binary_sensor.shawns_iphone_focus");
    ///<summary>Shawn’s MacBook Pro Active</summary>
    public BinarySensorEntity ShawnsMacbookProActive => new(_haContext, "binary_sensor.shawns_macbook_pro_active");
    ///<summary>Shawn’s MacBook Pro Audio Input In Use</summary>
    public BinarySensorEntity ShawnsMacbookProAudioInputInUse => new(_haContext, "binary_sensor.shawns_macbook_pro_audio_input_in_use");
    ///<summary>Shawn’s MacBook Pro Audio Output In Use</summary>
    public BinarySensorEntity ShawnsMacbookProAudioOutputInUse => new(_haContext, "binary_sensor.shawns_macbook_pro_audio_output_in_use");
    ///<summary>Shawn’s MacBook Pro Camera In Use</summary>
    public BinarySensorEntity ShawnsMacbookProCameraInUse => new(_haContext, "binary_sensor.shawns_macbook_pro_camera_in_use");
    ///<summary>Shawn’s MacBook Pro Focus</summary>
    public BinarySensorEntity ShawnsMacbookProFocus => new(_haContext, "binary_sensor.shawns_macbook_pro_focus");
    ///<summary>T6 Pro Z-Wave Programmable Thermostat AC mains re-connected</summary>
    public BinarySensorEntity T6ProZWaveProgrammableThermostatAcMainsReConnected => new(_haContext, "binary_sensor.t6_pro_z_wave_programmable_thermostat_ac_mains_re_connected");
    ///<summary>T6 Pro Z-Wave Programmable Thermostat Low battery level</summary>
    public BinarySensorEntity T6ProZWaveProgrammableThermostatLowBatteryLevel => new(_haContext, "binary_sensor.t6_pro_z_wave_programmable_thermostat_low_battery_level");
    ///<summary>West Side Animal</summary>
    public BinarySensorEntity WestSideAnimal => new(_haContext, "binary_sensor.west_side_animal");
    ///<summary>West Side Motion</summary>
    public BinarySensorEntity WestSideMotion => new(_haContext, "binary_sensor.west_side_motion");
    ///<summary>West Side Person</summary>
    public BinarySensorEntity WestSidePerson => new(_haContext, "binary_sensor.west_side_person");
    ///<summary>West Side Vehicle</summary>
    public BinarySensorEntity WestSideVehicle => new(_haContext, "binary_sensor.west_side_vehicle");
}

public partial class ButtonEntities
{
    private readonly IHaContext _haContext;
    public ButtonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all button entities currently registered (at runtime) in Home Assistant as ButtonEntity</summary>
    public IEnumerable<ButtonEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("button.")).Select(e => new ButtonEntity(e));
    ///<summary>Bedroom Start Down Light Dimmer</summary>
    public ButtonEntity BedroomStartDownLightDimmer => new(_haContext, "button.bedroom_start_down_light_dimmer");
    ///<summary>Bedroom Start Up Light Dimmer</summary>
    public ButtonEntity BedroomStartUpLightDimmer => new(_haContext, "button.bedroom_start_up_light_dimmer");
    ///<summary>Bedroom Stop Actions</summary>
    public ButtonEntity BedroomStopActions => new(_haContext, "button.bedroom_stop_actions");
    ///<summary>DESKTOP-TCFUKDG DESKTOP-TCFUKDG_hibernate</summary>
    public ButtonEntity DesktopTcfukdgDesktopTcfukdgHibernate => new(_haContext, "button.desktop_tcfukdg_desktop_tcfukdg_hibernate");
    ///<summary>DESKTOP-TCFUKDG DESKTOP-TCFUKDG_hyperion_resume</summary>
    public ButtonEntity DesktopTcfukdgDesktopTcfukdgHyperionResume => new(_haContext, "button.desktop_tcfukdg_desktop_tcfukdg_hyperion_resume");
    ///<summary>DESKTOP-TCFUKDG DESKTOP-TCFUKDG_hyperion_suspend</summary>
    public ButtonEntity DesktopTcfukdgDesktopTcfukdgHyperionSuspend => new(_haContext, "button.desktop_tcfukdg_desktop_tcfukdg_hyperion_suspend");
    ///<summary>Floor Lamp Left Request Platform API State</summary>
    public ButtonEntity FloorLampLeftRequestPlatformApiState => new(_haContext, "button.floor_lamp_left_request_platform_api_state");
    ///<summary>Floor Lamp Right Request Platform API State</summary>
    public ButtonEntity FloorLampRightRequestPlatformApiState => new(_haContext, "button.floor_lamp_right_request_platform_api_state");
    ///<summary>Frank Relocate</summary>
    public ButtonEntity FrankRelocate => new(_haContext, "button.frank_relocate");
    ///<summary>Garage Guard go to</summary>
    public ButtonEntity GarageGuardGoTo => new(_haContext, "button.garage_guard_go_to");
    ///<summary>Garage Guard set current position</summary>
    public ButtonEntity GarageGuardSetCurrentPosition => new(_haContext, "button.garage_guard_set_current_position");
    ///<summary>Garage PTZ calibrate</summary>
    public ButtonEntity GaragePtzCalibrate => new(_haContext, "button.garage_ptz_calibrate");
    ///<summary>Garage PTZ down</summary>
    public ButtonEntity GaragePtzDown => new(_haContext, "button.garage_ptz_down");
    ///<summary>Garage PTZ left</summary>
    public ButtonEntity GaragePtzLeft => new(_haContext, "button.garage_ptz_left");
    ///<summary>Garage PTZ right</summary>
    public ButtonEntity GaragePtzRight => new(_haContext, "button.garage_ptz_right");
    ///<summary>Garage PTZ stop</summary>
    public ButtonEntity GaragePtzStop => new(_haContext, "button.garage_ptz_stop");
    ///<summary>Garage PTZ up</summary>
    public ButtonEntity GaragePtzUp => new(_haContext, "button.garage_ptz_up");
    ///<summary>Govee to MQTT Purge Caches</summary>
    public ButtonEntity GoveeToMqttPurgeCaches => new(_haContext, "button.govee_to_mqtt_purge_caches");
    ///<summary>Home Connect 620 Connected Smart Lock Identify</summary>
    public ButtonEntity HomeConnect620ConnectedSmartLockIdentify => new(_haContext, "button.home_connect_620_connected_smart_lock_identify");
    ///<summary>Home Connect 620 Connected Smart Lock Idle Access Control Keypad state</summary>
    public ButtonEntity HomeConnect620ConnectedSmartLockIdleAccessControlKeypadState => new(_haContext, "button.home_connect_620_connected_smart_lock_idle_access_control_keypad_state");
    ///<summary>Home Connect 620 Connected Smart Lock Idle Access Control Lock state</summary>
    public ButtonEntity HomeConnect620ConnectedSmartLockIdleAccessControlLockState => new(_haContext, "button.home_connect_620_connected_smart_lock_idle_access_control_lock_state");
    ///<summary>Home Connect 620 Connected Smart Lock Idle Home Security Cover status</summary>
    public ButtonEntity HomeConnect620ConnectedSmartLockIdleHomeSecurityCoverStatus => new(_haContext, "button.home_connect_620_connected_smart_lock_idle_home_security_cover_status");
    ///<summary>Home Connect 620 Connected Smart Lock Idle Power Management Battery maintenance status</summary>
    public ButtonEntity HomeConnect620ConnectedSmartLockIdlePowerManagementBatteryMaintenanceStatus => new(_haContext, "button.home_connect_620_connected_smart_lock_idle_power_management_battery_maintenance_status");
    ///<summary>Home Connect 620 Connected Smart Lock Idle Power Management Power status</summary>
    public ButtonEntity HomeConnect620ConnectedSmartLockIdlePowerManagementPowerStatus => new(_haContext, "button.home_connect_620_connected_smart_lock_idle_power_management_power_status");
    ///<summary>Justin’s Office Start Dimmer</summary>
    public ButtonEntity JustinsOfficeStartDimmer => new(_haContext, "button.justins_office_start_dimmer");
    ///<summary>Justin’s Office Stop Actions</summary>
    public ButtonEntity JustinsOfficeStopActions => new(_haContext, "button.justins_office_stop_actions");
    ///<summary>LUMI lumi.sensor_wleak.aq1 Identify</summary>
    public ButtonEntity LumiLumiSensorWleakAq1Identify => new(_haContext, "button.lumi_lumi_sensor_wleak_aq1_identify");
    ///<summary>LUMI lumi.sensor_wleak.aq2 Identify</summary>
    public ButtonEntity LumiLumiSensorWleakAq2Identify2 => new(_haContext, "button.lumi_lumi_sensor_wleak_aq2_identify_2");
    ///<summary>LUMI lumi.sensor_wleak.aq3 Identify</summary>
    public ButtonEntity LumiLumiSensorWleakAq3Identify2 => new(_haContext, "button.lumi_lumi_sensor_wleak_aq3_identify_2");
    ///<summary>Main Guard go to</summary>
    public ButtonEntity MainGuardGoTo => new(_haContext, "button.main_guard_go_to");
    ///<summary>Main Guard set current position</summary>
    public ButtonEntity MainGuardSetCurrentPosition => new(_haContext, "button.main_guard_set_current_position");
    ///<summary>Main PTZ calibrate</summary>
    public ButtonEntity MainPtzCalibrate => new(_haContext, "button.main_ptz_calibrate");
    ///<summary>Main PTZ down</summary>
    public ButtonEntity MainPtzDown => new(_haContext, "button.main_ptz_down");
    ///<summary>Main PTZ left</summary>
    public ButtonEntity MainPtzLeft => new(_haContext, "button.main_ptz_left");
    ///<summary>Main PTZ right</summary>
    public ButtonEntity MainPtzRight => new(_haContext, "button.main_ptz_right");
    ///<summary>Main PTZ stop</summary>
    public ButtonEntity MainPtzStop => new(_haContext, "button.main_ptz_stop");
    ///<summary>Main PTZ up</summary>
    public ButtonEntity MainPtzUp => new(_haContext, "button.main_ptz_up");
    ///<summary>T6 Pro Z-Wave Programmable Thermostat Ping</summary>
    public ButtonEntity Node2Ping => new(_haContext, "button.node_2_ping");
    ///<summary>Home Connect 620 Connected Smart Lock Ping</summary>
    public ButtonEntity Node3Ping => new(_haContext, "button.node_3_ping");
    ///<summary>Permanent Lights Request Platform API State</summary>
    public ButtonEntity PermanentLightsRequestPlatformApiState => new(_haContext, "button.permanent_lights_request_platform_api_state");
    ///<summary>ratgdov2.5i 0a070c Query openings</summary>
    public ButtonEntity Ratgdov25i0a070cQueryOpenings => new(_haContext, "button.ratgdov25i_0a070c_query_openings");
    ///<summary>ratgdov2.5i 0a070c Query status</summary>
    public ButtonEntity Ratgdov25i0a070cQueryStatus => new(_haContext, "button.ratgdov25i_0a070c_query_status");
    ///<summary>ratgdov2.5i 0a070c Restart</summary>
    public ButtonEntity Ratgdov25i0a070cRestart => new(_haContext, "button.ratgdov25i_0a070c_restart");
    ///<summary>ratgdov2.5i 0a070c Safe mode boot</summary>
    public ButtonEntity Ratgdov25i0a070cSafeModeBoot => new(_haContext, "button.ratgdov25i_0a070c_safe_mode_boot");
    ///<summary>ratgdov2.5i 0a070c Sync</summary>
    public ButtonEntity Ratgdov25i0a070cSync => new(_haContext, "button.ratgdov25i_0a070c_sync");
    ///<summary>ratgdov2.5i 0a070c Toggle door</summary>
    public ButtonEntity Ratgdov25i0a070cToggleDoor => new(_haContext, "button.ratgdov25i_0a070c_toggle_door");
    ///<summary>Shawn monitor LEDs Restart</summary>
    public ButtonEntity ShawnMonitorLedsRestart => new(_haContext, "button.shawn_monitor_leds_restart");
}

public partial class CalendarEntities
{
    private readonly IHaContext _haContext;
    public CalendarEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all calendar entities currently registered (at runtime) in Home Assistant as CalendarEntity</summary>
    public IEnumerable<CalendarEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("calendar.")).Select(e => new CalendarEntity(e));
    ///<summary>Alexa Shopping List</summary>
    public CalendarEntity AlexaShoppingList => new(_haContext, "calendar.alexa_shopping_list");
    ///<summary>Household</summary>
    public CalendarEntity AlexaToDoList => new(_haContext, "calendar.alexa_to_do_list");
    ///<summary>CDE</summary>
    public CalendarEntity Cde => new(_haContext, "calendar.cde");
    ///<summary>Hobbies</summary>
    public CalendarEntity Hobbies => new(_haContext, "calendar.hobbies");
    ///<summary>Inbox</summary>
    public CalendarEntity Inbox => new(_haContext, "calendar.inbox");
    ///<summary>NPL</summary>
    public CalendarEntity Npl => new(_haContext, "calendar.npl");
    ///<summary>Shawn’s Packing Checklist</summary>
    public CalendarEntity ShawnsPackingChecklist => new(_haContext, "calendar.shawns_packing_checklist");
}

public partial class CameraEntities
{
    private readonly IHaContext _haContext;
    public CameraEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all camera entities currently registered (at runtime) in Home Assistant as CameraEntity</summary>
    public IEnumerable<CameraEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("camera.")).Select(e => new CameraEntity(e));
    ///<summary>Back Fluent</summary>
    public CameraEntity BackFluent => new(_haContext, "camera.back_fluent");
    ///<summary>Doorbell Fluent</summary>
    public CameraEntity DoorbellFluent => new(_haContext, "camera.doorbell_fluent");
    ///<summary>East Side Fluent</summary>
    public CameraEntity EastSideFluent => new(_haContext, "camera.east_side_fluent");
    ///<summary>Front Fluent</summary>
    public CameraEntity FrontFluent => new(_haContext, "camera.front_fluent");
    ///<summary>Garage Fluent</summary>
    public CameraEntity GarageFluent => new(_haContext, "camera.garage_fluent");
    ///<summary>Lanai Fluent</summary>
    public CameraEntity LanaiFluent => new(_haContext, "camera.lanai_fluent");
    ///<summary>Main Fluent</summary>
    public CameraEntity MainFluent => new(_haContext, "camera.main_fluent");
    ///<summary>West Side Fluent</summary>
    public CameraEntity WestSideFluent => new(_haContext, "camera.west_side_fluent");
}

public partial class ClimateEntities
{
    private readonly IHaContext _haContext;
    public ClimateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all climate entities currently registered (at runtime) in Home Assistant as ClimateEntity</summary>
    public IEnumerable<ClimateEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("climate.")).Select(e => new ClimateEntity(e));
    ///<summary>T6 Pro Z-Wave Programmable Thermostat </summary>
    public ClimateEntity T6ProZWaveProgrammableThermostat => new(_haContext, "climate.t6_pro_z_wave_programmable_thermostat");
}

public partial class ConfigEditorEntities
{
    private readonly IHaContext _haContext;
    public ConfigEditorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all config_editor entities currently registered (at runtime) in Home Assistant as ConfigEditorEntity</summary>
    public IEnumerable<ConfigEditorEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("config_editor.")).Select(e => new ConfigEditorEntity(e));
    public ConfigEditorEntity Version => new(_haContext, "config_editor.version");
}

public partial class ConversationEntities
{
    private readonly IHaContext _haContext;
    public ConversationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all conversation entities currently registered (at runtime) in Home Assistant as ConversationEntity</summary>
    public IEnumerable<ConversationEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("conversation.")).Select(e => new ConversationEntity(e));
    ///<summary>Home Assistant</summary>
    public ConversationEntity HomeAssistant => new(_haContext, "conversation.home_assistant");
}

public partial class CoverEntities
{
    private readonly IHaContext _haContext;
    public CoverEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all cover entities currently registered (at runtime) in Home Assistant as CoverEntity</summary>
    public IEnumerable<CoverEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("cover.")).Select(e => new CoverEntity(e));
    ///<summary>ratgdov2.5i 0a070c Door</summary>
    public CoverEntity Ratgdov25i0a070cDoor => new(_haContext, "cover.ratgdov25i_0a070c_door");
}

public partial class DeviceTrackerEntities
{
    private readonly IHaContext _haContext;
    public DeviceTrackerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all device_tracker entities currently registered (at runtime) in Home Assistant as DeviceTrackerEntity</summary>
    public IEnumerable<DeviceTrackerEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("device_tracker.")).Select(e => new DeviceTrackerEntity(e));
    ///<summary>Cuddle Bear</summary>
    public DeviceTrackerEntity CuddleBear => new(_haContext, "device_tracker.cuddle_bear");
    ///<summary>Husbear</summary>
    public DeviceTrackerEntity Husbear => new(_haContext, "device_tracker.husbear");
    ///<summary>iPad</summary>
    public DeviceTrackerEntity Ipad => new(_haContext, "device_tracker.ipad");
    ///<summary>Lyriq</summary>
    public DeviceTrackerEntity Lyriq => new(_haContext, "device_tracker.lyriq");
    ///<summary>Shawn’s iPad</summary>
    public DeviceTrackerEntity ShawnsIpad => new(_haContext, "device_tracker.shawns_ipad");
    ///<summary>Shawn’s iPhone</summary>
    public DeviceTrackerEntity ShawnsIphone => new(_haContext, "device_tracker.shawns_iphone");
    ///<summary>Shawn’s MacBook Pro</summary>
    public DeviceTrackerEntity ShawnsMacbookPro => new(_haContext, "device_tracker.shawns_macbook_pro");
}

public partial class EventEntities
{
    private readonly IHaContext _haContext;
    public EventEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all event entities currently registered (at runtime) in Home Assistant as EventEntity</summary>
    public IEnumerable<EventEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("event.")).Select(e => new EventEntity(e));
    ///<summary>Frank Last job</summary>
    public EventEntity FrankLastJob => new(_haContext, "event.frank_last_job");
}

public partial class FanEntities
{
    private readonly IHaContext _haContext;
    public FanEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all fan entities currently registered (at runtime) in Home Assistant as FanEntity</summary>
    public IEnumerable<FanEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("fan.")).Select(e => new FanEntity(e));
    ///<summary>Bedroom</summary>
    public FanEntity Bedroom => new(_haContext, "fan.bedroom");
    ///<summary>Justin Purifier</summary>
    public FanEntity JustinPurifier => new(_haContext, "fan.justin_purifier");
    ///<summary>Justin’s Office</summary>
    public FanEntity JustinsOffice => new(_haContext, "fan.justins_office");
    ///<summary>Main Purifier</summary>
    public FanEntity MainPurifier => new(_haContext, "fan.main_purifier");
    ///<summary>Shawn Purifier</summary>
    public FanEntity ShawnPurifier => new(_haContext, "fan.shawn_purifier");
}

public partial class GoveeEntities
{
    private readonly IHaContext _haContext;
    public GoveeEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all govee entities currently registered (at runtime) in Home Assistant as GoveeEntity</summary>
    public IEnumerable<GoveeEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("govee.")).Select(e => new GoveeEntity(e));
    public GoveeEntity State => new(_haContext, "govee.state");
}

public partial class ImageEntities
{
    private readonly IHaContext _haContext;
    public ImageEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all image entities currently registered (at runtime) in Home Assistant as ImageEntity</summary>
    public IEnumerable<ImageEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("image.")).Select(e => new ImageEntity(e));
    ///<summary>Frank Map</summary>
    public ImageEntity FrankMap => new(_haContext, "image.frank_map");
}

public partial class LockEntities
{
    private readonly IHaContext _haContext;
    public LockEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all lock entities currently registered (at runtime) in Home Assistant as LockEntity</summary>
    public IEnumerable<LockEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("lock.")).Select(e => new LockEntity(e));
    ///<summary>Home Connect 620 Connected Smart Lock </summary>
    public LockEntity HomeConnect620ConnectedSmartLock => new(_haContext, "lock.home_connect_620_connected_smart_lock");
    ///<summary>ratgdov2.5i 0a070c Lock remotes</summary>
    public LockEntity Ratgdov25i0a070cLockRemotes => new(_haContext, "lock.ratgdov25i_0a070c_lock_remotes");
}

public partial class NumberEntities
{
    private readonly IHaContext _haContext;
    public NumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all number entities currently registered (at runtime) in Home Assistant as NumberEntity</summary>
    public IEnumerable<NumberEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("number.")).Select(e => new NumberEntity(e));
    ///<summary>Back AI animal sensitivity</summary>
    public NumberEntity BackAiAnimalSensitivity => new(_haContext, "number.back_ai_animal_sensitivity");
    ///<summary>Back AI person sensitivity</summary>
    public NumberEntity BackAiPersonSensitivity => new(_haContext, "number.back_ai_person_sensitivity");
    ///<summary>Back AI vehicle sensitivity</summary>
    public NumberEntity BackAiVehicleSensitivity => new(_haContext, "number.back_ai_vehicle_sensitivity");
    ///<summary>Back Motion sensitivity</summary>
    public NumberEntity BackMotionSensitivity => new(_haContext, "number.back_motion_sensitivity");
    ///<summary>Back Volume</summary>
    public NumberEntity BackVolume => new(_haContext, "number.back_volume");
    ///<summary>Doorbell AI package sensitivity</summary>
    public NumberEntity DoorbellAiPackageSensitivity => new(_haContext, "number.doorbell_ai_package_sensitivity");
    ///<summary>Doorbell AI person sensitivity</summary>
    public NumberEntity DoorbellAiPersonSensitivity => new(_haContext, "number.doorbell_ai_person_sensitivity");
    ///<summary>Doorbell Auto quick reply time</summary>
    public NumberEntity DoorbellAutoQuickReplyTime => new(_haContext, "number.doorbell_auto_quick_reply_time");
    ///<summary>Doorbell Motion sensitivity</summary>
    public NumberEntity DoorbellMotionSensitivity => new(_haContext, "number.doorbell_motion_sensitivity");
    ///<summary>Doorbell Volume</summary>
    public NumberEntity DoorbellVolume => new(_haContext, "number.doorbell_volume");
    ///<summary>East Side AI animal sensitivity</summary>
    public NumberEntity EastSideAiAnimalSensitivity => new(_haContext, "number.east_side_ai_animal_sensitivity");
    ///<summary>East Side AI person sensitivity</summary>
    public NumberEntity EastSideAiPersonSensitivity => new(_haContext, "number.east_side_ai_person_sensitivity");
    ///<summary>East Side AI vehicle sensitivity</summary>
    public NumberEntity EastSideAiVehicleSensitivity => new(_haContext, "number.east_side_ai_vehicle_sensitivity");
    ///<summary>East Side Motion sensitivity</summary>
    public NumberEntity EastSideMotionSensitivity => new(_haContext, "number.east_side_motion_sensitivity");
    ///<summary>East Side Volume</summary>
    public NumberEntity EastSideVolume => new(_haContext, "number.east_side_volume");
    ///<summary>Front AI person sensitivity</summary>
    public NumberEntity FrontAiPersonSensitivity => new(_haContext, "number.front_ai_person_sensitivity");
    ///<summary>Front AI pet sensitivity</summary>
    public NumberEntity FrontAiPetSensitivity => new(_haContext, "number.front_ai_pet_sensitivity");
    ///<summary>Front AI vehicle sensitivity</summary>
    public NumberEntity FrontAiVehicleSensitivity => new(_haContext, "number.front_ai_vehicle_sensitivity");
    ///<summary>Front Floodlight turn on brightness</summary>
    public NumberEntity FrontFloodlightTurnOnBrightness => new(_haContext, "number.front_floodlight_turn_on_brightness");
    ///<summary>Front Motion sensitivity</summary>
    public NumberEntity FrontMotionSensitivity => new(_haContext, "number.front_motion_sensitivity");
    ///<summary>Front Volume</summary>
    public NumberEntity FrontVolume => new(_haContext, "number.front_volume");
    ///<summary>Garage AI animal sensitivity</summary>
    public NumberEntity GarageAiAnimalSensitivity => new(_haContext, "number.garage_ai_animal_sensitivity");
    ///<summary>Garage AI person sensitivity</summary>
    public NumberEntity GarageAiPersonSensitivity => new(_haContext, "number.garage_ai_person_sensitivity");
    ///<summary>Garage Auto track disappear time</summary>
    public NumberEntity GarageAutoTrackDisappearTime => new(_haContext, "number.garage_auto_track_disappear_time");
    ///<summary>Garage Auto track limit left</summary>
    public NumberEntity GarageAutoTrackLimitLeft => new(_haContext, "number.garage_auto_track_limit_left");
    ///<summary>Garage Auto track limit right</summary>
    public NumberEntity GarageAutoTrackLimitRight => new(_haContext, "number.garage_auto_track_limit_right");
    ///<summary>Garage Auto track stop time</summary>
    public NumberEntity GarageAutoTrackStopTime => new(_haContext, "number.garage_auto_track_stop_time");
    ///<summary>Garage Guard return time</summary>
    public NumberEntity GarageGuardReturnTime => new(_haContext, "number.garage_guard_return_time");
    ///<summary>Garage Motion sensitivity</summary>
    public NumberEntity GarageMotionSensitivity => new(_haContext, "number.garage_motion_sensitivity");
    ///<summary>Garage Volume</summary>
    public NumberEntity GarageVolume => new(_haContext, "number.garage_volume");
    ///<summary>Home Connect 620 Connected Smart Lock Indicator value</summary>
    public NumberEntity HomeConnect620ConnectedSmartLockIndicatorValue => new(_haContext, "number.home_connect_620_connected_smart_lock_indicator_value");
    ///<summary>Lanai AI animal sensitivity</summary>
    public NumberEntity LanaiAiAnimalSensitivity => new(_haContext, "number.lanai_ai_animal_sensitivity");
    ///<summary>Lanai AI person sensitivity</summary>
    public NumberEntity LanaiAiPersonSensitivity => new(_haContext, "number.lanai_ai_person_sensitivity");
    ///<summary>Lanai AI vehicle sensitivity</summary>
    public NumberEntity LanaiAiVehicleSensitivity => new(_haContext, "number.lanai_ai_vehicle_sensitivity");
    ///<summary>Lanai Motion sensitivity</summary>
    public NumberEntity LanaiMotionSensitivity => new(_haContext, "number.lanai_motion_sensitivity");
    ///<summary>Lanai Volume</summary>
    public NumberEntity LanaiVolume => new(_haContext, "number.lanai_volume");
    ///<summary>Main AI person sensitivity</summary>
    public NumberEntity MainAiPersonSensitivity => new(_haContext, "number.main_ai_person_sensitivity");
    ///<summary>Main AI animal sensitivity</summary>
    public NumberEntity MainAiPetSensitivity => new(_haContext, "number.main_ai_pet_sensitivity");
    ///<summary>Main Auto track disappear time</summary>
    public NumberEntity MainAutoTrackDisappearTime => new(_haContext, "number.main_auto_track_disappear_time");
    ///<summary>Main Auto track limit left</summary>
    public NumberEntity MainAutoTrackLimitLeft => new(_haContext, "number.main_auto_track_limit_left");
    ///<summary>Main Auto track limit right</summary>
    public NumberEntity MainAutoTrackLimitRight => new(_haContext, "number.main_auto_track_limit_right");
    ///<summary>Main Auto track stop time</summary>
    public NumberEntity MainAutoTrackStopTime => new(_haContext, "number.main_auto_track_stop_time");
    ///<summary>Main Guard return time</summary>
    public NumberEntity MainGuardReturnTime => new(_haContext, "number.main_guard_return_time");
    ///<summary>Main Motion sensitivity</summary>
    public NumberEntity MainMotionSensitivity => new(_haContext, "number.main_motion_sensitivity");
    ///<summary>Main Volume</summary>
    public NumberEntity MainVolume => new(_haContext, "number.main_volume");
    ///<summary>Balance</summary>
    public NumberEntity OfficeBalance => new(_haContext, "number.office_balance");
    ///<summary>Bass</summary>
    public NumberEntity OfficeBass => new(_haContext, "number.office_bass");
    ///<summary>Treble</summary>
    public NumberEntity OfficeTreble => new(_haContext, "number.office_treble");
    ///<summary>ratgdov2.5i 0a070c Client ID</summary>
    public NumberEntity Ratgdov25i0a070cClientId => new(_haContext, "number.ratgdov25i_0a070c_client_id");
    ///<summary>ratgdov2.5i 0a070c Closing duration</summary>
    public NumberEntity Ratgdov25i0a070cClosingDuration => new(_haContext, "number.ratgdov25i_0a070c_closing_duration");
    ///<summary>ratgdov2.5i 0a070c Opening duration</summary>
    public NumberEntity Ratgdov25i0a070cOpeningDuration => new(_haContext, "number.ratgdov25i_0a070c_opening_duration");
    ///<summary>ratgdov2.5i 0a070c Rolling code counter</summary>
    public NumberEntity Ratgdov25i0a070cRollingCodeCounter => new(_haContext, "number.ratgdov25i_0a070c_rolling_code_counter");
    ///<summary>Reolink Chime Volume</summary>
    public NumberEntity ReolinkChimeVolume => new(_haContext, "number.reolink_chime_volume");
    ///<summary>Shawn monitor LEDs Intensity</summary>
    public NumberEntity ShawnMonitorLedsIntensity => new(_haContext, "number.shawn_monitor_leds_intensity");
    ///<summary>Shawn monitor LEDs Speed</summary>
    public NumberEntity ShawnMonitorLedsSpeed => new(_haContext, "number.shawn_monitor_leds_speed");
    ///<summary>West Side AI animal sensitivity</summary>
    public NumberEntity WestSideAiAnimalSensitivity => new(_haContext, "number.west_side_ai_animal_sensitivity");
    ///<summary>West Side AI person sensitivity</summary>
    public NumberEntity WestSideAiPersonSensitivity => new(_haContext, "number.west_side_ai_person_sensitivity");
    ///<summary>West Side AI vehicle sensitivity</summary>
    public NumberEntity WestSideAiVehicleSensitivity => new(_haContext, "number.west_side_ai_vehicle_sensitivity");
    ///<summary>West Side Motion sensitivity</summary>
    public NumberEntity WestSideMotionSensitivity => new(_haContext, "number.west_side_motion_sensitivity");
    ///<summary>West Side Volume</summary>
    public NumberEntity WestSideVolume => new(_haContext, "number.west_side_volume");
}

public partial class PersonEntities
{
    private readonly IHaContext _haContext;
    public PersonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all person entities currently registered (at runtime) in Home Assistant as PersonEntity</summary>
    public IEnumerable<PersonEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("person.")).Select(e => new PersonEntity(e));
    ///<summary>Admin</summary>
    public PersonEntity Admin => new(_haContext, "person.admin");
    ///<summary>Justin</summary>
    public PersonEntity Justin => new(_haContext, "person.justin");
    ///<summary>Lyriq</summary>
    public PersonEntity Lyriq => new(_haContext, "person.lyriq");
    ///<summary>Shawn</summary>
    public PersonEntity Shawn => new(_haContext, "person.shawn");
}

public partial class RemoteEntities
{
    private readonly IHaContext _haContext;
    public RemoteEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all remote entities currently registered (at runtime) in Home Assistant as RemoteEntity</summary>
    public IEnumerable<RemoteEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("remote.")).Select(e => new RemoteEntity(e));
    ///<summary>Fire TV 192.168.20.66</summary>
    public RemoteEntity FireTv1921682066 => new(_haContext, "remote.fire_tv_192_168_20_66");
    ///<summary>Shawn&apos;s Office Tv</summary>
    public RemoteEntity ShawnSOfficeTv => new(_haContext, "remote.shawn_s_office_tv");
}

public partial class SceneEntities
{
    private readonly IHaContext _haContext;
    public SceneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all scene entities currently registered (at runtime) in Home Assistant as SceneEntity</summary>
    public IEnumerable<SceneEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("scene.")).Select(e => new SceneEntity(e));
    ///<summary>Govee to MQTT One-Click: Default: Permanent default</summary>
    public SceneEntity GoveeToMqttOneClickDefaultPermanentDefault => new(_haContext, "scene.govee_to_mqtt_one_click_default_permanent_default");
    ///<summary>Govee to MQTT One-Click: Default: Permanent intruder</summary>
    public SceneEntity GoveeToMqttOneClickDefaultPermanentIntruder => new(_haContext, "scene.govee_to_mqtt_one_click_default_permanent_intruder");
    ///<summary>One-Click: Default: Taptorun</summary>
    public SceneEntity GoveeToMqttOneClickDefaultTaptorun => new(_haContext, "scene.govee_to_mqtt_one_click_default_taptorun");
    ///<summary>House - Pride</summary>
    public SceneEntity HousePride => new(_haContext, "scene.house_pride");
    ///<summary>Justin - Relaxing</summary>
    public SceneEntity JustinsOfficeRelax => new(_haContext, "scene.justins_office_relax");
    ///<summary>Main - Sunrise</summary>
    public SceneEntity MainBeforeSunrise => new(_haContext, "scene.main_before_sunrise");
    ///<summary>Main - Sunset</summary>
    public SceneEntity MainBeforeSunset => new(_haContext, "scene.main_before_sunset");
    ///<summary>Main - Calming</summary>
    public SceneEntity MainNight => new(_haContext, "scene.main_night");
    ///<summary>New scene</summary>
    public SceneEntity NewScene => new(_haContext, "scene.new_scene");
    ///<summary>Shawn&apos;s office Day</summary>
    public SceneEntity ShawnSOfficeDay => new(_haContext, "scene.shawn_s_office_day");
    ///<summary>Shawn - Calming</summary>
    public SceneEntity ShawnsOfficeCalming => new(_haContext, "scene.shawns_office_calming");
    ///<summary>Shawn - Concentrate</summary>
    public SceneEntity ShawnsOfficeConcentrate => new(_haContext, "scene.shawns_office_concentrate");
    ///<summary>Shawns office night</summary>
    public SceneEntity ShawnsOfficeNight => new(_haContext, "scene.shawns_office_night");
}

public partial class ScheduleEntities
{
    private readonly IHaContext _haContext;
    public ScheduleEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all schedule entities currently registered (at runtime) in Home Assistant as ScheduleEntity</summary>
    public IEnumerable<ScheduleEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("schedule.")).Select(e => new ScheduleEntity(e));
    ///<summary>Justin office hours</summary>
    public ScheduleEntity JustinOfficeHours => new(_haContext, "schedule.justin_office_hours");
}

public partial class ScriptEntities
{
    private readonly IHaContext _haContext;
    public ScriptEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all script entities currently registered (at runtime) in Home Assistant as ScriptEntity</summary>
    public IEnumerable<ScriptEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("script.")).Select(e => new ScriptEntity(e));
    ///<summary>Delay garage light off</summary>
    public ScriptEntity DelayGarageLightOff => new(_haContext, "script.delay_garage_light_off");
    ///<summary>Delayed garage close</summary>
    public ScriptEntity DelayedGarageClose => new(_haContext, "script.delayed_garage_close");
    ///<summary>Home state manager</summary>
    public ScriptEntity HomeStateManager => new(_haContext, "script.home_state_manager");
    ///<summary>Put house to sleep (remove this)</summary>
    public ScriptEntity HouseSleepyTime => new(_haContext, "script.house_sleepy_time");
    ///<summary>Kitchen Alexa TTS</summary>
    public ScriptEntity KitchenAlexaTts => new(_haContext, "script.kitchen_alexa_tts");
    ///<summary>Turn main on</summary>
    public ScriptEntity MainSceneDependingOnTimeOfDay => new(_haContext, "script.main_scene_depending_on_time_of_day");
    ///<summary>Turn master on</summary>
    public ScriptEntity MasterSceneDependingOnTimeOfDay => new(_haContext, "script.master_scene_depending_on_time_of_day");
    ///<summary>Notify All Devices with a Message</summary>
    public ScriptEntity NotifyAllDevicesWithAMessage => new(_haContext, "script.notify_all_devices_with_a_message");
    ///<summary>Outside lights state manager</summary>
    public ScriptEntity OutsideLightsStateMachine => new(_haContext, "script.outside_lights_state_machine");
    ///<summary>Prompt Close Garage</summary>
    public ScriptEntity PromptCloseGarage => new(_haContext, "script.prompt_close_garage");
    ///<summary>Turn shawn office off</summary>
    public ScriptEntity ShawnOff => new(_haContext, "script.shawn_off");
    ///<summary>Shawn office TTS</summary>
    public ScriptEntity ShawnOfficeTts => new(_haContext, "script.shawn_office_tts");
    ///<summary>Shawn - On</summary>
    public ScriptEntity ShawnOn => new(_haContext, "script.shawn_on");
    ///<summary>Turn shawn office on</summary>
    public ScriptEntity ShawnOn2 => new(_haContext, "script.shawn_on_2");
    ///<summary>Shawn&apos;s office lights day</summary>
    public ScriptEntity ShawnSOfficeDaytime => new(_haContext, "script.shawn_s_office_daytime");
    ///<summary>Shawn&apos;s office lights halloween</summary>
    public ScriptEntity ShawnSOfficeLightsHalloween => new(_haContext, "script.shawn_s_office_lights_halloween");
    ///<summary>Shawn&apos;s office lights relax</summary>
    public ScriptEntity ShawnSOfficeLightsRelax => new(_haContext, "script.shawn_s_office_lights_relax");
    ///<summary>Turn justin office off</summary>
    public ScriptEntity TurnJustinOfficeOff => new(_haContext, "script.turn_justin_office_off");
    ///<summary>Turn justin office on</summary>
    public ScriptEntity TurnJustinOfficeOn => new(_haContext, "script.turn_justin_office_on");
    ///<summary>Turn main off</summary>
    public ScriptEntity TurnMainOff => new(_haContext, "script.turn_main_off");
    ///<summary>Turn master off</summary>
    public ScriptEntity TurnOfMaster => new(_haContext, "script.turn_of_master");
}

public partial class SelectEntities
{
    private readonly IHaContext _haContext;
    public SelectEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all select entities currently registered (at runtime) in Home Assistant as SelectEntity</summary>
    public IEnumerable<SelectEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("select.")).Select(e => new SelectEntity(e));
    ///<summary>Back Day night mode</summary>
    public SelectEntity BackDayNightMode => new(_haContext, "select.back_day_night_mode");
    ///<summary>Doorbell Auto quick reply message</summary>
    public SelectEntity DoorbellAutoQuickReplyMessage => new(_haContext, "select.doorbell_auto_quick_reply_message");
    ///<summary>Doorbell Day night mode</summary>
    public SelectEntity DoorbellDayNightMode => new(_haContext, "select.doorbell_day_night_mode");
    ///<summary>Doorbell Doorbell LED</summary>
    public SelectEntity DoorbellDoorbellLed => new(_haContext, "select.doorbell_doorbell_led");
    ///<summary>Doorbell Play quick reply message</summary>
    public SelectEntity DoorbellPlayQuickReplyMessage => new(_haContext, "select.doorbell_play_quick_reply_message");
    ///<summary>East Side Day night mode</summary>
    public SelectEntity EastSideDayNightMode => new(_haContext, "select.east_side_day_night_mode");
    ///<summary>Frank Water flow level</summary>
    public SelectEntity FrankWaterFlowLevel => new(_haContext, "select.frank_water_flow_level");
    ///<summary>Front Day night mode</summary>
    public SelectEntity FrontDayNightMode => new(_haContext, "select.front_day_night_mode");
    ///<summary>Front Floodlight mode</summary>
    public SelectEntity FrontFloodlightMode => new(_haContext, "select.front_floodlight_mode");
    ///<summary>Garage Day night mode</summary>
    public SelectEntity GarageDayNightMode => new(_haContext, "select.garage_day_night_mode");
    ///<summary>Home Connect 620 Connected Smart Lock Current lock mode</summary>
    public SelectEntity HomeConnect620ConnectedSmartLockCurrentLockMode => new(_haContext, "select.home_connect_620_connected_smart_lock_current_lock_mode");
    ///<summary>Lanai Day night mode</summary>
    public SelectEntity LanaiDayNightMode => new(_haContext, "select.lanai_day_night_mode");
    ///<summary>Main Day night mode</summary>
    public SelectEntity MainDayNightMode => new(_haContext, "select.main_day_night_mode");
    ///<summary>Shawn&apos;s Room State</summary>
    public SelectEntity NetdaemonShawnroomState => new(_haContext, "select.netdaemon_shawnroom_state");
    ///<summary>Reolink Chime Motion ringtone</summary>
    public SelectEntity ReolinkChimeMotionRingtone => new(_haContext, "select.reolink_chime_motion_ringtone");
    ///<summary>Reolink Chime Person ringtone</summary>
    public SelectEntity ReolinkChimePersonRingtone => new(_haContext, "select.reolink_chime_person_ringtone");
    ///<summary>Reolink Chime Visitor ringtone</summary>
    public SelectEntity ReolinkChimeVisitorRingtone => new(_haContext, "select.reolink_chime_visitor_ringtone");
    ///<summary>Shawn monitor LEDs Color palette</summary>
    public SelectEntity ShawnMonitorLedsColorPalette => new(_haContext, "select.shawn_monitor_leds_color_palette");
    ///<summary>Shawn monitor LEDs Live override</summary>
    public SelectEntity ShawnMonitorLedsLiveOverride => new(_haContext, "select.shawn_monitor_leds_live_override");
    ///<summary>Shawn monitor LEDs Playlist</summary>
    public SelectEntity ShawnMonitorLedsPlaylist => new(_haContext, "select.shawn_monitor_leds_playlist");
    ///<summary>Shawn monitor LEDs Preset</summary>
    public SelectEntity ShawnMonitorLedsPreset => new(_haContext, "select.shawn_monitor_leds_preset");
    ///<summary>West Side Day night mode</summary>
    public SelectEntity WestSideDayNightMode => new(_haContext, "select.west_side_day_night_mode");
}

public partial class SensorEntities
{
    private readonly IHaContext _haContext;
    public SensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all sensor entities currently registered (at runtime) in Home Assistant as SensorEntity</summary>
    public IEnumerable<SensorEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sensor.")).Select(e => new SensorEntity(e));
    /// <summary>Enumerates all non-numeric sensor entities currently registered (at runtime) in Home Assistant as SensorEntity</summary>
    public IEnumerable<SensorEntity> EnumerateAllNonNumeric() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sensor.") && !(e.EntityState?.AttributesJson?.TryGetProperty("unit_of_measurement", out _) ?? false)).Select(e => new SensorEntity(e));
    /// <summary>Enumerates all numeric sensor entities currently registered (at runtime) in Home Assistant as NumericSensorEntity</summary>
    public IEnumerable<NumericSensorEntity> EnumerateAllNumeric() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sensor.") && (e.EntityState?.AttributesJson?.TryGetProperty("unit_of_measurement", out _) ?? false)).Select(e => new NumericSensorEntity(e));
    ///<summary>800 Series Long Range USB Controller Status</summary>
    public SensorEntity _800SeriesLongRangeUsbControllerStatus => new(_haContext, "sensor.800_series_long_range_usb_controller_status");
    ///<summary>All Batteries Above 20</summary>
    public SensorEntity AllBatteriesAbove20 => new(_haContext, "sensor.all_batteries_above_20");
    ///<summary>Any Named Window Sensor On</summary>
    public SensorEntity AnyNamedWindowSensorOn => new(_haContext, "sensor.any_named_window_sensor_on");
    ///<summary>Cuddle Bear Activity</summary>
    public SensorEntity CuddleBearActivity => new(_haContext, "sensor.cuddle_bear_activity");
    ///<summary>Cuddle Bear App Version</summary>
    public SensorEntity CuddleBearAppVersion => new(_haContext, "sensor.cuddle_bear_app_version");
    ///<summary>Cuddle Bear Battery State</summary>
    public SensorEntity CuddleBearBatteryState => new(_haContext, "sensor.cuddle_bear_battery_state");
    ///<summary>Cuddle Bear BSSID</summary>
    public SensorEntity CuddleBearBssid => new(_haContext, "sensor.cuddle_bear_bssid");
    ///<summary>Cuddle Bear Connection Type</summary>
    public SensorEntity CuddleBearConnectionType => new(_haContext, "sensor.cuddle_bear_connection_type");
    ///<summary>Cuddle Bear Geocoded Location</summary>
    public SensorEntity CuddleBearGeocodedLocation => new(_haContext, "sensor.cuddle_bear_geocoded_location");
    ///<summary>Cuddle Bear Last Update Trigger</summary>
    public SensorEntity CuddleBearLastUpdateTrigger => new(_haContext, "sensor.cuddle_bear_last_update_trigger");
    ///<summary>Cuddle Bear Location permission</summary>
    public SensorEntity CuddleBearLocationPermission => new(_haContext, "sensor.cuddle_bear_location_permission");
    ///<summary>Cuddle Bear SIM 1</summary>
    public SensorEntity CuddleBearSim1 => new(_haContext, "sensor.cuddle_bear_sim_1");
    ///<summary>Cuddle Bear SIM 2</summary>
    public SensorEntity CuddleBearSim2 => new(_haContext, "sensor.cuddle_bear_sim_2");
    ///<summary>Cuddle Bear SSID</summary>
    public SensorEntity CuddleBearSsid => new(_haContext, "sensor.cuddle_bear_ssid");
    ///<summary>Cuddle Bear Watch Battery State</summary>
    public SensorEntity CuddleBearWatchBatteryState => new(_haContext, "sensor.cuddle_bear_watch_battery_state");
    ///<summary>DESKTOP-TCFUKDG DESKTOP-TCFUKDG_lastsystemstatechange</summary>
    public SensorEntity DesktopTcfukdgDesktopTcfukdgLastsystemstatechange => new(_haContext, "sensor.desktop_tcfukdg_desktop_tcfukdg_lastsystemstatechange");
    ///<summary>Downstairs Tv next Alarm</summary>
    public SensorEntity DownstairsTvNextAlarm => new(_haContext, "sensor.downstairs_tv_next_alarm");
    ///<summary>Downstairs Tv next Reminder</summary>
    public SensorEntity DownstairsTvNextReminder => new(_haContext, "sensor.downstairs_tv_next_reminder");
    ///<summary>Downstairs Tv next Timer</summary>
    public SensorEntity DownstairsTvNextTimer => new(_haContext, "sensor.downstairs_tv_next_timer");
    ///<summary>Floor Lamp Left Status</summary>
    public SensorEntity FloorLampLeftStatus => new(_haContext, "sensor.floor_lamp_left_status");
    ///<summary>Floor Lamp Right Status</summary>
    public SensorEntity FloorLampRightStatus => new(_haContext, "sensor.floor_lamp_right_status");
    ///<summary>Frank Total cleanings</summary>
    public SensorEntity FrankTotalCleanings => new(_haContext, "sensor.frank_total_cleanings");
    ///<summary>Front Office Dot next Alarm</summary>
    public SensorEntity FrontOfficeDotNextAlarm => new(_haContext, "sensor.front_office_dot_next_alarm");
    ///<summary>Front Office Dot next Reminder</summary>
    public SensorEntity FrontOfficeDotNextReminder => new(_haContext, "sensor.front_office_dot_next_reminder");
    ///<summary>Front Office Dot next Timer</summary>
    public SensorEntity FrontOfficeDotNextTimer => new(_haContext, "sensor.front_office_dot_next_timer");
    ///<summary>Garage Echo next Alarm</summary>
    public SensorEntity GarageEchoNextAlarm => new(_haContext, "sensor.garage_echo_next_alarm");
    ///<summary>Garage Echo next Reminder</summary>
    public SensorEntity GarageEchoNextReminder => new(_haContext, "sensor.garage_echo_next_reminder");
    ///<summary>Garage Echo next Timer</summary>
    public SensorEntity GarageEchoNextTimer => new(_haContext, "sensor.garage_echo_next_timer");
    ///<summary>Garage next Alarm</summary>
    public SensorEntity GarageNextAlarm => new(_haContext, "sensor.garage_next_alarm");
    ///<summary>Garage next Reminder</summary>
    public SensorEntity GarageNextReminder => new(_haContext, "sensor.garage_next_reminder");
    ///<summary>Garage next Timer</summary>
    public SensorEntity GarageNextTimer => new(_haContext, "sensor.garage_next_timer");
    ///<summary>Garage PTZ pan position</summary>
    public SensorEntity GaragePtzPanPosition => new(_haContext, "sensor.garage_ptz_pan_position");
    ///<summary>Govee to MQTT Version</summary>
    public SensorEntity GoveeToMqttVersion => new(_haContext, "sensor.govee_to_mqtt_version");
    ///<summary>House Occupied</summary>
    public SensorEntity HouseOccupied => new(_haContext, "sensor.house_occupied");
    ///<summary>HP DeskJet 3700 series</summary>
    public SensorEntity HpDeskjet3700Series => new(_haContext, "sensor.hp_deskjet_3700_series");
    ///<summary>Husbear Activity</summary>
    public SensorEntity HusbearActivity => new(_haContext, "sensor.husbear_activity");
    ///<summary>Husbear App Version</summary>
    public SensorEntity HusbearAppVersion => new(_haContext, "sensor.husbear_app_version");
    ///<summary>Husbear Audio Output</summary>
    public SensorEntity HusbearAudioOutput => new(_haContext, "sensor.husbear_audio_output");
    ///<summary>Husbear Battery State</summary>
    public SensorEntity HusbearBatteryState => new(_haContext, "sensor.husbear_battery_state");
    ///<summary>Husbear BSSID</summary>
    public SensorEntity HusbearBssid => new(_haContext, "sensor.husbear_bssid");
    ///<summary>Husbear Connection Type</summary>
    public SensorEntity HusbearConnectionType => new(_haContext, "sensor.husbear_connection_type");
    ///<summary>Husbear Geocoded Location</summary>
    public SensorEntity HusbearGeocodedLocation => new(_haContext, "sensor.husbear_geocoded_location");
    ///<summary>Husbear Last Update Trigger</summary>
    public SensorEntity HusbearLastUpdateTrigger => new(_haContext, "sensor.husbear_last_update_trigger");
    ///<summary>Husbear Location permission</summary>
    public SensorEntity HusbearLocationPermission => new(_haContext, "sensor.husbear_location_permission");
    ///<summary>Husbear SIM 1</summary>
    public SensorEntity HusbearSim1 => new(_haContext, "sensor.husbear_sim_1");
    ///<summary>Husbear SIM 2</summary>
    public SensorEntity HusbearSim2 => new(_haContext, "sensor.husbear_sim_2");
    ///<summary>Husbear SSID</summary>
    public SensorEntity HusbearSsid => new(_haContext, "sensor.husbear_ssid");
    ///<summary>iPad App Version</summary>
    public SensorEntity IpadAppVersion => new(_haContext, "sensor.ipad_app_version");
    ///<summary>iPad Audio Output</summary>
    public SensorEntity IpadAudioOutput => new(_haContext, "sensor.ipad_audio_output");
    ///<summary>iPad Battery State</summary>
    public SensorEntity IpadBatteryState => new(_haContext, "sensor.ipad_battery_state");
    ///<summary>iPad BSSID</summary>
    public SensorEntity IpadBssid => new(_haContext, "sensor.ipad_bssid");
    ///<summary>iPad Connection Type</summary>
    public SensorEntity IpadConnectionType => new(_haContext, "sensor.ipad_connection_type");
    ///<summary>iPad Geocoded Location</summary>
    public SensorEntity IpadGeocodedLocation => new(_haContext, "sensor.ipad_geocoded_location");
    ///<summary>iPad Last Update Trigger</summary>
    public SensorEntity IpadLastUpdateTrigger => new(_haContext, "sensor.ipad_last_update_trigger");
    ///<summary>iPad Location permission</summary>
    public SensorEntity IpadLocationPermission => new(_haContext, "sensor.ipad_location_permission");
    ///<summary>iPad SIM 1</summary>
    public SensorEntity IpadSim1 => new(_haContext, "sensor.ipad_sim_1");
    ///<summary>iPad SSID</summary>
    public SensorEntity IpadSsid => new(_haContext, "sensor.ipad_ssid");
    ///<summary>Justin&apos;s 2nd Echo Pop next Alarm</summary>
    public SensorEntity JustinS2ndEchoPopNextAlarm => new(_haContext, "sensor.justin_s_2nd_echo_pop_next_alarm");
    ///<summary>Justin&apos;s 2nd Echo Pop next Reminder</summary>
    public SensorEntity JustinS2ndEchoPopNextReminder => new(_haContext, "sensor.justin_s_2nd_echo_pop_next_reminder");
    ///<summary>Justin&apos;s 2nd Echo Pop next Timer</summary>
    public SensorEntity JustinS2ndEchoPopNextTimer => new(_haContext, "sensor.justin_s_2nd_echo_pop_next_timer");
    ///<summary>Justin&apos;s Fire TV next Alarm</summary>
    public SensorEntity JustinSFireTvNextAlarm => new(_haContext, "sensor.justin_s_fire_tv_next_alarm");
    ///<summary>Justin&apos;s Fire TV next Reminder</summary>
    public SensorEntity JustinSFireTvNextReminder => new(_haContext, "sensor.justin_s_fire_tv_next_reminder");
    ///<summary>Justin&apos;s Fire TV next Timer</summary>
    public SensorEntity JustinSFireTvNextTimer => new(_haContext, "sensor.justin_s_fire_tv_next_timer");
    ///<summary>Kitchen next Alarm</summary>
    public SensorEntity KitchenNextAlarm => new(_haContext, "sensor.kitchen_next_alarm");
    ///<summary>Kitchen next Reminder</summary>
    public SensorEntity KitchenNextReminder => new(_haContext, "sensor.kitchen_next_reminder");
    ///<summary>Kitchen next Timer</summary>
    public SensorEntity KitchenNextTimer => new(_haContext, "sensor.kitchen_next_timer");
    ///<summary>Main PTZ pan position</summary>
    public SensorEntity MainPtzPanPosition => new(_haContext, "sensor.main_ptz_pan_position");
    ///<summary>Main Purifier Air quality</summary>
    public SensorEntity MainPurifierAirQuality => new(_haContext, "sensor.main_purifier_air_quality");
    ///<summary>Master Bath next Alarm</summary>
    public SensorEntity MasterBathNextAlarm => new(_haContext, "sensor.master_bath_next_alarm");
    ///<summary>Master Bath next Reminder</summary>
    public SensorEntity MasterBathNextReminder => new(_haContext, "sensor.master_bath_next_reminder");
    ///<summary>Master Bath next Timer</summary>
    public SensorEntity MasterBathNextTimer => new(_haContext, "sensor.master_bath_next_timer");
    ///<summary>T6 Pro Z-Wave Programmable Thermostat Last seen</summary>
    public SensorEntity Node2LastSeen => new(_haContext, "sensor.node_2_last_seen");
    ///<summary>T6 Pro Z-Wave Programmable Thermostat Node status</summary>
    public SensorEntity Node2NodeStatus => new(_haContext, "sensor.node_2_node_status");
    ///<summary>Home Connect 620 Connected Smart Lock Last seen</summary>
    public SensorEntity Node3LastSeen => new(_haContext, "sensor.node_3_last_seen");
    ///<summary>Home Connect 620 Connected Smart Lock Node status</summary>
    public SensorEntity Node3NodeStatus => new(_haContext, "sensor.node_3_node_status");
    ///<summary>Office next Alarm</summary>
    public SensorEntity OfficeNextAlarm => new(_haContext, "sensor.office_next_alarm");
    ///<summary>Office next Reminder</summary>
    public SensorEntity OfficeNextReminder => new(_haContext, "sensor.office_next_reminder");
    ///<summary>Office next Timer</summary>
    public SensorEntity OfficeNextTimer => new(_haContext, "sensor.office_next_timer");
    ///<summary>Outside Secured</summary>
    public SensorEntity OutsideSecured => new(_haContext, "sensor.outside_secured");
    ///<summary>Permanent Lights Status</summary>
    public SensorEntity PermanentLightsStatus => new(_haContext, "sensor.permanent_lights_status");
    ///<summary>ratgdov2.5i 0a070c Firmware Version</summary>
    public SensorEntity Ratgdov25i0a070cFirmwareVersion => new(_haContext, "sensor.ratgdov25i_0a070c_firmware_version");
    ///<summary>ratgdov2.5i 0a070c Paired Devices</summary>
    public SensorEntity Ratgdov25i0a070cPairedDevices => new(_haContext, "sensor.ratgdov25i_0a070c_paired_devices");
    ///<summary>Shawn monitor LEDs IP</summary>
    public SensorEntity ShawnMonitorLedsIp => new(_haContext, "sensor.shawn_monitor_leds_ip");
    ///<summary>Shawn monitor LEDs LED count</summary>
    public SensorEntity ShawnMonitorLedsLedCount => new(_haContext, "sensor.shawn_monitor_leds_led_count");
    ///<summary>Shawn&apos;s Fire TV next Alarm</summary>
    public SensorEntity ShawnSFireTvNextAlarm => new(_haContext, "sensor.shawn_s_fire_tv_next_alarm");
    ///<summary>Shawn&apos;s Fire TV next Reminder</summary>
    public SensorEntity ShawnSFireTvNextReminder => new(_haContext, "sensor.shawn_s_fire_tv_next_reminder");
    ///<summary>Shawn&apos;s Fire TV next Timer</summary>
    public SensorEntity ShawnSFireTvNextTimer => new(_haContext, "sensor.shawn_s_fire_tv_next_timer");
    ///<summary>Shawn&apos;s Fire TV Stick next Alarm</summary>
    public SensorEntity ShawnSFireTvStickNextAlarm => new(_haContext, "sensor.shawn_s_fire_tv_stick_next_alarm");
    ///<summary>Shawn&apos;s Fire TV Stick next Reminder</summary>
    public SensorEntity ShawnSFireTvStickNextReminder => new(_haContext, "sensor.shawn_s_fire_tv_stick_next_reminder");
    ///<summary>Shawn&apos;s Fire TV Stick next Timer</summary>
    public SensorEntity ShawnSFireTvStickNextTimer => new(_haContext, "sensor.shawn_s_fire_tv_stick_next_timer");
    ///<summary>Shawn’s iPad App Version</summary>
    public SensorEntity ShawnsIpadAppVersion => new(_haContext, "sensor.shawns_ipad_app_version");
    ///<summary>Shawn’s iPad Audio Output</summary>
    public SensorEntity ShawnsIpadAudioOutput => new(_haContext, "sensor.shawns_ipad_audio_output");
    ///<summary>Shawn’s iPad Battery State</summary>
    public SensorEntity ShawnsIpadBatteryState => new(_haContext, "sensor.shawns_ipad_battery_state");
    ///<summary>Shawn’s iPad BSSID</summary>
    public SensorEntity ShawnsIpadBssid => new(_haContext, "sensor.shawns_ipad_bssid");
    ///<summary>Shawn’s iPad Connection Type</summary>
    public SensorEntity ShawnsIpadConnectionType => new(_haContext, "sensor.shawns_ipad_connection_type");
    ///<summary>Shawn’s iPad Geocoded Location</summary>
    public SensorEntity ShawnsIpadGeocodedLocation => new(_haContext, "sensor.shawns_ipad_geocoded_location");
    ///<summary>Shawn’s iPad Last Update Trigger</summary>
    public SensorEntity ShawnsIpadLastUpdateTrigger => new(_haContext, "sensor.shawns_ipad_last_update_trigger");
    ///<summary>Shawn’s iPad Location permission</summary>
    public SensorEntity ShawnsIpadLocationPermission => new(_haContext, "sensor.shawns_ipad_location_permission");
    ///<summary>Shawn’s iPad SSID</summary>
    public SensorEntity ShawnsIpadSsid => new(_haContext, "sensor.shawns_ipad_ssid");
    ///<summary>Shawn’s iPhone Activity</summary>
    public SensorEntity ShawnsIphoneActivity => new(_haContext, "sensor.shawns_iphone_activity");
    ///<summary>Shawn’s iPhone App Version</summary>
    public SensorEntity ShawnsIphoneAppVersion => new(_haContext, "sensor.shawns_iphone_app_version");
    ///<summary>Shawn’s iPhone Audio Output</summary>
    public SensorEntity ShawnsIphoneAudioOutput => new(_haContext, "sensor.shawns_iphone_audio_output");
    ///<summary>Shawn’s iPhone Battery State</summary>
    public SensorEntity ShawnsIphoneBatteryState => new(_haContext, "sensor.shawns_iphone_battery_state");
    ///<summary>Shawn’s iPhone BSSID</summary>
    public SensorEntity ShawnsIphoneBssid => new(_haContext, "sensor.shawns_iphone_bssid");
    ///<summary>Shawn’s iPhone Connection Type</summary>
    public SensorEntity ShawnsIphoneConnectionType => new(_haContext, "sensor.shawns_iphone_connection_type");
    ///<summary>Shawn’s iPhone Geocoded Location</summary>
    public SensorEntity ShawnsIphoneGeocodedLocation => new(_haContext, "sensor.shawns_iphone_geocoded_location");
    ///<summary>Shawn’s iPhone Last Update Trigger</summary>
    public SensorEntity ShawnsIphoneLastUpdateTrigger => new(_haContext, "sensor.shawns_iphone_last_update_trigger");
    ///<summary>Shawn’s iPhone Location permission</summary>
    public SensorEntity ShawnsIphoneLocationPermission => new(_haContext, "sensor.shawns_iphone_location_permission");
    ///<summary>Shawn’s iPhone SIM 1</summary>
    public SensorEntity ShawnsIphoneSim1 => new(_haContext, "sensor.shawns_iphone_sim_1");
    ///<summary>Shawn’s iPhone SIM 2</summary>
    public SensorEntity ShawnsIphoneSim2 => new(_haContext, "sensor.shawns_iphone_sim_2");
    ///<summary>Shawn’s iPhone SSID</summary>
    public SensorEntity ShawnsIphoneSsid => new(_haContext, "sensor.shawns_iphone_ssid");
    ///<summary>Shawn’s iPhone Watch Battery State</summary>
    public SensorEntity ShawnsIphoneWatchBatteryState => new(_haContext, "sensor.shawns_iphone_watch_battery_state");
    ///<summary>Shawn’s MacBook Pro Active Audio Input</summary>
    public SensorEntity ShawnsMacbookProActiveAudioInput => new(_haContext, "sensor.shawns_macbook_pro_active_audio_input");
    ///<summary>Shawn’s MacBook Pro Active Audio Output</summary>
    public SensorEntity ShawnsMacbookProActiveAudioOutput => new(_haContext, "sensor.shawns_macbook_pro_active_audio_output");
    ///<summary>Shawn’s MacBook Pro Active Camera</summary>
    public SensorEntity ShawnsMacbookProActiveCamera => new(_haContext, "sensor.shawns_macbook_pro_active_camera");
    ///<summary>Shawn’s MacBook Pro App Version</summary>
    public SensorEntity ShawnsMacbookProAppVersion => new(_haContext, "sensor.shawns_macbook_pro_app_version");
    ///<summary>Shawn’s MacBook Pro Audio Output</summary>
    public SensorEntity ShawnsMacbookProAudioOutput => new(_haContext, "sensor.shawns_macbook_pro_audio_output");
    ///<summary>Shawn’s MacBook Pro BSSID</summary>
    public SensorEntity ShawnsMacbookProBssid => new(_haContext, "sensor.shawns_macbook_pro_bssid");
    ///<summary>Shawn’s MacBook Pro Connection Type</summary>
    public SensorEntity ShawnsMacbookProConnectionType => new(_haContext, "sensor.shawns_macbook_pro_connection_type");
    ///<summary>Shawn’s MacBook Pro Displays</summary>
    public SensorEntity ShawnsMacbookProDisplays => new(_haContext, "sensor.shawns_macbook_pro_displays");
    ///<summary>Shawn’s MacBook Pro Frontmost App</summary>
    public SensorEntity ShawnsMacbookProFrontmostApp => new(_haContext, "sensor.shawns_macbook_pro_frontmost_app");
    ///<summary>Shawn’s MacBook Pro Geocoded Location</summary>
    public SensorEntity ShawnsMacbookProGeocodedLocation => new(_haContext, "sensor.shawns_macbook_pro_geocoded_location");
    ///<summary>Shawn’s MacBook Pro Internal Battery State</summary>
    public SensorEntity ShawnsMacbookProInternalBatteryState => new(_haContext, "sensor.shawns_macbook_pro_internal_battery_state");
    ///<summary>Shawn’s MacBook Pro Last Update Trigger</summary>
    public SensorEntity ShawnsMacbookProLastUpdateTrigger => new(_haContext, "sensor.shawns_macbook_pro_last_update_trigger");
    ///<summary>Shawn’s MacBook Pro Location permission</summary>
    public SensorEntity ShawnsMacbookProLocationPermission => new(_haContext, "sensor.shawns_macbook_pro_location_permission");
    ///<summary>Shawn’s MacBook Pro Primary Display ID</summary>
    public SensorEntity ShawnsMacbookProPrimaryDisplayId => new(_haContext, "sensor.shawns_macbook_pro_primary_display_id");
    ///<summary>Shawn’s MacBook Pro Primary Display Name</summary>
    public SensorEntity ShawnsMacbookProPrimaryDisplayName => new(_haContext, "sensor.shawns_macbook_pro_primary_display_name");
    ///<summary>Shawn’s MacBook Pro SSID</summary>
    public SensorEntity ShawnsMacbookProSsid => new(_haContext, "sensor.shawns_macbook_pro_ssid");
    ///<summary>Sun Next dawn</summary>
    public SensorEntity SunNextDawn => new(_haContext, "sensor.sun_next_dawn");
    ///<summary>Sun Next dusk</summary>
    public SensorEntity SunNextDusk => new(_haContext, "sensor.sun_next_dusk");
    ///<summary>Sun Next midnight</summary>
    public SensorEntity SunNextMidnight => new(_haContext, "sensor.sun_next_midnight");
    ///<summary>Sun Next noon</summary>
    public SensorEntity SunNextNoon => new(_haContext, "sensor.sun_next_noon");
    ///<summary>Sun Next rising</summary>
    public SensorEntity SunNextRising => new(_haContext, "sensor.sun_next_rising");
    ///<summary>Sun Next setting</summary>
    public SensorEntity SunNextSetting => new(_haContext, "sensor.sun_next_setting");
    ///<summary>This Device next Alarm</summary>
    public SensorEntity ThisDeviceNextAlarm => new(_haContext, "sensor.this_device_next_alarm");
    ///<summary>This Device next Reminder</summary>
    public SensorEntity ThisDeviceNextReminder => new(_haContext, "sensor.this_device_next_reminder");
    ///<summary>This Device next Timer</summary>
    public SensorEntity ThisDeviceNextTimer => new(_haContext, "sensor.this_device_next_timer");
    ///<summary>Water Leak Detected</summary>
    public SensorEntity WaterLeakDetected => new(_haContext, "sensor.water_leak_detected");
    ///<summary>Cuddle Bear Average Active Pace</summary>
    public NumericSensorEntity CuddleBearAverageActivePace => new(_haContext, "sensor.cuddle_bear_average_active_pace");
    ///<summary>Cuddle Bear Battery Level</summary>
    public NumericSensorEntity CuddleBearBatteryLevel => new(_haContext, "sensor.cuddle_bear_battery_level");
    ///<summary>Cuddle Bear Distance</summary>
    public NumericSensorEntity CuddleBearDistance => new(_haContext, "sensor.cuddle_bear_distance");
    ///<summary>Cuddle Bear Floors Ascended</summary>
    public NumericSensorEntity CuddleBearFloorsAscended => new(_haContext, "sensor.cuddle_bear_floors_ascended");
    ///<summary>Cuddle Bear Floors Descended</summary>
    public NumericSensorEntity CuddleBearFloorsDescended => new(_haContext, "sensor.cuddle_bear_floors_descended");
    ///<summary>Cuddle Bear Steps</summary>
    public NumericSensorEntity CuddleBearSteps => new(_haContext, "sensor.cuddle_bear_steps");
    ///<summary>Cuddle Bear Storage</summary>
    public NumericSensorEntity CuddleBearStorage => new(_haContext, "sensor.cuddle_bear_storage");
    ///<summary>Cuddle Bear Watch Battery</summary>
    public NumericSensorEntity CuddleBearWatchBattery => new(_haContext, "sensor.cuddle_bear_watch_battery");
    ///<summary>Frank Area cleaned</summary>
    public NumericSensorEntity FrankAreaCleaned => new(_haContext, "sensor.frank_area_cleaned");
    ///<summary>Frank Battery</summary>
    public NumericSensorEntity FrankBattery => new(_haContext, "sensor.frank_battery");
    ///<summary>Frank Cleaning duration</summary>
    public NumericSensorEntity FrankCleaningDuration => new(_haContext, "sensor.frank_cleaning_duration");
    ///<summary>Frank Filter lifespan</summary>
    public NumericSensorEntity FrankFilterLifespan => new(_haContext, "sensor.frank_filter_lifespan");
    ///<summary>Frank Main brush lifespan</summary>
    public NumericSensorEntity FrankMainBrushLifespan => new(_haContext, "sensor.frank_main_brush_lifespan");
    ///<summary>Frank Side brush lifespan</summary>
    public NumericSensorEntity FrankSideBrushesLifespan => new(_haContext, "sensor.frank_side_brushes_lifespan");
    ///<summary>Frank Total area cleaned</summary>
    public NumericSensorEntity FrankTotalAreaCleaned => new(_haContext, "sensor.frank_total_area_cleaned");
    ///<summary>Frank Total cleaning duration</summary>
    public NumericSensorEntity FrankTotalCleaningDuration => new(_haContext, "sensor.frank_total_cleaning_duration");
    ///<summary>Frank Unit care lifespan</summary>
    public NumericSensorEntity FrankUnitCareLifespan => new(_haContext, "sensor.frank_unit_care_lifespan");
    ///<summary>Home Connect 620 Connected Smart Lock Battery level</summary>
    public NumericSensorEntity HomeConnect620ConnectedSmartLockBatteryLevel => new(_haContext, "sensor.home_connect_620_connected_smart_lock_battery_level");
    ///<summary>HP DeskJet 3700 series black ink</summary>
    public NumericSensorEntity HpDeskjet3700SeriesBlackInk => new(_haContext, "sensor.hp_deskjet_3700_series_black_ink");
    ///<summary>HP DeskJet 3700 series tri-color ink</summary>
    public NumericSensorEntity HpDeskjet3700SeriesTriColorInk => new(_haContext, "sensor.hp_deskjet_3700_series_tri_color_ink");
    ///<summary>Husbear Average Active Pace</summary>
    public NumericSensorEntity HusbearAverageActivePace => new(_haContext, "sensor.husbear_average_active_pace");
    ///<summary>Husbear Battery Level</summary>
    public NumericSensorEntity HusbearBatteryLevel => new(_haContext, "sensor.husbear_battery_level");
    ///<summary>Husbear Distance</summary>
    public NumericSensorEntity HusbearDistance => new(_haContext, "sensor.husbear_distance");
    ///<summary>Husbear Floors Ascended</summary>
    public NumericSensorEntity HusbearFloorsAscended => new(_haContext, "sensor.husbear_floors_ascended");
    ///<summary>Husbear Floors Descended</summary>
    public NumericSensorEntity HusbearFloorsDescended => new(_haContext, "sensor.husbear_floors_descended");
    ///<summary>Husbear Steps</summary>
    public NumericSensorEntity HusbearSteps => new(_haContext, "sensor.husbear_steps");
    ///<summary>Husbear Storage</summary>
    public NumericSensorEntity HusbearStorage => new(_haContext, "sensor.husbear_storage");
    ///<summary>iPad Battery Level</summary>
    public NumericSensorEntity IpadBatteryLevel => new(_haContext, "sensor.ipad_battery_level");
    ///<summary>iPad Storage</summary>
    public NumericSensorEntity IpadStorage => new(_haContext, "sensor.ipad_storage");
    ///<summary>Justin Purifier Filter lifetime</summary>
    public NumericSensorEntity JustinPurifierFilterLifetime => new(_haContext, "sensor.justin_purifier_filter_lifetime");
    ///<summary>LUMI lumi.sensor_wleak.aq1 Battery</summary>
    public NumericSensorEntity LumiLumiSensorWleakAq1Battery => new(_haContext, "sensor.lumi_lumi_sensor_wleak_aq1_battery");
    ///<summary>LUMI lumi.sensor_wleak.aq1 Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorWleakAq1DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_wleak_aq1_device_temperature");
    ///<summary>LUMI lumi.sensor_wleak.aq2 Battery</summary>
    public NumericSensorEntity LumiLumiSensorWleakAq2Battery2 => new(_haContext, "sensor.lumi_lumi_sensor_wleak_aq2_battery_2");
    ///<summary>LUMI lumi.sensor_wleak.aq2 Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorWleakAq2DeviceTemperature2 => new(_haContext, "sensor.lumi_lumi_sensor_wleak_aq2_device_temperature_2");
    ///<summary>LUMI lumi.sensor_wleak.aq3 Battery</summary>
    public NumericSensorEntity LumiLumiSensorWleakAq3Battery2 => new(_haContext, "sensor.lumi_lumi_sensor_wleak_aq3_battery_2");
    ///<summary>LUMI lumi.sensor_wleak.aq3 Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorWleakAq3DeviceTemperature2 => new(_haContext, "sensor.lumi_lumi_sensor_wleak_aq3_device_temperature_2");
    ///<summary>Main Purifier Filter lifetime</summary>
    public NumericSensorEntity MainPurifierFilterLifetime => new(_haContext, "sensor.main_purifier_filter_lifetime");
    ///<summary>Main Purifier PM2.5</summary>
    public NumericSensorEntity MainPurifierPm25 => new(_haContext, "sensor.main_purifier_pm2_5");
    ///<summary>ratgdov2.5i 0a070c Openings</summary>
    public NumericSensorEntity Ratgdov25i0a070cOpenings => new(_haContext, "sensor.ratgdov25i_0a070c_openings");
    ///<summary>Estimated current</summary>
    public NumericSensorEntity ShawnMonitorLedsEstimatedCurrent => new(_haContext, "sensor.shawn_monitor_leds_estimated_current");
    ///<summary>Max current</summary>
    public NumericSensorEntity ShawnMonitorLedsMaxCurrent => new(_haContext, "sensor.shawn_monitor_leds_max_current");
    ///<summary>Shawn office Hue motion sensor Battery</summary>
    public NumericSensorEntity ShawnOfficeHueMotionSensorBattery => new(_haContext, "sensor.shawn_office_hue_motion_sensor_battery");
    ///<summary>Shawn office Hue motion sensor Illuminance</summary>
    public NumericSensorEntity ShawnOfficeHueMotionSensorIlluminance => new(_haContext, "sensor.shawn_office_hue_motion_sensor_illuminance");
    ///<summary>Shawn office Hue motion sensor Temperature</summary>
    public NumericSensorEntity ShawnOfficeHueMotionSensorTemperature => new(_haContext, "sensor.shawn_office_hue_motion_sensor_temperature");
    ///<summary>Shawn Purifier Filter lifetime</summary>
    public NumericSensorEntity ShawnPurifierFilterLifetime => new(_haContext, "sensor.shawn_purifier_filter_lifetime");
    ///<summary>Shawn’s iPad Battery Level</summary>
    public NumericSensorEntity ShawnsIpadBatteryLevel => new(_haContext, "sensor.shawns_ipad_battery_level");
    ///<summary>Shawn’s iPad Storage</summary>
    public NumericSensorEntity ShawnsIpadStorage => new(_haContext, "sensor.shawns_ipad_storage");
    ///<summary>Shawn’s iPhone Average Active Pace</summary>
    public NumericSensorEntity ShawnsIphoneAverageActivePace => new(_haContext, "sensor.shawns_iphone_average_active_pace");
    ///<summary>Shawn’s iPhone Battery Level</summary>
    public NumericSensorEntity ShawnsIphoneBatteryLevel => new(_haContext, "sensor.shawns_iphone_battery_level");
    ///<summary>Shawn’s iPhone Distance</summary>
    public NumericSensorEntity ShawnsIphoneDistance => new(_haContext, "sensor.shawns_iphone_distance");
    ///<summary>Shawn’s iPhone Floors Ascended</summary>
    public NumericSensorEntity ShawnsIphoneFloorsAscended => new(_haContext, "sensor.shawns_iphone_floors_ascended");
    ///<summary>Shawn’s iPhone Floors Descended</summary>
    public NumericSensorEntity ShawnsIphoneFloorsDescended => new(_haContext, "sensor.shawns_iphone_floors_descended");
    ///<summary>Shawn’s iPhone Steps</summary>
    public NumericSensorEntity ShawnsIphoneSteps => new(_haContext, "sensor.shawns_iphone_steps");
    ///<summary>Shawn’s iPhone Storage</summary>
    public NumericSensorEntity ShawnsIphoneStorage => new(_haContext, "sensor.shawns_iphone_storage");
    ///<summary>Shawn’s iPhone Watch Battery</summary>
    public NumericSensorEntity ShawnsIphoneWatchBattery => new(_haContext, "sensor.shawns_iphone_watch_battery");
    ///<summary>Shawn’s MacBook Pro Internal Battery Level</summary>
    public NumericSensorEntity ShawnsMacbookProInternalBatteryLevel => new(_haContext, "sensor.shawns_macbook_pro_internal_battery_level");
    ///<summary>Shawn’s MacBook Pro Storage</summary>
    public NumericSensorEntity ShawnsMacbookProStorage => new(_haContext, "sensor.shawns_macbook_pro_storage");
    ///<summary>T6 Pro Z-Wave Programmable Thermostat Air temperature</summary>
    public NumericSensorEntity T6ProZWaveProgrammableThermostatAirTemperature => new(_haContext, "sensor.t6_pro_z_wave_programmable_thermostat_air_temperature");
    ///<summary>T6 Pro Z-Wave Programmable Thermostat Battery level</summary>
    public NumericSensorEntity T6ProZWaveProgrammableThermostatBatteryLevel => new(_haContext, "sensor.t6_pro_z_wave_programmable_thermostat_battery_level");
    ///<summary>T6 Pro Z-Wave Programmable Thermostat Humidity</summary>
    public NumericSensorEntity T6ProZWaveProgrammableThermostatHumidity => new(_haContext, "sensor.t6_pro_z_wave_programmable_thermostat_humidity");
}

public partial class SirenEntities
{
    private readonly IHaContext _haContext;
    public SirenEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all siren entities currently registered (at runtime) in Home Assistant as SirenEntity</summary>
    public IEnumerable<SirenEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("siren.")).Select(e => new SirenEntity(e));
    ///<summary>Doorbell Siren</summary>
    public SirenEntity DoorbellSiren => new(_haContext, "siren.doorbell_siren");
    ///<summary>Front Siren</summary>
    public SirenEntity FrontSiren => new(_haContext, "siren.front_siren");
    ///<summary>Garage Siren</summary>
    public SirenEntity GarageSiren => new(_haContext, "siren.garage_siren");
    ///<summary>Main Siren</summary>
    public SirenEntity MainSiren => new(_haContext, "siren.main_siren");
}

public partial class SttEntities
{
    private readonly IHaContext _haContext;
    public SttEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all stt entities currently registered (at runtime) in Home Assistant as SttEntity</summary>
    public IEnumerable<SttEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("stt.")).Select(e => new SttEntity(e));
    ///<summary>Home Assistant Cloud</summary>
    public SttEntity HomeAssistantCloud => new(_haContext, "stt.home_assistant_cloud");
}

public partial class SunEntities
{
    private readonly IHaContext _haContext;
    public SunEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all sun entities currently registered (at runtime) in Home Assistant as SunEntity</summary>
    public IEnumerable<SunEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sun.")).Select(e => new SunEntity(e));
    ///<summary>Sun</summary>
    public SunEntity Sun => new(_haContext, "sun.sun");
}

public partial class SwitchEntities
{
    private readonly IHaContext _haContext;
    public SwitchEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all switch entities currently registered (at runtime) in Home Assistant as SwitchEntity</summary>
    public IEnumerable<SwitchEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("switch.")).Select(e => new SwitchEntity(e));
    ///<summary>All cameras push notifications</summary>
    public SwitchEntity AllCamerasPushNotifications => new(_haContext, "switch.all_cameras_push_notifications");
    ///<summary>Automation: Shawn office Hue motion sensor</summary>
    public SwitchEntity AutomationShawnOfficeHueMotionSensor => new(_haContext, "switch.automation_shawn_office_hue_motion_sensor");
    ///<summary>Automation: state_after_streaming</summary>
    public SwitchEntity AutomationStateAfterStreaming => new(_haContext, "switch.automation_state_after_streaming");
    ///<summary>Back Email on event</summary>
    public SwitchEntity BackEmailOnEvent => new(_haContext, "switch.back_email_on_event");
    ///<summary>Back FTP upload</summary>
    public SwitchEntity BackFtpUpload => new(_haContext, "switch.back_ftp_upload");
    ///<summary>Back Hub ringtone on event</summary>
    public SwitchEntity BackHubRingtoneOnEvent => new(_haContext, "switch.back_hub_ringtone_on_event");
    ///<summary>Back Infra red lights in night mode</summary>
    public SwitchEntity BackInfraRedLightsInNightMode => new(_haContext, "switch.back_infra_red_lights_in_night_mode");
    ///<summary>Back Manual record</summary>
    public SwitchEntity BackManualRecord => new(_haContext, "switch.back_manual_record");
    ///<summary>Back Push notifications</summary>
    public SwitchEntity BackPushNotifications => new(_haContext, "switch.back_push_notifications");
    ///<summary>Back Record</summary>
    public SwitchEntity BackRecord => new(_haContext, "switch.back_record");
    ///<summary>Back Record audio</summary>
    public SwitchEntity BackRecordAudio => new(_haContext, "switch.back_record_audio");
    ///<summary>Doorbell Doorbell button sound</summary>
    public SwitchEntity DoorbellDoorbellButtonSound => new(_haContext, "switch.doorbell_doorbell_button_sound");
    ///<summary>Doorbell Email on event</summary>
    public SwitchEntity DoorbellEmailOnEvent => new(_haContext, "switch.doorbell_email_on_event");
    ///<summary>Doorbell FTP upload</summary>
    public SwitchEntity DoorbellFtpUpload => new(_haContext, "switch.doorbell_ftp_upload");
    ///<summary>Doorbell Hub ringtone on event</summary>
    public SwitchEntity DoorbellHubRingtoneOnEvent => new(_haContext, "switch.doorbell_hub_ringtone_on_event");
    ///<summary>Doorbell Infra red lights in night mode</summary>
    public SwitchEntity DoorbellInfraRedLightsInNightMode => new(_haContext, "switch.doorbell_infra_red_lights_in_night_mode");
    ///<summary>Doorbell Manual record</summary>
    public SwitchEntity DoorbellManualRecord => new(_haContext, "switch.doorbell_manual_record");
    ///<summary>Doorbell Push notifications</summary>
    public SwitchEntity DoorbellPushNotifications => new(_haContext, "switch.doorbell_push_notifications");
    ///<summary>Doorbell Record</summary>
    public SwitchEntity DoorbellRecord => new(_haContext, "switch.doorbell_record");
    ///<summary>Doorbell Record audio</summary>
    public SwitchEntity DoorbellRecordAudio => new(_haContext, "switch.doorbell_record_audio");
    ///<summary>Doorbell Siren on event</summary>
    public SwitchEntity DoorbellSirenOnEvent => new(_haContext, "switch.doorbell_siren_on_event");
    ///<summary>Downstairs Tv do not disturb switch</summary>
    public SwitchEntity DownstairsTvDoNotDisturbSwitch => new(_haContext, "switch.downstairs_tv_do_not_disturb_switch");
    ///<summary>Downstairs Tv repeat switch</summary>
    public SwitchEntity DownstairsTvRepeatSwitch => new(_haContext, "switch.downstairs_tv_repeat_switch");
    ///<summary>Downstairs Tv shuffle switch</summary>
    public SwitchEntity DownstairsTvShuffleSwitch => new(_haContext, "switch.downstairs_tv_shuffle_switch");
    ///<summary>East Side Email on event</summary>
    public SwitchEntity EastSideEmailOnEvent => new(_haContext, "switch.east_side_email_on_event");
    ///<summary>East Side FTP upload</summary>
    public SwitchEntity EastSideFtpUpload => new(_haContext, "switch.east_side_ftp_upload");
    ///<summary>East Side Hub ringtone on event</summary>
    public SwitchEntity EastSideHubRingtoneOnEvent => new(_haContext, "switch.east_side_hub_ringtone_on_event");
    ///<summary>East Side Infra red lights in night mode</summary>
    public SwitchEntity EastSideInfraRedLightsInNightMode => new(_haContext, "switch.east_side_infra_red_lights_in_night_mode");
    ///<summary>East Side Manual record</summary>
    public SwitchEntity EastSideManualRecord => new(_haContext, "switch.east_side_manual_record");
    ///<summary>East Side Push notifications</summary>
    public SwitchEntity EastSidePushNotifications => new(_haContext, "switch.east_side_push_notifications");
    ///<summary>East Side Record</summary>
    public SwitchEntity EastSideRecord => new(_haContext, "switch.east_side_record");
    ///<summary>East Side Record audio</summary>
    public SwitchEntity EastSideRecordAudio => new(_haContext, "switch.east_side_record_audio");
    ///<summary>Everywhere do not disturb switch</summary>
    public SwitchEntity EverywhereDoNotDisturbSwitch => new(_haContext, "switch.everywhere_do_not_disturb_switch");
    ///<summary>Everywhere repeat switch</summary>
    public SwitchEntity EverywhereRepeatSwitch => new(_haContext, "switch.everywhere_repeat_switch");
    ///<summary>Everywhere shuffle switch</summary>
    public SwitchEntity EverywhereShuffleSwitch => new(_haContext, "switch.everywhere_shuffle_switch");
    ///<summary>Floor Lamp Left Dream View Toggle</summary>
    public SwitchEntity FloorLampLeftDreamViewToggle => new(_haContext, "switch.floor_lamp_left_dream_view_toggle");
    ///<summary>Floor Lamp Left Gradient Toggle</summary>
    public SwitchEntity FloorLampLeftGradientToggle => new(_haContext, "switch.floor_lamp_left_gradient_toggle");
    ///<summary>Floor Lamp Left Power Switch</summary>
    public SwitchEntity FloorLampLeftPowerSwitch => new(_haContext, "switch.floor_lamp_left_power_switch");
    ///<summary>Floor Lamp Right Dream View Toggle</summary>
    public SwitchEntity FloorLampRightDreamViewToggle => new(_haContext, "switch.floor_lamp_right_dream_view_toggle");
    ///<summary>Floor Lamp Right Gradient Toggle</summary>
    public SwitchEntity FloorLampRightGradientToggle => new(_haContext, "switch.floor_lamp_right_gradient_toggle");
    ///<summary>Floor Lamp Right Power Switch</summary>
    public SwitchEntity FloorLampRightPowerSwitch => new(_haContext, "switch.floor_lamp_right_power_switch");
    ///<summary>Front Email on event</summary>
    public SwitchEntity FrontEmailOnEvent => new(_haContext, "switch.front_email_on_event");
    ///<summary>Front FTP upload</summary>
    public SwitchEntity FrontFtpUpload => new(_haContext, "switch.front_ftp_upload");
    ///<summary>Front Hub ringtone on event</summary>
    public SwitchEntity FrontHubRingtoneOnEvent => new(_haContext, "switch.front_hub_ringtone_on_event");
    ///<summary>Front Infra red lights in night mode</summary>
    public SwitchEntity FrontInfraRedLightsInNightMode => new(_haContext, "switch.front_infra_red_lights_in_night_mode");
    ///<summary>Front Manual record</summary>
    public SwitchEntity FrontManualRecord => new(_haContext, "switch.front_manual_record");
    ///<summary>Front Office Dot do not disturb switch</summary>
    public SwitchEntity FrontOfficeDotDoNotDisturbSwitch => new(_haContext, "switch.front_office_dot_do_not_disturb_switch");
    ///<summary>Front Office Dot repeat switch</summary>
    public SwitchEntity FrontOfficeDotRepeatSwitch => new(_haContext, "switch.front_office_dot_repeat_switch");
    ///<summary>Front Office Dot shuffle switch</summary>
    public SwitchEntity FrontOfficeDotShuffleSwitch => new(_haContext, "switch.front_office_dot_shuffle_switch");
    ///<summary>Front Push notifications</summary>
    public SwitchEntity FrontPushNotifications => new(_haContext, "switch.front_push_notifications");
    ///<summary>Front Record</summary>
    public SwitchEntity FrontRecord => new(_haContext, "switch.front_record");
    ///<summary>Front Record audio</summary>
    public SwitchEntity FrontRecordAudio => new(_haContext, "switch.front_record_audio");
    ///<summary>Front Siren on event</summary>
    public SwitchEntity FrontSirenOnEvent => new(_haContext, "switch.front_siren_on_event");
    ///<summary>Garage Auto tracking</summary>
    public SwitchEntity GarageAutoTracking => new(_haContext, "switch.garage_auto_tracking");
    ///<summary>Garage do not disturb switch</summary>
    public SwitchEntity GarageDoNotDisturbSwitch => new(_haContext, "switch.garage_do_not_disturb_switch");
    ///<summary>Garage Echo do not disturb switch</summary>
    public SwitchEntity GarageEchoDoNotDisturbSwitch => new(_haContext, "switch.garage_echo_do_not_disturb_switch");
    ///<summary>Garage Echo repeat switch</summary>
    public SwitchEntity GarageEchoRepeatSwitch => new(_haContext, "switch.garage_echo_repeat_switch");
    ///<summary>Garage Echo shuffle switch</summary>
    public SwitchEntity GarageEchoShuffleSwitch => new(_haContext, "switch.garage_echo_shuffle_switch");
    ///<summary>Garage Email on event</summary>
    public SwitchEntity GarageEmailOnEvent => new(_haContext, "switch.garage_email_on_event");
    ///<summary>Garage FTP upload</summary>
    public SwitchEntity GarageFtpUpload => new(_haContext, "switch.garage_ftp_upload");
    ///<summary>Garage Guard return</summary>
    public SwitchEntity GarageGuardReturn => new(_haContext, "switch.garage_guard_return");
    ///<summary>Garage Hub ringtone on event</summary>
    public SwitchEntity GarageHubRingtoneOnEvent => new(_haContext, "switch.garage_hub_ringtone_on_event");
    ///<summary>Garage Infra red lights in night mode</summary>
    public SwitchEntity GarageInfraRedLightsInNightMode => new(_haContext, "switch.garage_infra_red_lights_in_night_mode");
    ///<summary>Garage Lights do not disturb switch</summary>
    public SwitchEntity GarageLightsDoNotDisturbSwitch => new(_haContext, "switch.garage_lights_do_not_disturb_switch");
    ///<summary>Garage Lights repeat switch</summary>
    public SwitchEntity GarageLightsRepeatSwitch => new(_haContext, "switch.garage_lights_repeat_switch");
    ///<summary>Garage Lights shuffle switch</summary>
    public SwitchEntity GarageLightsShuffleSwitch => new(_haContext, "switch.garage_lights_shuffle_switch");
    ///<summary>Garage Manual record</summary>
    public SwitchEntity GarageManualRecord => new(_haContext, "switch.garage_manual_record");
    ///<summary>Garage Push notifications</summary>
    public SwitchEntity GaragePushNotifications => new(_haContext, "switch.garage_push_notifications");
    ///<summary>Garage Record</summary>
    public SwitchEntity GarageRecord => new(_haContext, "switch.garage_record");
    ///<summary>Garage Record audio</summary>
    public SwitchEntity GarageRecordAudio => new(_haContext, "switch.garage_record_audio");
    ///<summary>Garage repeat switch</summary>
    public SwitchEntity GarageRepeatSwitch => new(_haContext, "switch.garage_repeat_switch");
    ///<summary>Garage shuffle switch</summary>
    public SwitchEntity GarageShuffleSwitch => new(_haContext, "switch.garage_shuffle_switch");
    ///<summary>Garage Siren on event</summary>
    public SwitchEntity GarageSirenOnEvent => new(_haContext, "switch.garage_siren_on_event");
    ///<summary>Inside cameras push notifications</summary>
    public SwitchEntity InsideCamerasPushNotifications => new(_haContext, "switch.inside_cameras_push_notifications");
    ///<summary>Justin&apos;s 2nd Echo Pop do not disturb switch</summary>
    public SwitchEntity JustinS2ndEchoPopDoNotDisturbSwitch => new(_haContext, "switch.justin_s_2nd_echo_pop_do_not_disturb_switch");
    ///<summary>Justin&apos;s 2nd Echo Pop repeat switch</summary>
    public SwitchEntity JustinS2ndEchoPopRepeatSwitch => new(_haContext, "switch.justin_s_2nd_echo_pop_repeat_switch");
    ///<summary>Justin&apos;s 2nd Echo Pop shuffle switch</summary>
    public SwitchEntity JustinS2ndEchoPopShuffleSwitch => new(_haContext, "switch.justin_s_2nd_echo_pop_shuffle_switch");
    ///<summary>Justin&apos;s Fire TV do not disturb switch</summary>
    public SwitchEntity JustinSFireTvDoNotDisturbSwitch => new(_haContext, "switch.justin_s_fire_tv_do_not_disturb_switch");
    ///<summary>Kitchen do not disturb switch</summary>
    public SwitchEntity KitchenDoNotDisturbSwitch => new(_haContext, "switch.kitchen_do_not_disturb_switch");
    ///<summary>Kitchen repeat switch</summary>
    public SwitchEntity KitchenRepeatSwitch => new(_haContext, "switch.kitchen_repeat_switch");
    ///<summary>Kitchen shuffle switch</summary>
    public SwitchEntity KitchenShuffleSwitch => new(_haContext, "switch.kitchen_shuffle_switch");
    ///<summary>Lanai Email on event</summary>
    public SwitchEntity LanaiEmailOnEvent => new(_haContext, "switch.lanai_email_on_event");
    ///<summary>Lanai FTP upload</summary>
    public SwitchEntity LanaiFtpUpload => new(_haContext, "switch.lanai_ftp_upload");
    ///<summary>Lanai Hub ringtone on event</summary>
    public SwitchEntity LanaiHubRingtoneOnEvent => new(_haContext, "switch.lanai_hub_ringtone_on_event");
    ///<summary>Lanai Infra red lights in night mode</summary>
    public SwitchEntity LanaiInfraRedLightsInNightMode => new(_haContext, "switch.lanai_infra_red_lights_in_night_mode");
    ///<summary>Lanai Manual record</summary>
    public SwitchEntity LanaiManualRecord => new(_haContext, "switch.lanai_manual_record");
    ///<summary>Lanai Push notifications</summary>
    public SwitchEntity LanaiPushNotifications => new(_haContext, "switch.lanai_push_notifications");
    ///<summary>Lanai Record</summary>
    public SwitchEntity LanaiRecord => new(_haContext, "switch.lanai_record");
    ///<summary>Lanai Record audio</summary>
    public SwitchEntity LanaiRecordAudio => new(_haContext, "switch.lanai_record_audio");
    ///<summary>Main Auto tracking</summary>
    public SwitchEntity MainAutoTracking => new(_haContext, "switch.main_auto_tracking");
    ///<summary>Main Email on event</summary>
    public SwitchEntity MainEmailOnEvent => new(_haContext, "switch.main_email_on_event");
    ///<summary>Main FTP upload</summary>
    public SwitchEntity MainFtpUpload => new(_haContext, "switch.main_ftp_upload");
    ///<summary>Main Guard return</summary>
    public SwitchEntity MainGuardReturn => new(_haContext, "switch.main_guard_return");
    ///<summary>Main Hub ringtone on event</summary>
    public SwitchEntity MainHubRingtoneOnEvent => new(_haContext, "switch.main_hub_ringtone_on_event");
    ///<summary>Main Infra red lights in night mode</summary>
    public SwitchEntity MainInfraRedLightsInNightMode => new(_haContext, "switch.main_infra_red_lights_in_night_mode");
    ///<summary>Main Manual record</summary>
    public SwitchEntity MainManualRecord => new(_haContext, "switch.main_manual_record");
    ///<summary>Main Push notifications</summary>
    public SwitchEntity MainPushNotifications => new(_haContext, "switch.main_push_notifications");
    ///<summary>Main Record</summary>
    public SwitchEntity MainRecord => new(_haContext, "switch.main_record");
    ///<summary>Main Record audio</summary>
    public SwitchEntity MainRecordAudio => new(_haContext, "switch.main_record_audio");
    ///<summary>Main Siren on event</summary>
    public SwitchEntity MainSirenOnEvent => new(_haContext, "switch.main_siren_on_event");
    ///<summary>Master Bath do not disturb switch</summary>
    public SwitchEntity MasterBathDoNotDisturbSwitch => new(_haContext, "switch.master_bath_do_not_disturb_switch");
    ///<summary>Master Bath repeat switch</summary>
    public SwitchEntity MasterBathRepeatSwitch => new(_haContext, "switch.master_bath_repeat_switch");
    ///<summary>Master Bath shuffle switch</summary>
    public SwitchEntity MasterBathShuffleSwitch => new(_haContext, "switch.master_bath_shuffle_switch");
    ///<summary>Shawn&apos;s Room Switch</summary>
    public SwitchEntity NetdaemonShawnroomMain => new(_haContext, "switch.netdaemon_shawnroom_main");
    ///<summary>Crossfade</summary>
    public SwitchEntity OfficeCrossfade => new(_haContext, "switch.office_crossfade");
    ///<summary>Office do not disturb switch</summary>
    public SwitchEntity OfficeDoNotDisturbSwitch => new(_haContext, "switch.office_do_not_disturb_switch");
    ///<summary>Loudness</summary>
    public SwitchEntity OfficeLoudness => new(_haContext, "switch.office_loudness");
    ///<summary>Office repeat switch</summary>
    public SwitchEntity OfficeRepeatSwitch => new(_haContext, "switch.office_repeat_switch");
    ///<summary>Office shuffle switch</summary>
    public SwitchEntity OfficeShuffleSwitch => new(_haContext, "switch.office_shuffle_switch");
    ///<summary>Outside cameras push notification</summary>
    public SwitchEntity OutsideCamerasPushNotification => new(_haContext, "switch.outside_cameras_push_notification");
    ///<summary>Permanent Lights Dream View Toggle</summary>
    public SwitchEntity PermanentLightsDreamViewToggle => new(_haContext, "switch.permanent_lights_dream_view_toggle");
    ///<summary>Permanent Lights Gradient Toggle</summary>
    public SwitchEntity PermanentLightsGradientToggle => new(_haContext, "switch.permanent_lights_gradient_toggle");
    ///<summary>Permanent Lights Power Switch</summary>
    public SwitchEntity PermanentLightsPowerSwitch => new(_haContext, "switch.permanent_lights_power_switch");
    ///<summary>ratgdov2.5i 0a070c Learn</summary>
    public SwitchEntity Ratgdov25i0a070cLearn => new(_haContext, "switch.ratgdov25i_0a070c_learn");
    ///<summary>Reolink Chime LED</summary>
    public SwitchEntity ReolinkChimeLed => new(_haContext, "switch.reolink_chime_led");
    ///<summary>Reolink NVR Email on event</summary>
    public SwitchEntity ReolinkNvrEmailOnEvent => new(_haContext, "switch.reolink_nvr_email_on_event");
    ///<summary>Reolink NVR FTP upload</summary>
    public SwitchEntity ReolinkNvrFtpUpload => new(_haContext, "switch.reolink_nvr_ftp_upload");
    ///<summary>Reolink NVR Hub ringtone on event</summary>
    public SwitchEntity ReolinkNvrHubRingtoneOnEvent => new(_haContext, "switch.reolink_nvr_hub_ringtone_on_event");
    ///<summary>Reolink NVR Push notifications</summary>
    public SwitchEntity ReolinkNvrPushNotifications => new(_haContext, "switch.reolink_nvr_push_notifications");
    ///<summary>Reolink NVR Record</summary>
    public SwitchEntity ReolinkNvrRecord => new(_haContext, "switch.reolink_nvr_record");
    ///<summary>Shawn monitor LEDs Nightlight</summary>
    public SwitchEntity ShawnMonitorLedsNightlight => new(_haContext, "switch.shawn_monitor_leds_nightlight");
    ///<summary>Shawn monitor LEDs Reverse</summary>
    public SwitchEntity ShawnMonitorLedsReverse => new(_haContext, "switch.shawn_monitor_leds_reverse");
    ///<summary>Shawn monitor LEDs Sync receive</summary>
    public SwitchEntity ShawnMonitorLedsSyncReceive => new(_haContext, "switch.shawn_monitor_leds_sync_receive");
    ///<summary>Shawn monitor LEDs Sync send</summary>
    public SwitchEntity ShawnMonitorLedsSyncSend => new(_haContext, "switch.shawn_monitor_leds_sync_send");
    ///<summary>Shawn office Hue motion sensor Light sensor enabled</summary>
    public SwitchEntity ShawnOfficeHueMotionSensorLightSensorEnabled => new(_haContext, "switch.shawn_office_hue_motion_sensor_light_sensor_enabled");
    ///<summary>Shawn office Hue motion sensor Motion sensor enabled</summary>
    public SwitchEntity ShawnOfficeHueMotionSensorMotionSensorEnabled => new(_haContext, "switch.shawn_office_hue_motion_sensor_motion_sensor_enabled");
    ///<summary>Shawn&apos;s Fire TV do not disturb switch</summary>
    public SwitchEntity ShawnSFireTvDoNotDisturbSwitch => new(_haContext, "switch.shawn_s_fire_tv_do_not_disturb_switch");
    ///<summary>Shawn&apos;s Fire TV Stick do not disturb switch</summary>
    public SwitchEntity ShawnSFireTvStickDoNotDisturbSwitch => new(_haContext, "switch.shawn_s_fire_tv_stick_do_not_disturb_switch");
    ///<summary>This Device do not disturb switch</summary>
    public SwitchEntity ThisDeviceDoNotDisturbSwitch => new(_haContext, "switch.this_device_do_not_disturb_switch");
    ///<summary>West Side Email on event</summary>
    public SwitchEntity WestSideEmailOnEvent => new(_haContext, "switch.west_side_email_on_event");
    ///<summary>West Side FTP upload</summary>
    public SwitchEntity WestSideFtpUpload => new(_haContext, "switch.west_side_ftp_upload");
    ///<summary>West Side Hub ringtone on event</summary>
    public SwitchEntity WestSideHubRingtoneOnEvent => new(_haContext, "switch.west_side_hub_ringtone_on_event");
    ///<summary>West Side Infra red lights in night mode</summary>
    public SwitchEntity WestSideInfraRedLightsInNightMode => new(_haContext, "switch.west_side_infra_red_lights_in_night_mode");
    ///<summary>West Side Manual record</summary>
    public SwitchEntity WestSideManualRecord => new(_haContext, "switch.west_side_manual_record");
    ///<summary>West Side Push notifications</summary>
    public SwitchEntity WestSidePushNotifications => new(_haContext, "switch.west_side_push_notifications");
    ///<summary>West Side Record</summary>
    public SwitchEntity WestSideRecord => new(_haContext, "switch.west_side_record");
    ///<summary>West Side Record audio</summary>
    public SwitchEntity WestSideRecordAudio => new(_haContext, "switch.west_side_record_audio");
}

public partial class TodoEntities
{
    private readonly IHaContext _haContext;
    public TodoEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all todo entities currently registered (at runtime) in Home Assistant as TodoEntity</summary>
    public IEnumerable<TodoEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("todo.")).Select(e => new TodoEntity(e));
    ///<summary>Alexa Shopping List</summary>
    public TodoEntity AlexaShoppingList => new(_haContext, "todo.alexa_shopping_list");
    ///<summary>Household</summary>
    public TodoEntity AlexaToDoList => new(_haContext, "todo.alexa_to_do_list");
    ///<summary>CDE</summary>
    public TodoEntity Cde => new(_haContext, "todo.cde");
    ///<summary>Hobbies</summary>
    public TodoEntity Hobbies => new(_haContext, "todo.hobbies");
    ///<summary>Inbox</summary>
    public TodoEntity Inbox => new(_haContext, "todo.inbox");
    ///<summary>NPL</summary>
    public TodoEntity Npl => new(_haContext, "todo.npl");
    ///<summary>Shawn’s Packing Checklist</summary>
    public TodoEntity ShawnsPackingChecklist => new(_haContext, "todo.shawns_packing_checklist");
    ///<summary>Shopping List</summary>
    public TodoEntity ShoppingList => new(_haContext, "todo.shopping_list");
}

public partial class TtsEntities
{
    private readonly IHaContext _haContext;
    public TtsEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all tts entities currently registered (at runtime) in Home Assistant as TtsEntity</summary>
    public IEnumerable<TtsEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("tts.")).Select(e => new TtsEntity(e));
    ///<summary>Google Translate en com</summary>
    public TtsEntity GoogleEnCom => new(_haContext, "tts.google_en_com");
    ///<summary>Home Assistant Cloud</summary>
    public TtsEntity HomeAssistantCloud => new(_haContext, "tts.home_assistant_cloud");
}

public partial class UpdateEntities
{
    private readonly IHaContext _haContext;
    public UpdateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all update entities currently registered (at runtime) in Home Assistant as UpdateEntity</summary>
    public IEnumerable<UpdateEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("update.")).Select(e => new UpdateEntity(e));
    ///<summary>Alexa Media Player update</summary>
    public UpdateEntity AlexaMediaPlayerUpdate => new(_haContext, "update.alexa_media_player_update");
    ///<summary>auto-entities update</summary>
    public UpdateEntity AutoEntitiesUpdate => new(_haContext, "update.auto_entities_update");
    ///<summary>Back Firmware</summary>
    public UpdateEntity BackFirmware => new(_haContext, "update.back_firmware");
    ///<summary>Bubble Card update</summary>
    public UpdateEntity BubbleCardUpdate => new(_haContext, "update.bubble_card_update");
    ///<summary>Config Editor Card update</summary>
    public UpdateEntity ConfigEditorCardUpdate => new(_haContext, "update.config_editor_card_update");
    ///<summary>Config Editor update</summary>
    public UpdateEntity ConfigEditorUpdate => new(_haContext, "update.config_editor_update");
    ///<summary>Doorbell Firmware</summary>
    public UpdateEntity DoorbellFirmware => new(_haContext, "update.doorbell_firmware");
    ///<summary>East Side Firmware</summary>
    public UpdateEntity EastSideFirmware => new(_haContext, "update.east_side_firmware");
    ///<summary>Front Firmware</summary>
    public UpdateEntity FrontFirmware => new(_haContext, "update.front_firmware");
    ///<summary>Garage Firmware</summary>
    public UpdateEntity GarageFirmware => new(_haContext, "update.garage_firmware");
    ///<summary>govee update</summary>
    public UpdateEntity GoveeUpdate => new(_haContext, "update.govee_update");
    ///<summary>HACS update</summary>
    public UpdateEntity HacsUpdate => new(_haContext, "update.hacs_update");
    ///<summary>Home Assistant Core Update</summary>
    public UpdateEntity HomeAssistantCoreUpdate => new(_haContext, "update.home_assistant_core_update");
    ///<summary>Home Assistant Operating System Update</summary>
    public UpdateEntity HomeAssistantOperatingSystemUpdate => new(_haContext, "update.home_assistant_operating_system_update");
    ///<summary>Home Assistant Supervisor Update</summary>
    public UpdateEntity HomeAssistantSupervisorUpdate => new(_haContext, "update.home_assistant_supervisor_update");
    ///<summary>Home Connect 620 Connected Smart Lock Firmware</summary>
    public UpdateEntity HomeConnect620ConnectedSmartLockFirmware => new(_haContext, "update.home_connect_620_connected_smart_lock_firmware");
    ///<summary>Kiosk Mode update</summary>
    public UpdateEntity KioskModeUpdate => new(_haContext, "update.kiosk_mode_update");
    ///<summary>Lanai Firmware</summary>
    public UpdateEntity LanaiFirmware => new(_haContext, "update.lanai_firmware");
    ///<summary>Local Tuya update</summary>
    public UpdateEntity LocalTuyaUpdate => new(_haContext, "update.local_tuya_update");
    ///<summary>LUMI lumi.sensor_wleak.aq1 Firmware</summary>
    public UpdateEntity LumiLumiSensorWleakAq1Firmware => new(_haContext, "update.lumi_lumi_sensor_wleak_aq1_firmware");
    ///<summary>LUMI lumi.sensor_wleak.aq2 Firmware</summary>
    public UpdateEntity LumiLumiSensorWleakAq2Firmware2 => new(_haContext, "update.lumi_lumi_sensor_wleak_aq2_firmware_2");
    ///<summary>LUMI lumi.sensor_wleak.aq3 Firmware</summary>
    public UpdateEntity LumiLumiSensorWleakAq3Firmware2 => new(_haContext, "update.lumi_lumi_sensor_wleak_aq3_firmware_2");
    ///<summary>Main Firmware</summary>
    public UpdateEntity MainFirmware => new(_haContext, "update.main_firmware");
    ///<summary>Matter Server Update</summary>
    public UpdateEntity MatterServerUpdate => new(_haContext, "update.matter_server_update");
    ///<summary>Mosquitto broker Update</summary>
    public UpdateEntity MosquittoBrokerUpdate => new(_haContext, "update.mosquitto_broker_update");
    ///<summary>Mushroom update</summary>
    public UpdateEntity MushroomUpdate => new(_haContext, "update.mushroom_update");
    ///<summary>NetDaemon V5 (.NET 9) Update</summary>
    public UpdateEntity NetdaemonV5Net9Update => new(_haContext, "update.netdaemon_v5_net_9_update");
    ///<summary>Reolink NVR Firmware</summary>
    public UpdateEntity ReolinkNvrFirmware => new(_haContext, "update.reolink_nvr_firmware");
    ///<summary>Samba share Update</summary>
    public UpdateEntity SambaShareUpdate => new(_haContext, "update.samba_share_update");
    ///<summary>Shawn monitor LEDs Firmware</summary>
    public UpdateEntity ShawnMonitorLedsFirmware => new(_haContext, "update.shawn_monitor_leds_firmware");
    ///<summary>Spotcast update</summary>
    public UpdateEntity SpotcastUpdate => new(_haContext, "update.spotcast_update");
    ///<summary>Stack In Card update</summary>
    public UpdateEntity StackInCardUpdate => new(_haContext, "update.stack_in_card_update");
    ///<summary>TP-Link Omada update</summary>
    public UpdateEntity TpLinkOmadaUpdate => new(_haContext, "update.tp_link_omada_update");
    ///<summary>WebRTC Camera update</summary>
    public UpdateEntity WebrtcCameraUpdate => new(_haContext, "update.webrtc_camera_update");
    ///<summary>West Side Firmware</summary>
    public UpdateEntity WestSideFirmware => new(_haContext, "update.west_side_firmware");
}

public partial class VacuumEntities
{
    private readonly IHaContext _haContext;
    public VacuumEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all vacuum entities currently registered (at runtime) in Home Assistant as VacuumEntity</summary>
    public IEnumerable<VacuumEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("vacuum.")).Select(e => new VacuumEntity(e));
    ///<summary>Frank</summary>
    public VacuumEntity Frank => new(_haContext, "vacuum.frank");
}

public partial class WeatherEntities
{
    private readonly IHaContext _haContext;
    public WeatherEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all weather entities currently registered (at runtime) in Home Assistant as WeatherEntity</summary>
    public IEnumerable<WeatherEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("weather.")).Select(e => new WeatherEntity(e));
    ///<summary>Forecast Home</summary>
    public WeatherEntity ForecastHome => new(_haContext, "weather.forecast_home");
}

public partial class ZoneEntities
{
    private readonly IHaContext _haContext;
    public ZoneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all zone entities currently registered (at runtime) in Home Assistant as ZoneEntity</summary>
    public IEnumerable<ZoneEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("zone.")).Select(e => new ZoneEntity(e));
    ///<summary>Aldi</summary>
    public ZoneEntity Aldi => new(_haContext, "zone.aldi");
    ///<summary>Costco</summary>
    public ZoneEntity Costco => new(_haContext, "zone.costco");
    ///<summary>Home</summary>
    public ZoneEntity Home => new(_haContext, "zone.home");
    ///<summary>Publix</summary>
    public ZoneEntity Publix => new(_haContext, "zone.publix");
    ///<summary>Publix</summary>
    public ZoneEntity Publix2 => new(_haContext, "zone.publix_2");
}

public partial class InputBooleanEntities
{
    private readonly IHaContext _haContext;
    public InputBooleanEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all input_boolean entities currently registered (at runtime) in Home Assistant as InputBooleanEntity</summary>
    public IEnumerable<InputBooleanEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("input_boolean.")).Select(e => new InputBooleanEntity(e));
    ///<summary>dev_netdaemon_app_model_hello_yaml_app</summary>
    public InputBooleanEntity DevNetdaemonAppModelHelloYamlApp => new(_haContext, "input_boolean.dev_netdaemon_app_model_hello_yaml_app");
    ///<summary>dev_netdaemon_extensions_scheduling_scheduling_app</summary>
    public InputBooleanEntity DevNetdaemonExtensionsSchedulingSchedulingApp => new(_haContext, "input_boolean.dev_netdaemon_extensions_scheduling_scheduling_app");
    ///<summary>dev_netdaemon_general_mqtt_manager</summary>
    public InputBooleanEntity DevNetdaemonGeneralMqttManager => new(_haContext, "input_boolean.dev_netdaemon_general_mqtt_manager");
    ///<summary>dev_netdaemon_hass_model_hello_world_app</summary>
    public InputBooleanEntity DevNetdaemonHassModelHelloWorldApp => new(_haContext, "input_boolean.dev_netdaemon_hass_model_hello_world_app");
    ///<summary>dev_netdaemon_hass_model_light_on_movement</summary>
    public InputBooleanEntity DevNetdaemonHassModelLightOnMovement => new(_haContext, "input_boolean.dev_netdaemon_hass_model_light_on_movement");
    ///<summary>dev_netdaemon_home_assistant_generated_apps_test</summary>
    public InputBooleanEntity DevNetdaemonHomeAssistantGeneratedAppsTest => new(_haContext, "input_boolean.dev_netdaemon_home_assistant_generated_apps_test");
    ///<summary>dev_netdaemon_mqtt_entity_handler</summary>
    public InputBooleanEntity DevNetdaemonMqttEntityHandler => new(_haContext, "input_boolean.dev_netdaemon_mqtt_entity_handler");
    ///<summary>dev_netdaemon_mqtt_entity_state_manager</summary>
    public InputBooleanEntity DevNetdaemonMqttEntityStateManager => new(_haContext, "input_boolean.dev_netdaemon_mqtt_entity_state_manager");
    ///<summary>dev_netdaemon_mqtt_entity_subscriber</summary>
    public InputBooleanEntity DevNetdaemonMqttEntitySubscriber => new(_haContext, "input_boolean.dev_netdaemon_mqtt_entity_subscriber");
    ///<summary>dev_netdaemon_shawn_room_motion_sensor</summary>
    public InputBooleanEntity DevNetdaemonShawnRoomMotionSensor => new(_haContext, "input_boolean.dev_netdaemon_shawn_room_motion_sensor");
    ///<summary>dev_netdaemon_shawn_room_mqtt_subscriber</summary>
    public InputBooleanEntity DevNetdaemonShawnRoomMqttSubscriber => new(_haContext, "input_boolean.dev_netdaemon_shawn_room_mqtt_subscriber");
    ///<summary>dev_netdaemon_shawn_room_state_manager</summary>
    public InputBooleanEntity DevNetdaemonShawnRoomStateManager => new(_haContext, "input_boolean.dev_netdaemon_shawn_room_state_manager");
    ///<summary>netdaemon_app_model_hello_yaml_app</summary>
    public InputBooleanEntity NetdaemonAppModelHelloYamlApp => new(_haContext, "input_boolean.netdaemon_app_model_hello_yaml_app");
    ///<summary>netdaemon_extensions_scheduling_scheduling_app</summary>
    public InputBooleanEntity NetdaemonExtensionsSchedulingSchedulingApp => new(_haContext, "input_boolean.netdaemon_extensions_scheduling_scheduling_app");
    ///<summary>netdaemon_hass_model_hello_world_app</summary>
    public InputBooleanEntity NetdaemonHassModelHelloWorldApp => new(_haContext, "input_boolean.netdaemon_hass_model_hello_world_app");
    ///<summary>netdaemon_hass_model_light_on_movement</summary>
    public InputBooleanEntity NetdaemonHassModelLightOnMovement => new(_haContext, "input_boolean.netdaemon_hass_model_light_on_movement");
}

public partial record LightEntity : Entity<LightEntity, EntityState<LightAttributes>, LightAttributes>, ILightEntityCore
{
    public LightEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LightEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record LightAttributes
{
    [JsonPropertyName("supported_color_modes")]
    public IReadOnlyList<string>? SupportedColorModes { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("min_color_temp_kelvin")]
    public double? MinColorTempKelvin { get; init; }

    [JsonPropertyName("max_color_temp_kelvin")]
    public double? MaxColorTempKelvin { get; init; }

    [JsonPropertyName("min_mireds")]
    public double? MinMireds { get; init; }

    [JsonPropertyName("max_mireds")]
    public double? MaxMireds { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("color_temp_kelvin")]
    public double? ColorTempKelvin { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }

    [JsonPropertyName("hs_color")]
    public IReadOnlyList<double>? HsColor { get; init; }

    [JsonPropertyName("rgb_color")]
    public IReadOnlyList<double>? RgbColor { get; init; }

    [JsonPropertyName("xy_color")]
    public IReadOnlyList<double>? XyColor { get; init; }

    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("effect_list")]
    public IReadOnlyList<string>? EffectList { get; init; }

    [JsonPropertyName("color")]
    public object? Color { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("effect")]
    public string? Effect { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("dynamics")]
    public object? Dynamics { get; init; }

    [JsonPropertyName("rate_limit_total")]
    public double? RateLimitTotal { get; init; }

    [JsonPropertyName("rate_limit_remaining")]
    public double? RateLimitRemaining { get; init; }

    [JsonPropertyName("rate_limit_reset_seconds")]
    public double? RateLimitResetSeconds { get; init; }

    [JsonPropertyName("rate_limit_reset")]
    public string? RateLimitReset { get; init; }

    [JsonPropertyName("rate_limit_on")]
    public double? RateLimitOn { get; init; }

    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }

    [JsonPropertyName("model")]
    public string? Model { get; init; }

    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("rgbw_color")]
    public IReadOnlyList<double>? RgbwColor { get; init; }

    [JsonPropertyName("is_hue_group")]
    public bool? IsHueGroup { get; init; }

    [JsonPropertyName("hue_scenes")]
    public IReadOnlyList<string>? HueScenes { get; init; }

    [JsonPropertyName("hue_type")]
    public string? HueType { get; init; }

    [JsonPropertyName("lights")]
    public IReadOnlyList<string>? Lights { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record MediaPlayerEntity : Entity<MediaPlayerEntity, EntityState<MediaPlayerAttributes>, MediaPlayerAttributes>, IMediaPlayerEntityCore
{
    public MediaPlayerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public MediaPlayerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record MediaPlayerAttributes
{
    [JsonPropertyName("app_id")]
    public string? AppId { get; init; }

    [JsonPropertyName("app_name")]
    public string? AppName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("entity_picture_local")]
    public string? EntityPictureLocal { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }

    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    [JsonPropertyName("media_duration")]
    public double? MediaDuration { get; init; }

    [JsonPropertyName("media_position")]
    public double? MediaPosition { get; init; }

    [JsonPropertyName("media_position_updated_at")]
    public string? MediaPositionUpdatedAt { get; init; }

    [JsonPropertyName("media_title")]
    public string? MediaTitle { get; init; }

    [JsonPropertyName("media_album_name")]
    public string? MediaAlbumName { get; init; }

    [JsonPropertyName("media_image_url")]
    public string? MediaImageUrl { get; init; }

    [JsonPropertyName("media_artist")]
    public string? MediaArtist { get; init; }

    [JsonPropertyName("sound_mode_list")]
    public IReadOnlyList<string>? SoundModeList { get; init; }

    [JsonPropertyName("media_track")]
    public object? MediaTrack { get; init; }

    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }

    [JsonPropertyName("repeat")]
    public string? Repeat { get; init; }

    [JsonPropertyName("source_list")]
    public IReadOnlyList<string>? SourceList { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("adb_response")]
    public object? AdbResponse { get; init; }

    [JsonPropertyName("hdmi_input")]
    public object? HdmiInput { get; init; }

    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }

    [JsonPropertyName("sound_mode_raw")]
    public string? SoundModeRaw { get; init; }

    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("sound_output")]
    public string? SoundOutput { get; init; }

    [JsonPropertyName("available")]
    public bool? Available { get; init; }

    [JsonPropertyName("last_called")]
    public bool? LastCalled { get; init; }

    [JsonPropertyName("last_called_timestamp")]
    public double? LastCalledTimestamp { get; init; }

    [JsonPropertyName("last_called_summary")]
    public string? LastCalledSummary { get; init; }

    [JsonPropertyName("connected_bluetooth")]
    public object? ConnectedBluetooth { get; init; }

    [JsonPropertyName("bluetooth_list")]
    public object? BluetoothList { get; init; }

    [JsonPropertyName("previous_volume")]
    public double? PreviousVolume { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("media_playlist")]
    public string? MediaPlaylist { get; init; }
}

public partial record AlarmControlPanelEntity : Entity<AlarmControlPanelEntity, EntityState<AlarmControlPanelAttributes>, AlarmControlPanelAttributes>
{
    public AlarmControlPanelEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public AlarmControlPanelEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record AlarmControlPanelAttributes
{
    [JsonPropertyName("code_format")]
    public object? CodeFormat { get; init; }

    [JsonPropertyName("changed_by")]
    public object? ChangedBy { get; init; }

    [JsonPropertyName("code_arm_required")]
    public bool? CodeArmRequired { get; init; }

    [JsonPropertyName("previous_state")]
    public object? PreviousState { get; init; }

    [JsonPropertyName("next_state")]
    public object? NextState { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record AutomationEntity : Entity<AutomationEntity, EntityState<AutomationAttributes>, AutomationAttributes>, IAutomationEntityCore
{
    public AutomationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public AutomationEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record AutomationAttributes
{
    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }
}

public partial record BinarySensorEntity : Entity<BinarySensorEntity, EntityState<BinarySensorAttributes>, BinarySensorAttributes>, IBinarySensorEntityCore
{
    public BinarySensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public BinarySensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record BinarySensorAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("Fast User Switched")]
    public bool? FastUserSwitched { get; init; }

    [JsonPropertyName("Idle")]
    public bool? Idle { get; init; }

    [JsonPropertyName("Locked")]
    public bool? Locked { get; init; }

    [JsonPropertyName("Screen Off")]
    public bool? ScreenOff { get; init; }

    [JsonPropertyName("Screensaver")]
    public bool? Screensaver { get; init; }

    [JsonPropertyName("Sleeping")]
    public bool? Sleeping { get; init; }

    [JsonPropertyName("Terminating")]
    public bool? Terminating { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record ButtonEntity : Entity<ButtonEntity, EntityState<ButtonAttributes>, ButtonAttributes>, IButtonEntityCore
{
    public ButtonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ButtonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ButtonAttributes
{
    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record CalendarEntity : Entity<CalendarEntity, EntityState<CalendarAttributes>, CalendarAttributes>, ICalendarEntityCore
{
    public CalendarEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CalendarEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CalendarAttributes
{
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("all_day")]
    public bool? AllDay { get; init; }

    [JsonPropertyName("start_time")]
    public string? StartTime { get; init; }

    [JsonPropertyName("end_time")]
    public string? EndTime { get; init; }

    [JsonPropertyName("location")]
    public string? Location { get; init; }

    [JsonPropertyName("description")]
    public string? Description { get; init; }

    [JsonPropertyName("due_today")]
    public bool? DueToday { get; init; }

    [JsonPropertyName("overdue")]
    public bool? Overdue { get; init; }

    [JsonPropertyName("all_tasks")]
    public IReadOnlyList<string>? AllTasks { get; init; }

    [JsonPropertyName("priority")]
    public double? Priority { get; init; }

    [JsonPropertyName("labels")]
    public IReadOnlyList<string>? Labels { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record CameraEntity : Entity<CameraEntity, EntityState<CameraAttributes>, CameraAttributes>, ICameraEntityCore
{
    public CameraEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CameraEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CameraAttributes
{
    [JsonPropertyName("access_token")]
    public string? AccessToken { get; init; }

    [JsonPropertyName("frontend_stream_type")]
    public string? FrontendStreamType { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record ClimateEntity : Entity<ClimateEntity, EntityState<ClimateAttributes>, ClimateAttributes>, IClimateEntityCore
{
    public ClimateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ClimateEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ClimateAttributes
{
    [JsonPropertyName("hvac_modes")]
    public IReadOnlyList<string>? HvacModes { get; init; }

    [JsonPropertyName("min_temp")]
    public double? MinTemp { get; init; }

    [JsonPropertyName("max_temp")]
    public double? MaxTemp { get; init; }

    [JsonPropertyName("fan_modes")]
    public IReadOnlyList<string>? FanModes { get; init; }

    [JsonPropertyName("preset_modes")]
    public IReadOnlyList<string>? PresetModes { get; init; }

    [JsonPropertyName("current_temperature")]
    public double? CurrentTemperature { get; init; }

    [JsonPropertyName("temperature")]
    public object? Temperature { get; init; }

    [JsonPropertyName("target_temp_high")]
    public double? TargetTempHigh { get; init; }

    [JsonPropertyName("target_temp_low")]
    public double? TargetTempLow { get; init; }

    [JsonPropertyName("current_humidity")]
    public double? CurrentHumidity { get; init; }

    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }

    [JsonPropertyName("hvac_action")]
    public string? HvacAction { get; init; }

    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }

    [JsonPropertyName("fan_state")]
    public string? FanState { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record ConfigEditorEntity : Entity<ConfigEditorEntity, EntityState<ConfigEditorAttributes>, ConfigEditorAttributes>
{
    public ConfigEditorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ConfigEditorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ConfigEditorAttributes
{
}

public partial record ConversationEntity : Entity<ConversationEntity, EntityState<ConversationAttributes>, ConversationAttributes>
{
    public ConversationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ConversationEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ConversationAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record CoverEntity : Entity<CoverEntity, EntityState<CoverAttributes>, CoverAttributes>, ICoverEntityCore
{
    public CoverEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CoverEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CoverAttributes
{
    [JsonPropertyName("current_position")]
    public double? CurrentPosition { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record DeviceTrackerEntity : Entity<DeviceTrackerEntity, EntityState<DeviceTrackerAttributes>, DeviceTrackerAttributes>, IDeviceTrackerEntityCore
{
    public DeviceTrackerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public DeviceTrackerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record DeviceTrackerAttributes
{
    [JsonPropertyName("source_type")]
    public string? SourceType { get; init; }

    [JsonPropertyName("battery_level")]
    public double? BatteryLevel { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("altitude")]
    public double? Altitude { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("vertical_accuracy")]
    public double? VerticalAccuracy { get; init; }

    [JsonPropertyName("course")]
    public double? Course { get; init; }

    [JsonPropertyName("speed")]
    public double? Speed { get; init; }
}

public partial record EventEntity : Entity<EventEntity, EntityState<EventAttributes>, EventAttributes>
{
    public EventEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public EventEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record EventAttributes
{
    [JsonPropertyName("event_types")]
    public IReadOnlyList<string>? EventTypes { get; init; }

    [JsonPropertyName("event_type")]
    public string? EventType { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record FanEntity : Entity<FanEntity, EntityState<FanAttributes>, FanAttributes>
{
    public FanEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public FanEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record FanAttributes
{
    [JsonPropertyName("preset_modes")]
    public IReadOnlyList<string>? PresetModes { get; init; }

    [JsonPropertyName("direction")]
    public string? Direction { get; init; }

    [JsonPropertyName("percentage")]
    public double? Percentage { get; init; }

    [JsonPropertyName("percentage_step")]
    public double? PercentageStep { get; init; }

    [JsonPropertyName("preset_mode")]
    public object? PresetMode { get; init; }

    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("screen_status")]
    public bool? ScreenStatus { get; init; }

    [JsonPropertyName("child_lock")]
    public bool? ChildLock { get; init; }

    [JsonPropertyName("night_light")]
    public string? NightLight { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }
}

public partial record GoveeEntity : Entity<GoveeEntity, EntityState<GoveeAttributes>, GoveeAttributes>
{
    public GoveeEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public GoveeEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record GoveeAttributes
{
}

public partial record ImageEntity : Entity<ImageEntity, EntityState<ImageAttributes>, ImageAttributes>
{
    public ImageEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ImageEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ImageAttributes
{
    [JsonPropertyName("access_token")]
    public string? AccessToken { get; init; }

    [JsonPropertyName("map_name")]
    public string? MapName { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record LockEntity : Entity<LockEntity, EntityState<LockAttributes>, LockAttributes>, ILockEntityCore
{
    public LockEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LockEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record LockAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record NumberEntity : NumericEntity<NumberEntity, NumericEntityState<NumberAttributes>, NumberAttributes>, INumberEntityCore
{
    public NumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumberEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NumberAttributes
{
    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record PersonEntity : Entity<PersonEntity, EntityState<PersonAttributes>, PersonAttributes>, IPersonEntityCore
{
    public PersonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public PersonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record PersonAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("device_trackers")]
    public IReadOnlyList<string>? DeviceTrackers { get; init; }

    [JsonPropertyName("user_id")]
    public string? UserId { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }
}

public partial record RemoteEntity : Entity<RemoteEntity, EntityState<RemoteAttributes>, RemoteAttributes>, IRemoteEntityCore
{
    public RemoteEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public RemoteEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record RemoteAttributes
{
    [JsonPropertyName("activity_list")]
    public IReadOnlyList<object>? ActivityList { get; init; }

    [JsonPropertyName("current_activity")]
    public string? CurrentActivity { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SceneEntity : Entity<SceneEntity, EntityState<SceneAttributes>, SceneAttributes>, ISceneEntityCore
{
    public SceneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SceneEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SceneAttributes
{
    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("group_name")]
    public string? GroupName { get; init; }

    [JsonPropertyName("group_type")]
    public string? GroupType { get; init; }

    [JsonPropertyName("name")]
    public string? Name { get; init; }

    [JsonPropertyName("speed")]
    public double? Speed { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("is_dynamic")]
    public bool? IsDynamic { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record ScheduleEntity : Entity<ScheduleEntity, EntityState<ScheduleAttributes>, ScheduleAttributes>, IScheduleEntityCore
{
    public ScheduleEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ScheduleEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ScheduleAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("next_event")]
    public string? NextEvent { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record ScriptEntity : Entity<ScriptEntity, EntityState<ScriptAttributes>, ScriptAttributes>, IScriptEntityCore
{
    public ScriptEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ScriptEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ScriptAttributes
{
    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("last_action")]
    public string? LastAction { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SelectEntity : Entity<SelectEntity, EntityState<SelectAttributes>, SelectAttributes>, ISelectEntityCore
{
    public SelectEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SelectEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SelectAttributes
{
    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SensorEntity : Entity<SensorEntity, EntityState<SensorAttributes>, SensorAttributes>, ISensorEntityCore
{
    public SensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SensorAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("info")]
    public string? Info { get; init; }

    [JsonPropertyName("serial")]
    public string? Serial { get; init; }

    [JsonPropertyName("location")]
    public string? Location_0 { get; init; }

    [JsonPropertyName("Location")]
    public IReadOnlyList<double>? Location_1 { get; init; }

    [JsonPropertyName("state_message")]
    public string? StateMessage { get; init; }

    [JsonPropertyName("state_reason")]
    public object? StateReason { get; init; }

    [JsonPropertyName("command_set")]
    public string? CommandSet { get; init; }

    [JsonPropertyName("uri_supported")]
    public string? UriSupported { get; init; }

    [JsonPropertyName("Battery Provides Time Remaining")]
    public bool? BatteryProvidesTimeRemaining { get; init; }

    [JsonPropertyName("BatteryHealth")]
    public string? BatteryHealth { get; init; }

    [JsonPropertyName("BatteryHealthCondition")]
    public string? BatteryHealthCondition { get; init; }

    [JsonPropertyName("Current")]
    public double? Current { get; init; }

    [JsonPropertyName("Current Capacity")]
    public double? CurrentCapacity { get; init; }

    [JsonPropertyName("DesignCycleCount")]
    public double? DesignCycleCount { get; init; }

    [JsonPropertyName("Hardware Serial Number")]
    public string? HardwareSerialNumber { get; init; }

    [JsonPropertyName("Is Charging")]
    public bool? IsCharging { get; init; }

    [JsonPropertyName("Is Present")]
    public bool? IsPresent { get; init; }

    [JsonPropertyName("Low Power Mode")]
    public bool? LowPowerMode { get; init; }

    [JsonPropertyName("LPM Active")]
    public bool? LPMActive { get; init; }

    [JsonPropertyName("Max Capacity")]
    public double? MaxCapacity { get; init; }

    [JsonPropertyName("Name")]
    public string? Name { get; init; }

    [JsonPropertyName("Optimized Battery Charging Engaged")]
    public bool? OptimizedBatteryChargingEngaged { get; init; }

    [JsonPropertyName("Power Source ID")]
    public double? PowerSourceID { get; init; }

    [JsonPropertyName("Power Source State")]
    public string? PowerSourceState { get; init; }

    [JsonPropertyName("Time to Empty")]
    public double? TimetoEmpty { get; init; }

    [JsonPropertyName("Time to Full Charge")]
    public double? TimetoFullCharge { get; init; }

    [JsonPropertyName("Transport Type")]
    public string? TransportType { get; init; }

    [JsonPropertyName("Type")]
    public string? Type { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("Hardware Address")]
    public string? HardwareAddress { get; init; }

    [JsonPropertyName("Active Camera")]
    public IReadOnlyList<object>? ActiveCamera { get; init; }

    [JsonPropertyName("All Camera")]
    public IReadOnlyList<string>? AllCamera { get; init; }

    [JsonPropertyName("Active Audio Input")]
    public IReadOnlyList<object>? ActiveAudioInput { get; init; }

    [JsonPropertyName("All Audio Input")]
    public IReadOnlyList<string>? AllAudioInput { get; init; }

    [JsonPropertyName("Active Audio Output")]
    public IReadOnlyList<object>? ActiveAudioOutput { get; init; }

    [JsonPropertyName("All Audio Output")]
    public IReadOnlyList<string>? AllAudioOutput { get; init; }

    [JsonPropertyName("Display IDs")]
    public IReadOnlyList<string>? DisplayIDs { get; init; }

    [JsonPropertyName("Display Names")]
    public IReadOnlyList<string>? DisplayNames { get; init; }

    [JsonPropertyName("Bundle Identifier")]
    public string? BundleIdentifier { get; init; }

    [JsonPropertyName("Is Hidden")]
    public bool? IsHidden { get; init; }

    [JsonPropertyName("Launch Date")]
    public string? LaunchDate { get; init; }

    [JsonPropertyName("Owns Menu Bar")]
    public bool? OwnsMenuBar { get; init; }

    [JsonPropertyName("Administrative Area")]
    public string? AdministrativeArea { get; init; }

    [JsonPropertyName("Areas Of Interest")]
    public string? AreasOfInterest { get; init; }

    [JsonPropertyName("Country")]
    public string? Country { get; init; }

    [JsonPropertyName("Inland Water")]
    public string? InlandWater { get; init; }

    [JsonPropertyName("ISO Country Code")]
    public string? ISOCountryCode { get; init; }

    [JsonPropertyName("Locality")]
    public string? Locality { get; init; }

    [JsonPropertyName("Ocean")]
    public string? Ocean { get; init; }

    [JsonPropertyName("Postal Code")]
    public string? PostalCode { get; init; }

    [JsonPropertyName("Sub Administrative Area")]
    public string? SubAdministrativeArea { get; init; }

    [JsonPropertyName("Sub Locality")]
    public string? SubLocality { get; init; }

    [JsonPropertyName("Sub Thoroughfare")]
    public string? SubThoroughfare { get; init; }

    [JsonPropertyName("Thoroughfare")]
    public string? Thoroughfare { get; init; }

    [JsonPropertyName("Time Zone")]
    public string? TimeZone { get; init; }

    [JsonPropertyName("Zones")]
    public IReadOnlyList<string>? Zones { get; init; }

    [JsonPropertyName("Confidence")]
    public string? Confidence { get; init; }

    [JsonPropertyName("Types")]
    public IReadOnlyList<string>? Types { get; init; }

    [JsonPropertyName("Allows VoIP")]
    public bool? AllowsVoIP { get; init; }

    [JsonPropertyName("Carrier ID")]
    public string? CarrierID { get; init; }

    [JsonPropertyName("Carrier Name")]
    public string? CarrierName { get; init; }

    [JsonPropertyName("Current Radio Technology")]
    public string? CurrentRadioTechnology { get; init; }

    [JsonPropertyName("Mobile Country Code")]
    public string? MobileCountryCode { get; init; }

    [JsonPropertyName("Mobile Network Code")]
    public string? MobileNetworkCode { get; init; }

    [JsonPropertyName("Cellular Technology")]
    public string? CellularTechnology { get; init; }

    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("recurrence")]
    public string? Recurrence { get; init; }

    [JsonPropertyName("process_timestamp")]
    public string? ProcessTimestamp { get; init; }

    [JsonPropertyName("prior_value")]
    public string? PriorValue { get; init; }

    [JsonPropertyName("total_active")]
    public double? TotalActive { get; init; }

    [JsonPropertyName("total_all")]
    public double? TotalAll { get; init; }

    [JsonPropertyName("sorted_active")]
    public string? SortedActive { get; init; }

    [JsonPropertyName("sorted_all")]
    public string? SortedAll { get; init; }

    [JsonPropertyName("status")]
    public string? Status { get; init; }

    [JsonPropertyName("dismissed")]
    public object? Dismissed { get; init; }

    [JsonPropertyName("timer")]
    public object? Timer { get; init; }

    [JsonPropertyName("reminder")]
    public string? Reminder { get; init; }

    [JsonPropertyName("http")]
    public object? Http { get; init; }

    [JsonPropertyName("iot")]
    public object? Iot { get; init; }

    [JsonPropertyName("lan")]
    public object? Lan { get; init; }

    [JsonPropertyName("overall")]
    public object? Overall { get; init; }

    [JsonPropertyName("platform_metadata")]
    public object? PlatformMetadata { get; init; }

    [JsonPropertyName("platform_state")]
    public object? PlatformState { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("Is Charged")]
    public bool? IsCharged { get; init; }
}

public partial record NumericSensorEntity : NumericEntity<NumericSensorEntity, NumericEntityState<NumericSensorAttributes>, NumericSensorAttributes>, ISensorEntityCore
{
    public NumericSensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumericSensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NumericSensorAttributes
{
    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("light_level")]
    public double? LightLevel { get; init; }

    [JsonPropertyName("battery_state")]
    public string? BatteryState { get; init; }

    [JsonPropertyName("marker_high_level")]
    public double? MarkerHighLevel { get; init; }

    [JsonPropertyName("marker_low_level")]
    public double? MarkerLowLevel { get; init; }

    [JsonPropertyName("marker_type")]
    public string? MarkerType { get; init; }

    [JsonPropertyName("Battery Provides Time Remaining")]
    public bool? BatteryProvidesTimeRemaining { get; init; }

    [JsonPropertyName("BatteryHealth")]
    public string? BatteryHealth { get; init; }

    [JsonPropertyName("BatteryHealthCondition")]
    public string? BatteryHealthCondition { get; init; }

    [JsonPropertyName("Current")]
    public double? Current { get; init; }

    [JsonPropertyName("Current Capacity")]
    public double? CurrentCapacity { get; init; }

    [JsonPropertyName("DesignCycleCount")]
    public double? DesignCycleCount { get; init; }

    [JsonPropertyName("Hardware Serial Number")]
    public string? HardwareSerialNumber { get; init; }

    [JsonPropertyName("Is Charging")]
    public bool? IsCharging { get; init; }

    [JsonPropertyName("Is Present")]
    public bool? IsPresent { get; init; }

    [JsonPropertyName("LPM Active")]
    public bool? LPMActive { get; init; }

    [JsonPropertyName("Max Capacity")]
    public double? MaxCapacity { get; init; }

    [JsonPropertyName("Name")]
    public string? Name { get; init; }

    [JsonPropertyName("Optimized Battery Charging Engaged")]
    public bool? OptimizedBatteryChargingEngaged { get; init; }

    [JsonPropertyName("Power Source ID")]
    public double? PowerSourceID { get; init; }

    [JsonPropertyName("Power Source State")]
    public string? PowerSourceState { get; init; }

    [JsonPropertyName("Time to Empty")]
    public double? TimetoEmpty { get; init; }

    [JsonPropertyName("Time to Full Charge")]
    public double? TimetoFullCharge { get; init; }

    [JsonPropertyName("Transport Type")]
    public string? TransportType { get; init; }

    [JsonPropertyName("Type")]
    public string? Type { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("Available")]
    public string? Available { get; init; }

    [JsonPropertyName("Available (Important)")]
    public string? AvailableImportant { get; init; }

    [JsonPropertyName("Available (Opportunistic)")]
    public string? AvailableOpportunistic { get; init; }

    [JsonPropertyName("Total")]
    public string? Total { get; init; }

    [JsonPropertyName("battery_voltage")]
    public double? BatteryVoltage { get; init; }

    [JsonPropertyName("battery_quantity")]
    public double? BatteryQuantity { get; init; }

    [JsonPropertyName("battery_size")]
    public string? BatterySize { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("Is Charged")]
    public bool? IsCharged { get; init; }
}

public partial record SirenEntity : Entity<SirenEntity, EntityState<SirenAttributes>, SirenAttributes>
{
    public SirenEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SirenEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SirenAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SttEntity : Entity<SttEntity, EntityState<SttAttributes>, SttAttributes>
{
    public SttEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SttEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SttAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SunEntity : Entity<SunEntity, EntityState<SunAttributes>, SunAttributes>, ISunEntityCore
{
    public SunEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SunEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SunAttributes
{
    [JsonPropertyName("next_dawn")]
    public string? NextDawn { get; init; }

    [JsonPropertyName("next_dusk")]
    public string? NextDusk { get; init; }

    [JsonPropertyName("next_midnight")]
    public string? NextMidnight { get; init; }

    [JsonPropertyName("next_noon")]
    public string? NextNoon { get; init; }

    [JsonPropertyName("next_rising")]
    public string? NextRising { get; init; }

    [JsonPropertyName("next_setting")]
    public string? NextSetting { get; init; }

    [JsonPropertyName("elevation")]
    public double? Elevation { get; init; }

    [JsonPropertyName("azimuth")]
    public double? Azimuth { get; init; }

    [JsonPropertyName("rising")]
    public bool? Rising { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SwitchEntity : Entity<SwitchEntity, EntityState<SwitchAttributes>, SwitchAttributes>, ISwitchEntityCore
{
    public SwitchEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SwitchEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SwitchAttributes
{
    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("duration")]
    public double? Duration { get; init; }

    [JsonPropertyName("target_brightness")]
    public double? TargetBrightness { get; init; }

    [JsonPropertyName("udp_port")]
    public double? UdpPort { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record TodoEntity : Entity<TodoEntity, EntityState<TodoAttributes>, TodoAttributes>
{
    public TodoEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TodoEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record TodoAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record TtsEntity : Entity<TtsEntity, EntityState<TtsAttributes>, TtsAttributes>
{
    public TtsEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TtsEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record TtsAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record UpdateEntity : Entity<UpdateEntity, EntityState<UpdateAttributes>, UpdateAttributes>, IUpdateEntityCore
{
    public UpdateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public UpdateEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record UpdateAttributes
{
    [JsonPropertyName("auto_update")]
    public bool? AutoUpdate { get; init; }

    [JsonPropertyName("display_precision")]
    public double? DisplayPrecision { get; init; }

    [JsonPropertyName("installed_version")]
    public string? InstalledVersion { get; init; }

    [JsonPropertyName("in_progress")]
    public bool? InProgress { get; init; }

    [JsonPropertyName("latest_version")]
    public string? LatestVersion { get; init; }

    [JsonPropertyName("release_summary")]
    public string? ReleaseSummary { get; init; }

    [JsonPropertyName("release_url")]
    public string? ReleaseUrl { get; init; }

    [JsonPropertyName("skipped_version")]
    public object? SkippedVersion { get; init; }

    [JsonPropertyName("title")]
    public string? Title { get; init; }

    [JsonPropertyName("update_percentage")]
    public object? UpdatePercentage { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }
}

public partial record VacuumEntity : Entity<VacuumEntity, EntityState<VacuumAttributes>, VacuumAttributes>, IVacuumEntityCore
{
    public VacuumEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public VacuumEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record VacuumAttributes
{
    [JsonPropertyName("fan_speed_list")]
    public IReadOnlyList<string>? FanSpeedList { get; init; }

    [JsonPropertyName("battery_level")]
    public double? BatteryLevel { get; init; }

    [JsonPropertyName("battery_icon")]
    public string? BatteryIcon { get; init; }

    [JsonPropertyName("fan_speed")]
    public string? FanSpeed { get; init; }

    [JsonPropertyName("rooms")]
    public object? Rooms { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record WeatherEntity : Entity<WeatherEntity, EntityState<WeatherAttributes>, WeatherAttributes>, IWeatherEntityCore
{
    public WeatherEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public WeatherEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record WeatherAttributes
{
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("dew_point")]
    public double? DewPoint { get; init; }

    [JsonPropertyName("temperature_unit")]
    public string? TemperatureUnit { get; init; }

    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }

    [JsonPropertyName("cloud_coverage")]
    public double? CloudCoverage { get; init; }

    [JsonPropertyName("uv_index")]
    public double? UvIndex { get; init; }

    [JsonPropertyName("pressure")]
    public double? Pressure { get; init; }

    [JsonPropertyName("pressure_unit")]
    public string? PressureUnit { get; init; }

    [JsonPropertyName("wind_bearing")]
    public double? WindBearing { get; init; }

    [JsonPropertyName("wind_speed")]
    public double? WindSpeed { get; init; }

    [JsonPropertyName("wind_speed_unit")]
    public string? WindSpeedUnit { get; init; }

    [JsonPropertyName("visibility_unit")]
    public string? VisibilityUnit { get; init; }

    [JsonPropertyName("precipitation_unit")]
    public string? PrecipitationUnit { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record ZoneEntity : Entity<ZoneEntity, EntityState<ZoneAttributes>, ZoneAttributes>, IZoneEntityCore
{
    public ZoneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ZoneEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ZoneAttributes
{
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("radius")]
    public double? Radius { get; init; }

    [JsonPropertyName("passive")]
    public bool? Passive { get; init; }

    [JsonPropertyName("persons")]
    public IReadOnlyList<string>? Persons { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputBooleanEntity : Entity<InputBooleanEntity, EntityState<InputBooleanAttributes>, InputBooleanAttributes>, IInputBooleanEntityCore
{
    public InputBooleanEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputBooleanEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputBooleanAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public interface IServices
{
    AlarmControlPanelServices AlarmControlPanel { get; }

    AlexaMediaServices AlexaMedia { get; }

    AndroidtvServices Androidtv { get; }

    AutomationServices Automation { get; }

    BondServices Bond { get; }

    ButtonServices Button { get; }

    CalendarServices Calendar { get; }

    CameraServices Camera { get; }

    ClimateServices Climate { get; }

    CloudServices Cloud { get; }

    ConversationServices Conversation { get; }

    CounterServices Counter { get; }

    CoverServices Cover { get; }

    DeviceTrackerServices DeviceTracker { get; }

    EcovacsServices Ecovacs { get; }

    EsphomeServices Esphome { get; }

    FanServices Fan { get; }

    FfmpegServices Ffmpeg { get; }

    FrontendServices Frontend { get; }

    GroupServices Group { get; }

    HassioServices Hassio { get; }

    HomeassistantServices Homeassistant { get; }

    HueServices Hue { get; }

    ImageServices Image { get; }

    InputBooleanServices InputBoolean { get; }

    InputButtonServices InputButton { get; }

    InputDatetimeServices InputDatetime { get; }

    InputNumberServices InputNumber { get; }

    InputSelectServices InputSelect { get; }

    InputTextServices InputText { get; }

    LawnMowerServices LawnMower { get; }

    LightServices Light { get; }

    LockServices Lock { get; }

    LogbookServices Logbook { get; }

    LoggerServices Logger { get; }

    MediaPlayerServices MediaPlayer { get; }

    MqttServices Mqtt { get; }

    NotifyServices Notify { get; }

    NumberServices Number { get; }

    PersistentNotificationServices PersistentNotification { get; }

    PersonServices Person { get; }

    RecorderServices Recorder { get; }

    RemoteServices Remote { get; }

    ReolinkServices Reolink { get; }

    SceneServices Scene { get; }

    ScheduleServices Schedule { get; }

    ScriptServices Script { get; }

    SelectServices Select { get; }

    ShoppingListServices ShoppingList { get; }

    SirenServices Siren { get; }

    SonosServices Sonos { get; }

    SwitchServices Switch { get; }

    SystemLogServices SystemLog { get; }

    TemplateServices Template { get; }

    TimerServices Timer { get; }

    TodoServices Todo { get; }

    TodoistServices Todoist { get; }

    TtsServices Tts { get; }

    UpdateServices Update { get; }

    VacuumServices Vacuum { get; }

    VesyncServices Vesync { get; }

    WeatherServices Weather { get; }

    WebostvServices Webostv { get; }

    ZhaServices Zha { get; }

    ZoneServices Zone { get; }

    ZwaveJsServices ZwaveJs { get; }
}

public partial class Services : IServices
{
    private readonly IHaContext _haContext;
    public Services(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public AlarmControlPanelServices AlarmControlPanel => new(_haContext);
    public AlexaMediaServices AlexaMedia => new(_haContext);
    public AndroidtvServices Androidtv => new(_haContext);
    public AutomationServices Automation => new(_haContext);
    public BondServices Bond => new(_haContext);
    public ButtonServices Button => new(_haContext);
    public CalendarServices Calendar => new(_haContext);
    public CameraServices Camera => new(_haContext);
    public ClimateServices Climate => new(_haContext);
    public CloudServices Cloud => new(_haContext);
    public ConversationServices Conversation => new(_haContext);
    public CounterServices Counter => new(_haContext);
    public CoverServices Cover => new(_haContext);
    public DeviceTrackerServices DeviceTracker => new(_haContext);
    public EcovacsServices Ecovacs => new(_haContext);
    public EsphomeServices Esphome => new(_haContext);
    public FanServices Fan => new(_haContext);
    public FfmpegServices Ffmpeg => new(_haContext);
    public FrontendServices Frontend => new(_haContext);
    public GroupServices Group => new(_haContext);
    public HassioServices Hassio => new(_haContext);
    public HomeassistantServices Homeassistant => new(_haContext);
    public HueServices Hue => new(_haContext);
    public ImageServices Image => new(_haContext);
    public InputBooleanServices InputBoolean => new(_haContext);
    public InputButtonServices InputButton => new(_haContext);
    public InputDatetimeServices InputDatetime => new(_haContext);
    public InputNumberServices InputNumber => new(_haContext);
    public InputSelectServices InputSelect => new(_haContext);
    public InputTextServices InputText => new(_haContext);
    public LawnMowerServices LawnMower => new(_haContext);
    public LightServices Light => new(_haContext);
    public LockServices Lock => new(_haContext);
    public LogbookServices Logbook => new(_haContext);
    public LoggerServices Logger => new(_haContext);
    public MediaPlayerServices MediaPlayer => new(_haContext);
    public MqttServices Mqtt => new(_haContext);
    public NotifyServices Notify => new(_haContext);
    public NumberServices Number => new(_haContext);
    public PersistentNotificationServices PersistentNotification => new(_haContext);
    public PersonServices Person => new(_haContext);
    public RecorderServices Recorder => new(_haContext);
    public RemoteServices Remote => new(_haContext);
    public ReolinkServices Reolink => new(_haContext);
    public SceneServices Scene => new(_haContext);
    public ScheduleServices Schedule => new(_haContext);
    public ScriptServices Script => new(_haContext);
    public SelectServices Select => new(_haContext);
    public ShoppingListServices ShoppingList => new(_haContext);
    public SirenServices Siren => new(_haContext);
    public SonosServices Sonos => new(_haContext);
    public SwitchServices Switch => new(_haContext);
    public SystemLogServices SystemLog => new(_haContext);
    public TemplateServices Template => new(_haContext);
    public TimerServices Timer => new(_haContext);
    public TodoServices Todo => new(_haContext);
    public TodoistServices Todoist => new(_haContext);
    public TtsServices Tts => new(_haContext);
    public UpdateServices Update => new(_haContext);
    public VacuumServices Vacuum => new(_haContext);
    public VesyncServices Vesync => new(_haContext);
    public WeatherServices Weather => new(_haContext);
    public WebostvServices Webostv => new(_haContext);
    public ZhaServices Zha => new(_haContext);
    public ZoneServices Zone => new(_haContext);
    public ZwaveJsServices ZwaveJs => new(_haContext);
}

public partial class AlarmControlPanelServices
{
    private readonly IHaContext _haContext;
    public AlarmControlPanelServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmAway(ServiceTarget target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, data);
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmAway(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmCustomBypass(ServiceTarget target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmCustomBypass(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmHome(ServiceTarget target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, data);
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmHome(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmNight(ServiceTarget target, AlarmControlPanelAlarmArmNightParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, data);
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmNight(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmVacation(ServiceTarget target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, data);
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmVacation(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmDisarm(ServiceTarget target, AlarmControlPanelAlarmDisarmParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, data);
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public void AlarmDisarm(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Trigger the alarm manually.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmTrigger(ServiceTarget target, AlarmControlPanelAlarmTriggerParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, data);
    }

    ///<summary>Trigger the alarm manually.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmTrigger(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }
}

public partial record AlarmControlPanelAlarmArmAwayParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmCustomBypassParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmHomeParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmNightParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmVacationParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmDisarmParameters
{
    ///<summary>Code to disarm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmTriggerParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class AlexaMediaServices
{
    private readonly IHaContext _haContext;
    public AlexaMediaServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Force account to logout. Used mainly for debugging.</summary>
    public void ForceLogout(AlexaMediaForceLogoutParameters data)
    {
        _haContext.CallService("alexa_media", "force_logout", null, data);
    }

    ///<summary>Force account to logout. Used mainly for debugging.</summary>
    ///<param name="email">Accounts to clear. Empty will clear all. eg: my_email@alexa.com</param>
    public void ForceLogout(object? email = null)
    {
        _haContext.CallService("alexa_media", "force_logout", null, new AlexaMediaForceLogoutParameters { Email = email });
    }

    ///<summary>Restore previous volume level on Alexa media player device</summary>
    public void RestoreVolume(AlexaMediaRestoreVolumeParameters data)
    {
        _haContext.CallService("alexa_media", "restore_volume", null, data);
    }

    ///<summary>Restore previous volume level on Alexa media player device</summary>
    ///<param name="entityId">Entity to restore the previous volume level on</param>
    public void RestoreVolume(string entityId)
    {
        _haContext.CallService("alexa_media", "restore_volume", null, new AlexaMediaRestoreVolumeParameters { EntityId = entityId });
    }

    ///<summary>Forces update of last_called echo device for each Alexa account.</summary>
    public void UpdateLastCalled(AlexaMediaUpdateLastCalledParameters data)
    {
        _haContext.CallService("alexa_media", "update_last_called", null, data);
    }

    ///<summary>Forces update of last_called echo device for each Alexa account.</summary>
    ///<param name="email">List of Alexa accounts to update. If empty, will update all known accounts. eg: my_email@alexa.com</param>
    public void UpdateLastCalled(object? email = null)
    {
        _haContext.CallService("alexa_media", "update_last_called", null, new AlexaMediaUpdateLastCalledParameters { Email = email });
    }
}

public partial record AlexaMediaForceLogoutParameters
{
    ///<summary>Accounts to clear. Empty will clear all. eg: my_email@alexa.com</summary>
    [JsonPropertyName("email")]
    public object? Email { get; init; }
}

public partial record AlexaMediaRestoreVolumeParameters
{
    ///<summary>Entity to restore the previous volume level on</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record AlexaMediaUpdateLastCalledParameters
{
    ///<summary>List of Alexa accounts to update. If empty, will update all known accounts. eg: my_email@alexa.com</summary>
    [JsonPropertyName("email")]
    public object? Email { get; init; }
}

public partial class AndroidtvServices
{
    private readonly IHaContext _haContext;
    public AndroidtvServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends an ADB command to an Android / Fire TV device.</summary>
    ///<param name="target">The target for this service call</param>
    public void AdbCommand(ServiceTarget target, AndroidtvAdbCommandParameters data)
    {
        _haContext.CallService("androidtv", "adb_command", target, data);
    }

    ///<summary>Sends an ADB command to an Android / Fire TV device.</summary>
    ///<param name="command">Either a key command or an ADB shell command. eg: HOME</param>
    public void AdbCommand(ServiceTarget target, string command)
    {
        _haContext.CallService("androidtv", "adb_command", target, new AndroidtvAdbCommandParameters { Command = command });
    }

    ///<summary>Downloads a file from your Android / Fire TV device to your Home Assistant instance.</summary>
    ///<param name="target">The target for this service call</param>
    public void Download(ServiceTarget target, AndroidtvDownloadParameters data)
    {
        _haContext.CallService("androidtv", "download", target, data);
    }

    ///<summary>Downloads a file from your Android / Fire TV device to your Home Assistant instance.</summary>
    ///<param name="devicePath">The filepath on the Android / Fire TV device. eg: /storage/emulated/0/Download/example.txt</param>
    ///<param name="localPath">The filepath on your Home Assistant instance. eg: /config/www/example.txt</param>
    public void Download(ServiceTarget target, string devicePath, string localPath)
    {
        _haContext.CallService("androidtv", "download", target, new AndroidtvDownloadParameters { DevicePath = devicePath, LocalPath = localPath });
    }

    ///<summary>Translates a key press on a remote into ADB &apos;sendevent&apos; commands. You must press one button on the remote within 8 seconds of performing this action.</summary>
    ///<param name="target">The target for this service call</param>
    public void LearnSendevent(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("androidtv", "learn_sendevent", target, data);
    }

    ///<summary>Uploads a file from your Home Assistant instance to an Android / Fire TV device.</summary>
    ///<param name="target">The target for this service call</param>
    public void Upload(ServiceTarget target, AndroidtvUploadParameters data)
    {
        _haContext.CallService("androidtv", "upload", target, data);
    }

    ///<summary>Uploads a file from your Home Assistant instance to an Android / Fire TV device.</summary>
    ///<param name="devicePath">The filepath on the Android / Fire TV device. eg: /storage/emulated/0/Download/example.txt</param>
    ///<param name="localPath">The filepath on your Home Assistant instance. eg: /config/www/example.txt</param>
    public void Upload(ServiceTarget target, string devicePath, string localPath)
    {
        _haContext.CallService("androidtv", "upload", target, new AndroidtvUploadParameters { DevicePath = devicePath, LocalPath = localPath });
    }
}

public partial record AndroidtvAdbCommandParameters
{
    ///<summary>Either a key command or an ADB shell command. eg: HOME</summary>
    [JsonPropertyName("command")]
    public string? Command { get; init; }
}

public partial record AndroidtvDownloadParameters
{
    ///<summary>The filepath on the Android / Fire TV device. eg: /storage/emulated/0/Download/example.txt</summary>
    [JsonPropertyName("device_path")]
    public string? DevicePath { get; init; }

    ///<summary>The filepath on your Home Assistant instance. eg: /config/www/example.txt</summary>
    [JsonPropertyName("local_path")]
    public string? LocalPath { get; init; }
}

public partial record AndroidtvUploadParameters
{
    ///<summary>The filepath on the Android / Fire TV device. eg: /storage/emulated/0/Download/example.txt</summary>
    [JsonPropertyName("device_path")]
    public string? DevicePath { get; init; }

    ///<summary>The filepath on your Home Assistant instance. eg: /config/www/example.txt</summary>
    [JsonPropertyName("local_path")]
    public string? LocalPath { get; init; }
}

public partial class AutomationServices
{
    private readonly IHaContext _haContext;
    public AutomationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads the automation configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("automation", "reload", null, data);
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("automation", "toggle", target, data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Trigger(ServiceTarget target, AutomationTriggerParameters data)
    {
        _haContext.CallService("automation", "trigger", target, data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public void Trigger(ServiceTarget target, bool? skipCondition = null)
    {
        _haContext.CallService("automation", "trigger", target, new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, AutomationTurnOffParameters data)
    {
        _haContext.CallService("automation", "turn_off", target, data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="stopActions">Stops currently running actions.</param>
    public void TurnOff(ServiceTarget target, bool? stopActions = null)
    {
        _haContext.CallService("automation", "turn_off", target, new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("automation", "turn_on", target, data);
    }
}

public partial record AutomationTriggerParameters
{
    ///<summary>Defines whether or not the conditions will be skipped.</summary>
    [JsonPropertyName("skip_condition")]
    public bool? SkipCondition { get; init; }
}

public partial record AutomationTurnOffParameters
{
    ///<summary>Stops currently running actions.</summary>
    [JsonPropertyName("stop_actions")]
    public bool? StopActions { get; init; }
}

public partial class BondServices
{
    private readonly IHaContext _haContext;
    public BondServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the tracked fan speed for a bond fan.</summary>
    public void SetFanSpeedTrackedState(BondSetFanSpeedTrackedStateParameters data)
    {
        _haContext.CallService("bond", "set_fan_speed_tracked_state", null, data);
    }

    ///<summary>Sets the tracked fan speed for a bond fan.</summary>
    ///<param name="entityId">Name(s) of entities to set the tracked fan speed. eg: fan.living_room_fan</param>
    ///<param name="speed">Fan Speed as %. eg: 50</param>
    public void SetFanSpeedTrackedState(string entityId, long speed)
    {
        _haContext.CallService("bond", "set_fan_speed_tracked_state", null, new BondSetFanSpeedTrackedStateParameters { EntityId = entityId, Speed = speed });
    }

    ///<summary>Sets the tracked brightness state of a bond light.</summary>
    public void SetLightBrightnessTrackedState(BondSetLightBrightnessTrackedStateParameters data)
    {
        _haContext.CallService("bond", "set_light_brightness_tracked_state", null, data);
    }

    ///<summary>Sets the tracked brightness state of a bond light.</summary>
    ///<param name="entityId">Name(s) of entities to set the tracked brightness state of. eg: light.living_room_lights</param>
    ///<param name="brightness">Brightness. eg: 50</param>
    public void SetLightBrightnessTrackedState(string entityId, long brightness)
    {
        _haContext.CallService("bond", "set_light_brightness_tracked_state", null, new BondSetLightBrightnessTrackedStateParameters { EntityId = entityId, Brightness = brightness });
    }

    ///<summary>Sets the tracked power state of a bond light.</summary>
    public void SetLightPowerTrackedState(BondSetLightPowerTrackedStateParameters data)
    {
        _haContext.CallService("bond", "set_light_power_tracked_state", null, data);
    }

    ///<summary>Sets the tracked power state of a bond light.</summary>
    ///<param name="entityId">Name(s) of entities to set the tracked power state of. eg: light.living_room_lights</param>
    ///<param name="powerState">Power state. eg: True</param>
    public void SetLightPowerTrackedState(string entityId, bool powerState)
    {
        _haContext.CallService("bond", "set_light_power_tracked_state", null, new BondSetLightPowerTrackedStateParameters { EntityId = entityId, PowerState = powerState });
    }

    ///<summary>Sets the tracked power state of a bond switch.</summary>
    public void SetSwitchPowerTrackedState(BondSetSwitchPowerTrackedStateParameters data)
    {
        _haContext.CallService("bond", "set_switch_power_tracked_state", null, data);
    }

    ///<summary>Sets the tracked power state of a bond switch.</summary>
    ///<param name="entityId">Name(s) of entities to set the tracked power state of. eg: switch.whatever</param>
    ///<param name="powerState">Power state. eg: True</param>
    public void SetSwitchPowerTrackedState(string entityId, bool powerState)
    {
        _haContext.CallService("bond", "set_switch_power_tracked_state", null, new BondSetSwitchPowerTrackedStateParameters { EntityId = entityId, PowerState = powerState });
    }

    ///<summary>Start decreasing the brightness of the light. (deprecated).</summary>
    ///<param name="target">The target for this service call</param>
    public void StartDecreasingBrightness(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("bond", "start_decreasing_brightness", target, data);
    }

    ///<summary>Start increasing the brightness of the light. (deprecated).</summary>
    ///<param name="target">The target for this service call</param>
    public void StartIncreasingBrightness(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("bond", "start_increasing_brightness", target, data);
    }

    ///<summary>Stop any in-progress action and empty the queue. (deprecated).</summary>
    ///<param name="target">The target for this service call</param>
    public void Stop(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("bond", "stop", target, data);
    }
}

public partial record BondSetFanSpeedTrackedStateParameters
{
    ///<summary>Name(s) of entities to set the tracked fan speed. eg: fan.living_room_fan</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Fan Speed as %. eg: 50</summary>
    [JsonPropertyName("speed")]
    public long? Speed { get; init; }
}

public partial record BondSetLightBrightnessTrackedStateParameters
{
    ///<summary>Name(s) of entities to set the tracked brightness state of. eg: light.living_room_lights</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Brightness. eg: 50</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }
}

public partial record BondSetLightPowerTrackedStateParameters
{
    ///<summary>Name(s) of entities to set the tracked power state of. eg: light.living_room_lights</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Power state. eg: True</summary>
    [JsonPropertyName("power_state")]
    public bool? PowerState { get; init; }
}

public partial record BondSetSwitchPowerTrackedStateParameters
{
    ///<summary>Name(s) of entities to set the tracked power state of. eg: switch.whatever</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Power state. eg: True</summary>
    [JsonPropertyName("power_state")]
    public bool? PowerState { get; init; }
}

public partial class ButtonServices
{
    private readonly IHaContext _haContext;
    public ButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Press the button entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("button", "press", target, data);
    }
}

public partial class CalendarServices
{
    private readonly IHaContext _haContext;
    public CalendarServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    public void CreateEvent(ServiceTarget target, CalendarCreateEventParameters data)
    {
        _haContext.CallService("calendar", "create_event", target, data);
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public void CreateEvent(ServiceTarget target, string summary, string? description = null, DateTime? startDateTime = null, DateTime? endDateTime = null, DateOnly? startDate = null, DateOnly? endDate = null, object? @in = null, string? location = null)
    {
        _haContext.CallService("calendar", "create_event", target, new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetEvents(ServiceTarget target, CalendarGetEventsParameters data)
    {
        _haContext.CallService("calendar", "get_events", target, data);
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with Duration. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from Start time for the specified duration.</param>
    public void GetEvents(ServiceTarget target, DateTime? startDateTime = null, DateTime? endDateTime = null, object? duration = null)
    {
        _haContext.CallService("calendar", "get_events", target, new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> GetEventsAsync(ServiceTarget target, CalendarGetEventsParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("calendar", "get_events", target, data);
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with Duration. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from Start time for the specified duration.</param>
    public Task<JsonElement?> GetEventsAsync(ServiceTarget target, DateTime? startDateTime = null, DateTime? endDateTime = null, object? duration = null)
    {
        return _haContext.CallServiceWithResponseAsync("calendar", "get_events", target, new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }
}

public partial record CalendarCreateEventParameters
{
    ///<summary>Defines the short summary or subject for the event. eg: Department Party</summary>
    [JsonPropertyName("summary")]
    public string? Summary { get; init; }

    ///<summary>A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }

    ///<summary>The date and time the event should start. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public DateTime? StartDateTime { get; init; }

    ///<summary>The date and time the event should end. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public DateTime? EndDateTime { get; init; }

    ///<summary>The date the all-day event should start. eg: 2022-03-22</summary>
    [JsonPropertyName("start_date")]
    public DateOnly? StartDate { get; init; }

    ///<summary>The date the all-day event should end (exclusive). eg: 2022-03-23</summary>
    [JsonPropertyName("end_date")]
    public DateOnly? EndDate { get; init; }

    ///<summary>Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</summary>
    [JsonPropertyName("in")]
    public object? In { get; init; }

    ///<summary>The location of the event. eg: Conference Room - F123, Bldg. 002</summary>
    [JsonPropertyName("location")]
    public string? Location { get; init; }
}

public partial record CalendarGetEventsParameters
{
    ///<summary>Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public DateTime? StartDateTime { get; init; }

    ///<summary>Returns active events before this time (exclusive). Cannot be used with Duration. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public DateTime? EndDateTime { get; init; }

    ///<summary>Returns active events from Start time for the specified duration.</summary>
    [JsonPropertyName("duration")]
    public object? Duration { get; init; }
}

public partial class CameraServices
{
    private readonly IHaContext _haContext;
    public CameraServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Disables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableMotionDetection(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "disable_motion_detection", target, data);
    }

    ///<summary>Enables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableMotionDetection(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "enable_motion_detection", target, data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayStream(ServiceTarget target, CameraPlayStreamParameters data)
    {
        _haContext.CallService("camera", "play_stream", target, data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public void PlayStream(ServiceTarget target, string mediaPlayer, object? format = null)
    {
        _haContext.CallService("camera", "play_stream", target, new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Record(ServiceTarget target, CameraRecordParameters data)
    {
        _haContext.CallService("camera", "record", target, data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="filename">Full path to filename. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public void Record(ServiceTarget target, string filename, double? duration = null, double? lookback = null)
    {
        _haContext.CallService("camera", "record", target, new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void Snapshot(ServiceTarget target, CameraSnapshotParameters data)
    {
        _haContext.CallService("camera", "snapshot", target, data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="filename">Full path to filename. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public void Snapshot(ServiceTarget target, string filename)
    {
        _haContext.CallService("camera", "snapshot", target, new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "turn_off", target, data);
    }

    ///<summary>Turns on the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "turn_on", target, data);
    }
}

public partial record CameraPlayStreamParameters
{
    ///<summary>Media players to stream to.</summary>
    [JsonPropertyName("media_player")]
    public string? MediaPlayer { get; init; }

    ///<summary>Stream format supported by the media player.</summary>
    [JsonPropertyName("format")]
    public object? Format { get; init; }
}

public partial record CameraRecordParameters
{
    ///<summary>Full path to filename. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }

    ///<summary>Planned duration of the recording. The actual duration may vary.</summary>
    [JsonPropertyName("duration")]
    public double? Duration { get; init; }

    ///<summary>Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</summary>
    [JsonPropertyName("lookback")]
    public double? Lookback { get; init; }
}

public partial record CameraSnapshotParameters
{
    ///<summary>Full path to filename. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }
}

public partial class ClimateServices
{
    private readonly IHaContext _haContext;
    public ClimateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAuxHeat(ServiceTarget target, ClimateSetAuxHeatParameters data)
    {
        _haContext.CallService("climate", "set_aux_heat", target, data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public void SetAuxHeat(ServiceTarget target, bool auxHeat)
    {
        _haContext.CallService("climate", "set_aux_heat", target, new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanMode(ServiceTarget target, ClimateSetFanModeParameters data)
    {
        _haContext.CallService("climate", "set_fan_mode", target, data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public void SetFanMode(ServiceTarget target, string fanMode)
    {
        _haContext.CallService("climate", "set_fan_mode", target, new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, ClimateSetHumidityParameters data)
    {
        _haContext.CallService("climate", "set_humidity", target, data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="humidity">Target humidity.</param>
    public void SetHumidity(ServiceTarget target, double humidity)
    {
        _haContext.CallService("climate", "set_humidity", target, new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHvacMode(ServiceTarget target, ClimateSetHvacModeParameters data)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetHvacMode(ServiceTarget target, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, ClimateSetPresetModeParameters data)
    {
        _haContext.CallService("climate", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("climate", "set_preset_mode", target, new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSwingHorizontalMode(ServiceTarget target, ClimateSetSwingHorizontalModeParameters data)
    {
        _haContext.CallService("climate", "set_swing_horizontal_mode", target, data);
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="swingHorizontalMode">Horizontal swing operation mode. eg: on</param>
    public void SetSwingHorizontalMode(ServiceTarget target, string swingHorizontalMode)
    {
        _haContext.CallService("climate", "set_swing_horizontal_mode", target, new ClimateSetSwingHorizontalModeParameters { SwingHorizontalMode = swingHorizontalMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSwingMode(ServiceTarget target, ClimateSetSwingModeParameters data)
    {
        _haContext.CallService("climate", "set_swing_mode", target, data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="swingMode">Swing operation mode. eg: on</param>
    public void SetSwingMode(ServiceTarget target, string swingMode)
    {
        _haContext.CallService("climate", "set_swing_mode", target, new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, ClimateSetTemperatureParameters data)
    {
        _haContext.CallService("climate", "set_temperature", target, data);
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="temperature">The temperature setpoint.</param>
    ///<param name="targetTempHigh">The max temperature setpoint.</param>
    ///<param name="targetTempLow">The min temperature setpoint.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetTemperature(ServiceTarget target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_temperature", target, new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("climate", "toggle", target, data);
    }

    ///<summary>Turns climate device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("climate", "turn_off", target, data);
    }

    ///<summary>Turns climate device on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("climate", "turn_on", target, data);
    }
}

public partial record ClimateSetAuxHeatParameters
{
    ///<summary>New value of auxiliary heater.</summary>
    [JsonPropertyName("aux_heat")]
    public bool? AuxHeat { get; init; }
}

public partial record ClimateSetFanModeParameters
{
    ///<summary>Fan operation mode. eg: low</summary>
    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }
}

public partial record ClimateSetHumidityParameters
{
    ///<summary>Target humidity.</summary>
    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }
}

public partial record ClimateSetHvacModeParameters
{
    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial record ClimateSetPresetModeParameters
{
    ///<summary>Preset mode. eg: away</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record ClimateSetSwingHorizontalModeParameters
{
    ///<summary>Horizontal swing operation mode. eg: on</summary>
    [JsonPropertyName("swing_horizontal_mode")]
    public string? SwingHorizontalMode { get; init; }
}

public partial record ClimateSetSwingModeParameters
{
    ///<summary>Swing operation mode. eg: on</summary>
    [JsonPropertyName("swing_mode")]
    public string? SwingMode { get; init; }
}

public partial record ClimateSetTemperatureParameters
{
    ///<summary>The temperature setpoint.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>The max temperature setpoint.</summary>
    [JsonPropertyName("target_temp_high")]
    public double? TargetTempHigh { get; init; }

    ///<summary>The min temperature setpoint.</summary>
    [JsonPropertyName("target_temp_low")]
    public double? TargetTempLow { get; init; }

    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial class CloudServices
{
    private readonly IHaContext _haContext;
    public CloudServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Makes the instance UI accessible from outside of the local network by enabling your Home Assistant Cloud connection.</summary>
    public void RemoteConnect(object? data = null)
    {
        _haContext.CallService("cloud", "remote_connect", null, data);
    }

    ///<summary>Disconnects the instance UI from Home Assistant Cloud. This disables access to it from outside your local network.</summary>
    public void RemoteDisconnect(object? data = null)
    {
        _haContext.CallService("cloud", "remote_disconnect", null, data);
    }
}

public partial class ConversationServices
{
    private readonly IHaContext _haContext;
    public ConversationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    public void Process(ConversationProcessParameters data)
    {
        _haContext.CallService("conversation", "process", null, data);
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    ///<param name="text">Transcribed text input. eg: Turn all lights on</param>
    ///<param name="language">Language of text. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</param>
    ///<param name="conversationId">ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</param>
    public void Process(string text, string? language = null, object? agentId = null, string? conversationId = null)
    {
        _haContext.CallService("conversation", "process", null, new ConversationProcessParameters { Text = text, Language = language, AgentId = agentId, ConversationId = conversationId });
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    public Task<JsonElement?> ProcessAsync(ConversationProcessParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("conversation", "process", null, data);
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    ///<param name="text">Transcribed text input. eg: Turn all lights on</param>
    ///<param name="language">Language of text. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</param>
    ///<param name="conversationId">ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</param>
    public Task<JsonElement?> ProcessAsync(string text, string? language = null, object? agentId = null, string? conversationId = null)
    {
        return _haContext.CallServiceWithResponseAsync("conversation", "process", null, new ConversationProcessParameters { Text = text, Language = language, AgentId = agentId, ConversationId = conversationId });
    }

    ///<summary>Reloads the intent configuration.</summary>
    public void Reload(ConversationReloadParameters data)
    {
        _haContext.CallService("conversation", "reload", null, data);
    }

    ///<summary>Reloads the intent configuration.</summary>
    ///<param name="language">Language to clear cached intents for. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to reload. eg: homeassistant</param>
    public void Reload(string? language = null, object? agentId = null)
    {
        _haContext.CallService("conversation", "reload", null, new ConversationReloadParameters { Language = language, AgentId = agentId });
    }
}

public partial record ConversationProcessParameters
{
    ///<summary>Transcribed text input. eg: Turn all lights on</summary>
    [JsonPropertyName("text")]
    public string? Text { get; init; }

    ///<summary>Language of text. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }

    ///<summary>ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</summary>
    [JsonPropertyName("conversation_id")]
    public string? ConversationId { get; init; }
}

public partial record ConversationReloadParameters
{
    ///<summary>Language to clear cached intents for. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to reload. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }
}

public partial class CounterServices
{
    private readonly IHaContext _haContext;
    public CounterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrements a counter by its step size.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("counter", "decrement", target, data);
    }

    ///<summary>Increments a counter by its step size.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("counter", "increment", target, data);
    }

    ///<summary>Resets a counter to its initial value.</summary>
    ///<param name="target">The target for this service call</param>
    public void Reset(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("counter", "reset", target, data);
    }

    ///<summary>Sets the counter to a specific value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, CounterSetValueParameters data)
    {
        _haContext.CallService("counter", "set_value", target, data);
    }

    ///<summary>Sets the counter to a specific value.</summary>
    ///<param name="value">The new counter value the entity should be set to.</param>
    public void SetValue(ServiceTarget target, double value)
    {
        _haContext.CallService("counter", "set_value", target, new CounterSetValueParameters { Value = value });
    }
}

public partial record CounterSetValueParameters
{
    ///<summary>The new counter value the entity should be set to.</summary>
    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial class CoverServices
{
    private readonly IHaContext _haContext;
    public CoverServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Closes a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCover(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "close_cover", target, data);
    }

    ///<summary>Tilts a cover to close.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCoverTilt(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "close_cover_tilt", target, data);
    }

    ///<summary>Opens a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCover(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "open_cover", target, data);
    }

    ///<summary>Tilts a cover open.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCoverTilt(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "open_cover_tilt", target, data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverPosition(ServiceTarget target, CoverSetCoverPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_position", target, data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="position">Target position.</param>
    public void SetCoverPosition(ServiceTarget target, double position)
    {
        _haContext.CallService("cover", "set_cover_position", target, new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverTiltPosition(ServiceTarget target, CoverSetCoverTiltPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public void SetCoverTiltPosition(ServiceTarget target, double tiltPosition)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Stops the cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCover(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "stop_cover", target, data);
    }

    ///<summary>Stops a tilting cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCoverTilt(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "stop_cover_tilt", target, data);
    }

    ///<summary>Toggles a cover open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "toggle", target, data);
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void ToggleCoverTilt(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "toggle_cover_tilt", target, data);
    }
}

public partial record CoverSetCoverPositionParameters
{
    ///<summary>Target position.</summary>
    [JsonPropertyName("position")]
    public double? Position { get; init; }
}

public partial record CoverSetCoverTiltPositionParameters
{
    ///<summary>Target tilt positition.</summary>
    [JsonPropertyName("tilt_position")]
    public double? TiltPosition { get; init; }
}

public partial class DeviceTrackerServices
{
    private readonly IHaContext _haContext;
    public DeviceTrackerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Manually update the records of a seen legacy device tracker in the known_devices.yaml file.</summary>
    public void See(DeviceTrackerSeeParameters data)
    {
        _haContext.CallService("device_tracker", "see", null, data);
    }

    ///<summary>Manually update the records of a seen legacy device tracker in the known_devices.yaml file.</summary>
    ///<param name="mac">MAC address of the device. eg: FF:FF:FF:FF:FF:FF</param>
    ///<param name="devId">ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</param>
    ///<param name="hostName">Hostname of the device. eg: Dave</param>
    ///<param name="locationName">Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</param>
    ///<param name="gps">GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</param>
    ///<param name="gpsAccuracy">Accuracy of the GPS coordinates.</param>
    ///<param name="battery">Battery level of the device.</param>
    public void See(string? mac = null, string? devId = null, string? hostName = null, string? locationName = null, object? gps = null, double? gpsAccuracy = null, double? battery = null)
    {
        _haContext.CallService("device_tracker", "see", null, new DeviceTrackerSeeParameters { Mac = mac, DevId = devId, HostName = hostName, LocationName = locationName, Gps = gps, GpsAccuracy = gpsAccuracy, Battery = battery });
    }
}

public partial record DeviceTrackerSeeParameters
{
    ///<summary>MAC address of the device. eg: FF:FF:FF:FF:FF:FF</summary>
    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    ///<summary>ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</summary>
    [JsonPropertyName("dev_id")]
    public string? DevId { get; init; }

    ///<summary>Hostname of the device. eg: Dave</summary>
    [JsonPropertyName("host_name")]
    public string? HostName { get; init; }

    ///<summary>Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</summary>
    [JsonPropertyName("location_name")]
    public string? LocationName { get; init; }

    ///<summary>GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</summary>
    [JsonPropertyName("gps")]
    public object? Gps { get; init; }

    ///<summary>Accuracy of the GPS coordinates.</summary>
    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    ///<summary>Battery level of the device.</summary>
    [JsonPropertyName("battery")]
    public double? Battery { get; init; }
}

public partial class EcovacsServices
{
    private readonly IHaContext _haContext;
    public EcovacsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Get the raw response for the positions of the chargers and the device itself.</summary>
    ///<param name="target">The target for this service call</param>
    public void RawGetPositions(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("ecovacs", "raw_get_positions", target, data);
    }

    ///<summary>Get the raw response for the positions of the chargers and the device itself.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> RawGetPositionsAsync(ServiceTarget target, object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("ecovacs", "raw_get_positions", target, data);
    }
}

public partial class EsphomeServices
{
    private readonly IHaContext _haContext;
    public EsphomeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Calls the service wipe_devices_from_gdo_memory of the node ratgdov25i-0a070c</summary>
    public void Ratgdov25i0a070cWipeDevicesFromGdoMemory(EsphomeRatgdov25i0a070cWipeDevicesFromGdoMemoryParameters data)
    {
        _haContext.CallService("esphome", "ratgdov25i_0a070c_wipe_devices_from_gdo_memory", null, data);
    }

    ///<summary>Calls the service wipe_devices_from_gdo_memory of the node ratgdov25i-0a070c</summary>
    ///<param name="devicesToWipe"> eg: Example text</param>
    public void Ratgdov25i0a070cWipeDevicesFromGdoMemory(string devicesToWipe)
    {
        _haContext.CallService("esphome", "ratgdov25i_0a070c_wipe_devices_from_gdo_memory", null, new EsphomeRatgdov25i0a070cWipeDevicesFromGdoMemoryParameters { DevicesToWipe = devicesToWipe });
    }
}

public partial record EsphomeRatgdov25i0a070cWipeDevicesFromGdoMemoryParameters
{
    ///<summary> eg: Example text</summary>
    [JsonPropertyName("devices_to_wipe")]
    public string? DevicesToWipe { get; init; }
}

public partial class FanServices
{
    private readonly IHaContext _haContext;
    public FanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decreases the speed of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void DecreaseSpeed(ServiceTarget target, FanDecreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "decrease_speed", target, data);
    }

    ///<summary>Decreases the speed of a fan.</summary>
    ///<param name="percentageStep">Percentage step by which the speed should be decreased.</param>
    public void DecreaseSpeed(ServiceTarget target, double? percentageStep = null)
    {
        _haContext.CallService("fan", "decrease_speed", target, new FanDecreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Increases the speed of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void IncreaseSpeed(ServiceTarget target, FanIncreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "increase_speed", target, data);
    }

    ///<summary>Increases the speed of a fan.</summary>
    ///<param name="percentageStep">Percentage step by which the speed should be increased.</param>
    public void IncreaseSpeed(ServiceTarget target, double? percentageStep = null)
    {
        _haContext.CallService("fan", "increase_speed", target, new FanIncreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Controls the oscillation of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void Oscillate(ServiceTarget target, FanOscillateParameters data)
    {
        _haContext.CallService("fan", "oscillate", target, data);
    }

    ///<summary>Controls the oscillation of a fan.</summary>
    ///<param name="oscillating">Turns oscillation on/off.</param>
    public void Oscillate(ServiceTarget target, bool oscillating)
    {
        _haContext.CallService("fan", "oscillate", target, new FanOscillateParameters { Oscillating = oscillating });
    }

    ///<summary>Sets a fan&apos;s rotation direction.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDirection(ServiceTarget target, FanSetDirectionParameters data)
    {
        _haContext.CallService("fan", "set_direction", target, data);
    }

    ///<summary>Sets a fan&apos;s rotation direction.</summary>
    ///<param name="direction">Direction of the fan rotation.</param>
    public void SetDirection(ServiceTarget target, object direction)
    {
        _haContext.CallService("fan", "set_direction", target, new FanSetDirectionParameters { Direction = direction });
    }

    ///<summary>Sets the speed of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPercentage(ServiceTarget target, FanSetPercentageParameters data)
    {
        _haContext.CallService("fan", "set_percentage", target, data);
    }

    ///<summary>Sets the speed of a fan.</summary>
    ///<param name="percentage">Speed of the fan.</param>
    public void SetPercentage(ServiceTarget target, double percentage)
    {
        _haContext.CallService("fan", "set_percentage", target, new FanSetPercentageParameters { Percentage = percentage });
    }

    ///<summary>Sets preset fan mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, FanSetPresetModeParameters data)
    {
        _haContext.CallService("fan", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset fan mode.</summary>
    ///<param name="presetMode">Preset fan mode. eg: auto</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("fan", "set_preset_mode", target, new FanSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Toggles a fan on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("fan", "toggle", target, data);
    }

    ///<summary>Turns fan off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("fan", "turn_off", target, data);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, FanTurnOnParameters data)
    {
        _haContext.CallService("fan", "turn_on", target, data);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="percentage">Speed of the fan.</param>
    ///<param name="presetMode">Preset fan mode. eg: auto</param>
    public void TurnOn(ServiceTarget target, double? percentage = null, string? presetMode = null)
    {
        _haContext.CallService("fan", "turn_on", target, new FanTurnOnParameters { Percentage = percentage, PresetMode = presetMode });
    }
}

public partial record FanDecreaseSpeedParameters
{
    ///<summary>Percentage step by which the speed should be decreased.</summary>
    [JsonPropertyName("percentage_step")]
    public double? PercentageStep { get; init; }
}

public partial record FanIncreaseSpeedParameters
{
    ///<summary>Percentage step by which the speed should be increased.</summary>
    [JsonPropertyName("percentage_step")]
    public double? PercentageStep { get; init; }
}

public partial record FanOscillateParameters
{
    ///<summary>Turns oscillation on/off.</summary>
    [JsonPropertyName("oscillating")]
    public bool? Oscillating { get; init; }
}

public partial record FanSetDirectionParameters
{
    ///<summary>Direction of the fan rotation.</summary>
    [JsonPropertyName("direction")]
    public object? Direction { get; init; }
}

public partial record FanSetPercentageParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public double? Percentage { get; init; }
}

public partial record FanSetPresetModeParameters
{
    ///<summary>Preset fan mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record FanTurnOnParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public double? Percentage { get; init; }

    ///<summary>Preset fan mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial class FfmpegServices
{
    private readonly IHaContext _haContext;
    public FfmpegServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a restart command to a ffmpeg based sensor.</summary>
    public void Restart(FfmpegRestartParameters data)
    {
        _haContext.CallService("ffmpeg", "restart", null, data);
    }

    ///<summary>Sends a restart command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will restart. Platform dependent.</param>
    public void Restart(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "restart", null, new FfmpegRestartParameters { EntityId = entityId });
    }

    ///<summary>Sends a start command to a ffmpeg based sensor.</summary>
    public void Start(FfmpegStartParameters data)
    {
        _haContext.CallService("ffmpeg", "start", null, data);
    }

    ///<summary>Sends a start command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will start. Platform dependent.</param>
    public void Start(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "start", null, new FfmpegStartParameters { EntityId = entityId });
    }

    ///<summary>Sends a stop command to a ffmpeg based sensor.</summary>
    public void Stop(FfmpegStopParameters data)
    {
        _haContext.CallService("ffmpeg", "stop", null, data);
    }

    ///<summary>Sends a stop command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will stop. Platform dependent.</param>
    public void Stop(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "stop", null, new FfmpegStopParameters { EntityId = entityId });
    }
}

public partial record FfmpegRestartParameters
{
    ///<summary>Name of entity that will restart. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStartParameters
{
    ///<summary>Name of entity that will start. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStopParameters
{
    ///<summary>Name of entity that will stop. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial class FrontendServices
{
    private readonly IHaContext _haContext;
    public FrontendServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads themes from the YAML-configuration.</summary>
    public void ReloadThemes(object? data = null)
    {
        _haContext.CallService("frontend", "reload_themes", null, data);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    public void SetTheme(FrontendSetThemeParameters data)
    {
        _haContext.CallService("frontend", "set_theme", null, data);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    ///<param name="name">Name of a theme. eg: default</param>
    ///<param name="mode">Theme mode.</param>
    public void SetTheme(object name, object? mode = null)
    {
        _haContext.CallService("frontend", "set_theme", null, new FrontendSetThemeParameters { Name = name, Mode = mode });
    }
}

public partial record FrontendSetThemeParameters
{
    ///<summary>Name of a theme. eg: default</summary>
    [JsonPropertyName("name")]
    public object? Name { get; init; }

    ///<summary>Theme mode.</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }
}

public partial class GroupServices
{
    private readonly IHaContext _haContext;
    public GroupServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads group configuration, entities, and notify services from YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("group", "reload", null, data);
    }

    ///<summary>Removes a group.</summary>
    public void Remove(GroupRemoveParameters data)
    {
        _haContext.CallService("group", "remove", null, data);
    }

    ///<summary>Removes a group.</summary>
    ///<param name="objectId">Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</param>
    public void Remove(object objectId)
    {
        _haContext.CallService("group", "remove", null, new GroupRemoveParameters { ObjectId = objectId });
    }

    ///<summary>Creates/Updates a group.</summary>
    public void Set(GroupSetParameters data)
    {
        _haContext.CallService("group", "set", null, data);
    }

    ///<summary>Creates/Updates a group.</summary>
    ///<param name="objectId">Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</param>
    ///<param name="name">Name of the group. eg: My test group</param>
    ///<param name="icon">Name of the icon for the group. eg: mdi:camera</param>
    ///<param name="entities">List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="addEntities">List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="removeEntities">List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="all">Enable this option if the group should only be used when all entities are in state `on`.</param>
    public void Set(string objectId, string? name = null, object? icon = null, IEnumerable<string>? entities = null, IEnumerable<string>? addEntities = null, IEnumerable<string>? removeEntities = null, bool? all = null)
    {
        _haContext.CallService("group", "set", null, new GroupSetParameters { ObjectId = objectId, Name = name, Icon = icon, Entities = entities, AddEntities = addEntities, RemoveEntities = removeEntities, All = all });
    }
}

public partial record GroupRemoveParameters
{
    ///<summary>Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public object? ObjectId { get; init; }
}

public partial record GroupSetParameters
{
    ///<summary>Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public string? ObjectId { get; init; }

    ///<summary>Name of the group. eg: My test group</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Name of the icon for the group. eg: mdi:camera</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("entities")]
    public IEnumerable<string>? Entities { get; init; }

    ///<summary>List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("add_entities")]
    public IEnumerable<string>? AddEntities { get; init; }

    ///<summary>List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("remove_entities")]
    public IEnumerable<string>? RemoveEntities { get; init; }

    ///<summary>Enable this option if the group should only be used when all entities are in state `on`.</summary>
    [JsonPropertyName("all")]
    public bool? All { get; init; }
}

public partial class HassioServices
{
    private readonly IHaContext _haContext;
    public HassioServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Restarts an add-on.</summary>
    public void AddonRestart(HassioAddonRestartParameters data)
    {
        _haContext.CallService("hassio", "addon_restart", null, data);
    }

    ///<summary>Restarts an add-on.</summary>
    ///<param name="addon">The add-on to restart. eg: core_ssh</param>
    public void AddonRestart(object addon)
    {
        _haContext.CallService("hassio", "addon_restart", null, new HassioAddonRestartParameters { Addon = addon });
    }

    ///<summary>Starts an add-on.</summary>
    public void AddonStart(HassioAddonStartParameters data)
    {
        _haContext.CallService("hassio", "addon_start", null, data);
    }

    ///<summary>Starts an add-on.</summary>
    ///<param name="addon">The add-on to start. eg: core_ssh</param>
    public void AddonStart(object addon)
    {
        _haContext.CallService("hassio", "addon_start", null, new HassioAddonStartParameters { Addon = addon });
    }

    ///<summary>Writes data to the add-on&apos;s standard input.</summary>
    public void AddonStdin(HassioAddonStdinParameters data)
    {
        _haContext.CallService("hassio", "addon_stdin", null, data);
    }

    ///<summary>Writes data to the add-on&apos;s standard input.</summary>
    ///<param name="addon">The add-on to write to. eg: core_ssh</param>
    public void AddonStdin(object addon)
    {
        _haContext.CallService("hassio", "addon_stdin", null, new HassioAddonStdinParameters { Addon = addon });
    }

    ///<summary>Stops an add-on.</summary>
    public void AddonStop(HassioAddonStopParameters data)
    {
        _haContext.CallService("hassio", "addon_stop", null, data);
    }

    ///<summary>Stops an add-on.</summary>
    ///<param name="addon">The add-on to stop. eg: core_ssh</param>
    public void AddonStop(object addon)
    {
        _haContext.CallService("hassio", "addon_stop", null, new HassioAddonStopParameters { Addon = addon });
    }

    ///<summary>Updates an add-on. This action should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.</summary>
    public void AddonUpdate(HassioAddonUpdateParameters data)
    {
        _haContext.CallService("hassio", "addon_update", null, data);
    }

    ///<summary>Updates an add-on. This action should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.</summary>
    ///<param name="addon">The add-on to update. eg: core_ssh</param>
    public void AddonUpdate(object addon)
    {
        _haContext.CallService("hassio", "addon_update", null, new HassioAddonUpdateParameters { Addon = addon });
    }

    ///<summary>Creates a full backup.</summary>
    public void BackupFull(HassioBackupFullParameters data)
    {
        _haContext.CallService("hassio", "backup_full", null, data);
    }

    ///<summary>Creates a full backup.</summary>
    ///<param name="name">Optional (default = current date and time). eg: Backup 1</param>
    ///<param name="password">Password to protect the backup with. eg: password</param>
    ///<param name="compressed">Compresses the backup files.</param>
    ///<param name="location">Name of a backup network storage to host backups. eg: my_backup_mount</param>
    ///<param name="homeassistantExcludeDatabase">Exclude the Home Assistant database file from backup</param>
    public void BackupFull(string? name = null, string? password = null, bool? compressed = null, object? location = null, bool? homeassistantExcludeDatabase = null)
    {
        _haContext.CallService("hassio", "backup_full", null, new HassioBackupFullParameters { Name = name, Password = password, Compressed = compressed, Location = location, HomeassistantExcludeDatabase = homeassistantExcludeDatabase });
    }

    ///<summary>Creates a partial backup.</summary>
    public void BackupPartial(HassioBackupPartialParameters data)
    {
        _haContext.CallService("hassio", "backup_partial", null, data);
    }

    ///<summary>Creates a partial backup.</summary>
    ///<param name="homeassistant">Includes Home Assistant settings in the backup.</param>
    ///<param name="homeassistantExcludeDatabase">Exclude the Home Assistant database file from backup</param>
    ///<param name="addons">List of add-ons to include in the backup. Use the name slug of each add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="folders">List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="name">Optional (default = current date and time). eg: Partial backup 1</param>
    ///<param name="password">Password to protect the backup with. eg: password</param>
    ///<param name="compressed">Compresses the backup files.</param>
    ///<param name="location">Name of a backup network storage to host backups. eg: my_backup_mount</param>
    public void BackupPartial(bool? homeassistant = null, bool? homeassistantExcludeDatabase = null, object? addons = null, object? folders = null, string? name = null, string? password = null, bool? compressed = null, object? location = null)
    {
        _haContext.CallService("hassio", "backup_partial", null, new HassioBackupPartialParameters { Homeassistant = homeassistant, HomeassistantExcludeDatabase = homeassistantExcludeDatabase, Addons = addons, Folders = folders, Name = name, Password = password, Compressed = compressed, Location = location });
    }

    ///<summary>Reboots the host system.</summary>
    public void HostReboot(object? data = null)
    {
        _haContext.CallService("hassio", "host_reboot", null, data);
    }

    ///<summary>Powers off the host system.</summary>
    public void HostShutdown(object? data = null)
    {
        _haContext.CallService("hassio", "host_shutdown", null, data);
    }

    ///<summary>Restores from full backup.</summary>
    public void RestoreFull(HassioRestoreFullParameters data)
    {
        _haContext.CallService("hassio", "restore_full", null, data);
    }

    ///<summary>Restores from full backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestoreFull(string slug, string? password = null)
    {
        _haContext.CallService("hassio", "restore_full", null, new HassioRestoreFullParameters { Slug = slug, Password = password });
    }

    ///<summary>Restores from a partial backup.</summary>
    public void RestorePartial(HassioRestorePartialParameters data)
    {
        _haContext.CallService("hassio", "restore_partial", null, data);
    }

    ///<summary>Restores from a partial backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="homeassistant">Restores Home Assistant.</param>
    ///<param name="folders">List of directories to restore from the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="addons">List of add-ons to restore from the backup. Use the name slug of each add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestorePartial(string slug, bool? homeassistant = null, object? folders = null, object? addons = null, string? password = null)
    {
        _haContext.CallService("hassio", "restore_partial", null, new HassioRestorePartialParameters { Slug = slug, Homeassistant = homeassistant, Folders = folders, Addons = addons, Password = password });
    }
}

public partial record HassioAddonRestartParameters
{
    ///<summary>The add-on to restart. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStartParameters
{
    ///<summary>The add-on to start. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStdinParameters
{
    ///<summary>The add-on to write to. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStopParameters
{
    ///<summary>The add-on to stop. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonUpdateParameters
{
    ///<summary>The add-on to update. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioBackupFullParameters
{
    ///<summary>Optional (default = current date and time). eg: Backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Password to protect the backup with. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Compresses the backup files.</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }

    ///<summary>Name of a backup network storage to host backups. eg: my_backup_mount</summary>
    [JsonPropertyName("location")]
    public object? Location { get; init; }

    ///<summary>Exclude the Home Assistant database file from backup</summary>
    [JsonPropertyName("homeassistant_exclude_database")]
    public bool? HomeassistantExcludeDatabase { get; init; }
}

public partial record HassioBackupPartialParameters
{
    ///<summary>Includes Home Assistant settings in the backup.</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>Exclude the Home Assistant database file from backup</summary>
    [JsonPropertyName("homeassistant_exclude_database")]
    public bool? HomeassistantExcludeDatabase { get; init; }

    ///<summary>List of add-ons to include in the backup. Use the name slug of each add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>Optional (default = current date and time). eg: Partial backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Password to protect the backup with. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Compresses the backup files.</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }

    ///<summary>Name of a backup network storage to host backups. eg: my_backup_mount</summary>
    [JsonPropertyName("location")]
    public object? Location { get; init; }
}

public partial record HassioRestoreFullParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial record HassioRestorePartialParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Restores Home Assistant.</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>List of directories to restore from the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>List of add-ons to restore from the backup. Use the name slug of each add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial class HomeassistantServices
{
    private readonly IHaContext _haContext;
    public HomeassistantServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Checks the Home Assistant YAML-configuration files for errors. Errors will be shown in the Home Assistant logs.</summary>
    public void CheckConfig(object? data = null)
    {
        _haContext.CallService("homeassistant", "check_config", null, data);
    }

    ///<summary>Reload all YAML configuration that can be reloaded without restarting Home Assistant.</summary>
    public void ReloadAll(object? data = null)
    {
        _haContext.CallService("homeassistant", "reload_all", null, data);
    }

    ///<summary>Reloads the specified config entry.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReloadConfigEntry(ServiceTarget target, HomeassistantReloadConfigEntryParameters data)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, data);
    }

    ///<summary>Reloads the specified config entry.</summary>
    ///<param name="entryId">The configuration entry ID of the entry to be reloaded. eg: 8955375327824e14ba89e4b29cc3ec9a</param>
    public void ReloadConfigEntry(ServiceTarget target, string? entryId = null)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, new HomeassistantReloadConfigEntryParameters { EntryId = entryId });
    }

    ///<summary>Reloads the core configuration from the YAML-configuration.</summary>
    public void ReloadCoreConfig(object? data = null)
    {
        _haContext.CallService("homeassistant", "reload_core_config", null, data);
    }

    ///<summary>Reloads Jinja2 templates found in the `custom_templates` folder in your config. New values will be applied on the next render of the template.</summary>
    public void ReloadCustomTemplates(object? data = null)
    {
        _haContext.CallService("homeassistant", "reload_custom_templates", null, data);
    }

    ///<summary>Restarts Home Assistant.</summary>
    public void Restart(object? data = null)
    {
        _haContext.CallService("homeassistant", "restart", null, data);
    }

    ///<summary>Saves the persistent states immediately. Maintains the normal periodic saving interval.</summary>
    public void SavePersistentStates(object? data = null)
    {
        _haContext.CallService("homeassistant", "save_persistent_states", null, data);
    }

    ///<summary>Updates the Home Assistant location.</summary>
    public void SetLocation(HomeassistantSetLocationParameters data)
    {
        _haContext.CallService("homeassistant", "set_location", null, data);
    }

    ///<summary>Updates the Home Assistant location.</summary>
    ///<param name="latitude">Latitude of your location. eg: 32.87336</param>
    ///<param name="longitude">Longitude of your location. eg: 117.22743</param>
    ///<param name="elevation">Elevation of your location above sea level. eg: 120</param>
    public void SetLocation(double latitude, double longitude, double? elevation = null)
    {
        _haContext.CallService("homeassistant", "set_location", null, new HomeassistantSetLocationParameters { Latitude = latitude, Longitude = longitude, Elevation = elevation });
    }

    ///<summary>Stops Home Assistant.</summary>
    public void Stop(object? data = null)
    {
        _haContext.CallService("homeassistant", "stop", null, data);
    }

    ///<summary>Generic action to toggle devices on/off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("homeassistant", "toggle", target, data);
    }

    ///<summary>Generic action to turn devices off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("homeassistant", "turn_off", target, data);
    }

    ///<summary>Generic action to turn devices on under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("homeassistant", "turn_on", target, data);
    }

    ///<summary>Forces one or more entities to update its data.</summary>
    public void UpdateEntity(HomeassistantUpdateEntityParameters data)
    {
        _haContext.CallService("homeassistant", "update_entity", null, data);
    }

    ///<summary>Forces one or more entities to update its data.</summary>
    ///<param name="entityId">List of entities to force update.</param>
    public void UpdateEntity(IEnumerable<string> entityId)
    {
        _haContext.CallService("homeassistant", "update_entity", null, new HomeassistantUpdateEntityParameters { EntityId = entityId });
    }
}

public partial record HomeassistantReloadConfigEntryParameters
{
    ///<summary>The configuration entry ID of the entry to be reloaded. eg: 8955375327824e14ba89e4b29cc3ec9a</summary>
    [JsonPropertyName("entry_id")]
    public string? EntryId { get; init; }
}

public partial record HomeassistantSetLocationParameters
{
    ///<summary>Latitude of your location. eg: 32.87336</summary>
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    ///<summary>Longitude of your location. eg: 117.22743</summary>
    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    ///<summary>Elevation of your location above sea level. eg: 120</summary>
    [JsonPropertyName("elevation")]
    public double? Elevation { get; init; }
}

public partial record HomeassistantUpdateEntityParameters
{
    ///<summary>List of entities to force update.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }
}

public partial class HueServices
{
    private readonly IHaContext _haContext;
    public HueServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Activates a Hue scene with more control over the options.</summary>
    ///<param name="target">The target for this service call</param>
    public void ActivateScene(ServiceTarget target, HueActivateSceneParameters data)
    {
        _haContext.CallService("hue", "activate_scene", target, data);
    }

    ///<summary>Activates a Hue scene with more control over the options.</summary>
    ///<param name="transition">Transition duration it takes to bring devices to the state defined in the scene.</param>
    ///<param name="dynamic">Enable dynamic mode of the scene.</param>
    ///<param name="speed">Speed of dynamic palette for this scene.</param>
    ///<param name="brightness">Set brightness for the scene.</param>
    public void ActivateScene(ServiceTarget target, double? transition = null, bool? dynamic = null, double? speed = null, double? brightness = null)
    {
        _haContext.CallService("hue", "activate_scene", target, new HueActivateSceneParameters { Transition = transition, Dynamic = dynamic, Speed = speed, Brightness = brightness });
    }

    ///<summary>Activates a Hue scene stored in the Hue hub.</summary>
    public void HueActivateScene(HueHueActivateSceneParameters data)
    {
        _haContext.CallService("hue", "hue_activate_scene", null, data);
    }

    ///<summary>Activates a Hue scene stored in the Hue hub.</summary>
    ///<param name="groupName">Name of Hue group/room from the Hue app. eg: Living Room</param>
    ///<param name="sceneName">Name of Hue scene from the Hue app. eg: Energize</param>
    ///<param name="dynamic">Enable dynamic mode of the scene (V2 bridges and supported scenes only).</param>
    public void HueActivateScene(string? groupName = null, string? sceneName = null, bool? dynamic = null)
    {
        _haContext.CallService("hue", "hue_activate_scene", null, new HueHueActivateSceneParameters { GroupName = groupName, SceneName = sceneName, Dynamic = dynamic });
    }
}

public partial record HueActivateSceneParameters
{
    ///<summary>Transition duration it takes to bring devices to the state defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }

    ///<summary>Enable dynamic mode of the scene.</summary>
    [JsonPropertyName("dynamic")]
    public bool? Dynamic { get; init; }

    ///<summary>Speed of dynamic palette for this scene.</summary>
    [JsonPropertyName("speed")]
    public double? Speed { get; init; }

    ///<summary>Set brightness for the scene.</summary>
    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }
}

public partial record HueHueActivateSceneParameters
{
    ///<summary>Name of Hue group/room from the Hue app. eg: Living Room</summary>
    [JsonPropertyName("group_name")]
    public string? GroupName { get; init; }

    ///<summary>Name of Hue scene from the Hue app. eg: Energize</summary>
    [JsonPropertyName("scene_name")]
    public string? SceneName { get; init; }

    ///<summary>Enable dynamic mode of the scene (V2 bridges and supported scenes only).</summary>
    [JsonPropertyName("dynamic")]
    public bool? Dynamic { get; init; }
}

public partial class ImageServices
{
    private readonly IHaContext _haContext;
    public ImageServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Takes a snapshot from an image.</summary>
    ///<param name="target">The target for this service call</param>
    public void Snapshot(ServiceTarget target, ImageSnapshotParameters data)
    {
        _haContext.CallService("image", "snapshot", target, data);
    }

    ///<summary>Takes a snapshot from an image.</summary>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/image_snapshot.jpg</param>
    public void Snapshot(ServiceTarget target, string filename)
    {
        _haContext.CallService("image", "snapshot", target, new ImageSnapshotParameters { Filename = filename });
    }
}

public partial record ImageSnapshotParameters
{
    ///<summary>Template of a filename. Variable available is `entity_id`. eg: /tmp/image_snapshot.jpg</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }
}

public partial class InputBooleanServices
{
    private readonly IHaContext _haContext;
    public InputBooleanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_boolean", "reload", null, data);
    }

    ///<summary>Toggles the helper on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_boolean", "toggle", target, data);
    }

    ///<summary>Turns off the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_boolean", "turn_off", target, data);
    }

    ///<summary>Turns on the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_boolean", "turn_on", target, data);
    }
}

public partial class InputButtonServices
{
    private readonly IHaContext _haContext;
    public InputButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Mimics the physical button press on the device.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_button", "press", target, data);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_button", "reload", null, data);
    }
}

public partial class InputDatetimeServices
{
    private readonly IHaContext _haContext;
    public InputDatetimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_datetime", "reload", null, data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDatetime(ServiceTarget target, InputDatetimeSetDatetimeParameters data)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public void SetDatetime(ServiceTarget target, string? date = null, TimeOnly? time = null, string? datetime = null, double? timestamp = null)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }
}

public partial record InputDatetimeSetDatetimeParameters
{
    ///<summary>The target date. eg: &quot;2019-04-20&quot;</summary>
    [JsonPropertyName("date")]
    public string? Date { get; init; }

    ///<summary>The target time. eg: &quot;05:04:20&quot;</summary>
    [JsonPropertyName("time")]
    public TimeOnly? Time { get; init; }

    ///<summary>The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</summary>
    [JsonPropertyName("datetime")]
    public string? Datetime { get; init; }

    ///<summary>The target date &amp; time, expressed by a UNIX timestamp.</summary>
    [JsonPropertyName("timestamp")]
    public double? Timestamp { get; init; }
}

public partial class InputNumberServices
{
    private readonly IHaContext _haContext;
    public InputNumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrements the current value by 1 step.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_number", "decrement", target, data);
    }

    ///<summary>Increments the current value by 1 step.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_number", "increment", target, data);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_number", "reload", null, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputNumberSetValueParameters data)
    {
        _haContext.CallService("input_number", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="value">The target value.</param>
    public void SetValue(ServiceTarget target, double value)
    {
        _haContext.CallService("input_number", "set_value", target, new InputNumberSetValueParameters { Value = value });
    }
}

public partial record InputNumberSetValueParameters
{
    ///<summary>The target value.</summary>
    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial class InputSelectServices
{
    private readonly IHaContext _haContext;
    public InputSelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_select", "reload", null, data);
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_select", "select_first", target, data);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_select", "select_last", target, data);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, InputSelectSelectNextParameters data)
    {
        _haContext.CallService("input_select", "select_next", target, data);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_next", target, new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, InputSelectSelectOptionParameters data)
    {
        _haContext.CallService("input_select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("input_select", "select_option", target, new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, InputSelectSelectPreviousParameters data)
    {
        _haContext.CallService("input_select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_previous", target, new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOptions(ServiceTarget target, InputSelectSetOptionsParameters data)
    {
        _haContext.CallService("input_select", "set_options", target, data);
    }

    ///<summary>Sets the options.</summary>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public void SetOptions(ServiceTarget target, IEnumerable<string> options)
    {
        _haContext.CallService("input_select", "set_options", target, new InputSelectSetOptionsParameters { Options = options });
    }
}

public partial record InputSelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record InputSelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSetOptionsParameters
{
    ///<summary>List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</summary>
    [JsonPropertyName("options")]
    public IEnumerable<string>? Options { get; init; }
}

public partial class InputTextServices
{
    private readonly IHaContext _haContext;
    public InputTextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_text", "reload", null, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputTextSetValueParameters data)
    {
        _haContext.CallService("input_text", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="value">The target value. eg: This is an example text</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("input_text", "set_value", target, new InputTextSetValueParameters { Value = value });
    }
}

public partial record InputTextSetValueParameters
{
    ///<summary>The target value. eg: This is an example text</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class LawnMowerServices
{
    private readonly IHaContext _haContext;
    public LawnMowerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Stops the mowing task and returns to the dock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Dock(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("lawn_mower", "dock", target, data);
    }

    ///<summary>Pauses the mowing task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("lawn_mower", "pause", target, data);
    }

    ///<summary>Starts the mowing task.</summary>
    ///<param name="target">The target for this service call</param>
    public void StartMowing(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("lawn_mower", "start_mowing", target, data);
    }
}

public partial class LightServices
{
    private readonly IHaContext _haContext;
    public LightServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, LightToggleParameters data)
    {
        _haContext.CallService("light", "toggle", target, data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public void Toggle(ServiceTarget target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? kelvin = null, double? brightnessPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, object? white = null, string? profile = null, object? flash = null)
    {
        _haContext.CallService("light", "toggle", target, new LightToggleParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, White = white, Profile = profile, Flash = flash });
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, LightTurnOffParameters data)
    {
        _haContext.CallService("light", "turn_off", target, data);
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash"></param>
    public void TurnOff(ServiceTarget target, double? transition = null, object? flash = null)
    {
        _haContext.CallService("light", "turn_off", target, new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, LightTurnOnParameters data)
    {
        _haContext.CallService("light", "turn_on", target, data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="brightnessStep"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public void TurnOn(ServiceTarget target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? kelvin = null, double? brightnessPct = null, double? brightnessStepPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, double? brightnessStep = null, object? white = null, string? profile = null, object? flash = null)
    {
        _haContext.CallService("light", "turn_on", target, new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, BrightnessStep = brightnessStep, White = white, Profile = profile, Flash = flash });
    }
}

public partial record LightToggleParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public IReadOnlyCollection<int>? RgbColor { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public object? Kelvin { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public double? BrightnessPct { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }

    ///<summary> eg: [255, 100, 100, 50]</summary>
    [JsonPropertyName("rgbw_color")]
    public object? RgbwColor { get; init; }

    ///<summary> eg: [255, 100, 100, 50, 70]</summary>
    [JsonPropertyName("rgbww_color")]
    public object? RgbwwColor { get; init; }

    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary> eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary> eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("white")]
    public object? White { get; init; }

    ///<summary> eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    [JsonPropertyName("flash")]
    public object? Flash { get; init; }
}

public partial record LightTurnOffParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }

    [JsonPropertyName("flash")]
    public object? Flash { get; init; }
}

public partial record LightTurnOnParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public IReadOnlyCollection<int>? RgbColor { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public object? Kelvin { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public double? BrightnessPct { get; init; }

    ///<summary>Change brightness by a percentage.</summary>
    [JsonPropertyName("brightness_step_pct")]
    public double? BrightnessStepPct { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }

    ///<summary> eg: [255, 100, 100, 50]</summary>
    [JsonPropertyName("rgbw_color")]
    public object? RgbwColor { get; init; }

    ///<summary> eg: [255, 100, 100, 50, 70]</summary>
    [JsonPropertyName("rgbww_color")]
    public object? RgbwwColor { get; init; }

    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary> eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary> eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("brightness_step")]
    public double? BrightnessStep { get; init; }

    [JsonPropertyName("white")]
    public object? White { get; init; }

    ///<summary> eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    [JsonPropertyName("flash")]
    public object? Flash { get; init; }
}

public partial class LockServices
{
    private readonly IHaContext _haContext;
    public LockServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Lock(ServiceTarget target, LockLockParameters data)
    {
        _haContext.CallService("lock", "lock", target, data);
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="code">Code used to lock the lock. eg: 1234</param>
    public void Lock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "lock", target, new LockLockParameters { Code = code });
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Open(ServiceTarget target, LockOpenParameters data)
    {
        _haContext.CallService("lock", "open", target, data);
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="code">Code used to open the lock. eg: 1234</param>
    public void Open(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "open", target, new LockOpenParameters { Code = code });
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unlock(ServiceTarget target, LockUnlockParameters data)
    {
        _haContext.CallService("lock", "unlock", target, data);
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="code">Code used to unlock the lock. eg: 1234</param>
    public void Unlock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "unlock", target, new LockUnlockParameters { Code = code });
    }
}

public partial record LockLockParameters
{
    ///<summary>Code used to lock the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockOpenParameters
{
    ///<summary>Code used to open the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockUnlockParameters
{
    ///<summary>Code used to unlock the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class LogbookServices
{
    private readonly IHaContext _haContext;
    public LogbookServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    public void Log(LogbookLogParameters data)
    {
        _haContext.CallService("logbook", "log", null, data);
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    ///<param name="name">Custom name for an entity, can be referenced using an `entity_id`. eg: Kitchen</param>
    ///<param name="message">Message of the logbook entry. eg: is being used</param>
    ///<param name="entityId">Entity to reference in the logbook entry.</param>
    ///<param name="domain">Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</param>
    public void Log(string name, string message, string? entityId = null, string? domain = null)
    {
        _haContext.CallService("logbook", "log", null, new LogbookLogParameters { Name = name, Message = message, EntityId = entityId, Domain = domain });
    }
}

public partial record LogbookLogParameters
{
    ///<summary>Custom name for an entity, can be referenced using an `entity_id`. eg: Kitchen</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Message of the logbook entry. eg: is being used</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Entity to reference in the logbook entry.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</summary>
    [JsonPropertyName("domain")]
    public string? Domain { get; init; }
}

public partial class LoggerServices
{
    private readonly IHaContext _haContext;
    public LoggerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the default log level for integrations.</summary>
    public void SetDefaultLevel(LoggerSetDefaultLevelParameters data)
    {
        _haContext.CallService("logger", "set_default_level", null, data);
    }

    ///<summary>Sets the default log level for integrations.</summary>
    ///<param name="level">Default severity level for all integrations.</param>
    public void SetDefaultLevel(object? level = null)
    {
        _haContext.CallService("logger", "set_default_level", null, new LoggerSetDefaultLevelParameters { Level = level });
    }

    ///<summary>Sets the log level for one or more integrations.</summary>
    public void SetLevel(object? data = null)
    {
        _haContext.CallService("logger", "set_level", null, data);
    }
}

public partial record LoggerSetDefaultLevelParameters
{
    ///<summary>Default severity level for all integrations.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }
}

public partial class MediaPlayerServices
{
    private readonly IHaContext _haContext;
    public MediaPlayerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes all items from the playlist.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearPlaylist(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "clear_playlist", target, data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The target for this service call</param>
    public void Join(ServiceTarget target, MediaPlayerJoinParameters data)
    {
        _haContext.CallService("media_player", "join", target, data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="groupMembers">The players which will be synced with the playback specified in &apos;Targets&apos;. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public void Join(ServiceTarget target, IEnumerable<string> groupMembers)
    {
        _haContext.CallService("media_player", "join", target, new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaNextTrack(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_next_track", target, data);
    }

    ///<summary>Pauses.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPause(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_pause", target, data);
    }

    ///<summary>Starts playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlay(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_play", target, data);
    }

    ///<summary>Toggles play/pause.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlayPause(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_play_pause", target, data);
    }

    ///<summary>Selects the previous track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPreviousTrack(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_previous_track", target, data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaSeek(ServiceTarget target, MediaPlayerMediaSeekParameters data)
    {
        _haContext.CallService("media_player", "media_seek", target, data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public void MediaSeek(ServiceTarget target, double seekPosition)
    {
        _haContext.CallService("media_player", "media_seek", target, new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaStop(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_stop", target, data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayMedia(ServiceTarget target, MediaPlayerPlayMediaParameters data)
    {
        _haContext.CallService("media_player", "play_media", target, data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public void PlayMedia(ServiceTarget target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        _haContext.CallService("media_player", "play_media", target, new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The target for this service call</param>
    public void RepeatSet(ServiceTarget target, MediaPlayerRepeatSetParameters data)
    {
        _haContext.CallService("media_player", "repeat_set", target, data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="repeat">Repeat mode to set.</param>
    public void RepeatSet(ServiceTarget target, object repeat)
    {
        _haContext.CallService("media_player", "repeat_set", target, new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSoundMode(ServiceTarget target, MediaPlayerSelectSoundModeParameters data)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public void SelectSoundMode(ServiceTarget target, string? soundMode = null)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSource(ServiceTarget target, MediaPlayerSelectSourceParameters data)
    {
        _haContext.CallService("media_player", "select_source", target, data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public void SelectSource(ServiceTarget target, string source)
    {
        _haContext.CallService("media_player", "select_source", target, new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The target for this service call</param>
    public void ShuffleSet(ServiceTarget target, MediaPlayerShuffleSetParameters data)
    {
        _haContext.CallService("media_player", "shuffle_set", target, data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public void ShuffleSet(ServiceTarget target, bool shuffle)
    {
        _haContext.CallService("media_player", "shuffle_set", target, new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "toggle", target, data);
    }

    ///<summary>Turns off the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "turn_off", target, data);
    }

    ///<summary>Turns on the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "turn_on", target, data);
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unjoin(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "unjoin", target, data);
    }

    ///<summary>Turns down the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeDown(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "volume_down", target, data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeMute(ServiceTarget target, MediaPlayerVolumeMuteParameters data)
    {
        _haContext.CallService("media_player", "volume_mute", target, data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public void VolumeMute(ServiceTarget target, bool isVolumeMuted)
    {
        _haContext.CallService("media_player", "volume_mute", target, new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeSet(ServiceTarget target, MediaPlayerVolumeSetParameters data)
    {
        _haContext.CallService("media_player", "volume_set", target, data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public void VolumeSet(ServiceTarget target, double volumeLevel)
    {
        _haContext.CallService("media_player", "volume_set", target, new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeUp(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "volume_up", target, data);
    }
}

public partial record MediaPlayerJoinParameters
{
    ///<summary>The players which will be synced with the playback specified in &apos;Targets&apos;. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </summary>
    [JsonPropertyName("group_members")]
    public IEnumerable<string>? GroupMembers { get; init; }
}

public partial record MediaPlayerMediaSeekParameters
{
    ///<summary>Target position in the currently playing media. The format is platform dependent.</summary>
    [JsonPropertyName("seek_position")]
    public double? SeekPosition { get; init; }
}

public partial record MediaPlayerPlayMediaParameters
{
    ///<summary>The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</summary>
    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    ///<summary>The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</summary>
    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    ///<summary>If the content should be played now or be added to the queue.</summary>
    [JsonPropertyName("enqueue")]
    public object? Enqueue { get; init; }

    ///<summary>If the media should be played as an announcement. eg: true</summary>
    [JsonPropertyName("announce")]
    public bool? Announce { get; init; }
}

public partial record MediaPlayerRepeatSetParameters
{
    ///<summary>Repeat mode to set.</summary>
    [JsonPropertyName("repeat")]
    public object? Repeat { get; init; }
}

public partial record MediaPlayerSelectSoundModeParameters
{
    ///<summary>Name of the sound mode to switch to. eg: Music</summary>
    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }
}

public partial record MediaPlayerSelectSourceParameters
{
    ///<summary>Name of the source to switch to. Platform dependent. eg: video1</summary>
    [JsonPropertyName("source")]
    public string? Source { get; init; }
}

public partial record MediaPlayerShuffleSetParameters
{
    ///<summary>Whether or not shuffle mode is enabled.</summary>
    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }
}

public partial record MediaPlayerVolumeMuteParameters
{
    ///<summary>Defines whether or not it is muted.</summary>
    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }
}

public partial record MediaPlayerVolumeSetParameters
{
    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume.</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }
}

public partial class MqttServices
{
    private readonly IHaContext _haContext;
    public MqttServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.</summary>
    public void Dump(MqttDumpParameters data)
    {
        _haContext.CallService("mqtt", "dump", null, data);
    }

    ///<summary>Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.</summary>
    ///<param name="topic">Topic to listen to. eg: OpenZWave/#</param>
    ///<param name="duration">How long we should listen for messages in seconds.</param>
    public void Dump(string? topic = null, double? duration = null)
    {
        _haContext.CallService("mqtt", "dump", null, new MqttDumpParameters { Topic = topic, Duration = duration });
    }

    ///<summary>Publishes a message to an MQTT topic.</summary>
    public void Publish(MqttPublishParameters data)
    {
        _haContext.CallService("mqtt", "publish", null, data);
    }

    ///<summary>Publishes a message to an MQTT topic.</summary>
    ///<param name="topic">Topic to publish to. eg: /homeassistant/hello</param>
    ///<param name="payload">The payload to publish. eg: The temperature is {{ states(&apos;sensor.temperature&apos;) }}</param>
    ///<param name="evaluatePayload">When `payload` is a Python bytes literal, evaluate the bytes literal and publish the raw data.</param>
    ///<param name="qos">Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once.</param>
    ///<param name="retain">If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.</param>
    public void Publish(string topic, object payload, bool? evaluatePayload = null, object? qos = null, bool? retain = null)
    {
        _haContext.CallService("mqtt", "publish", null, new MqttPublishParameters { Topic = topic, Payload = payload, EvaluatePayload = evaluatePayload, Qos = qos, Retain = retain });
    }

    ///<summary>Reloads MQTT entities from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("mqtt", "reload", null, data);
    }
}

public partial record MqttDumpParameters
{
    ///<summary>Topic to listen to. eg: OpenZWave/#</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>How long we should listen for messages in seconds.</summary>
    [JsonPropertyName("duration")]
    public double? Duration { get; init; }
}

public partial record MqttPublishParameters
{
    ///<summary>Topic to publish to. eg: /homeassistant/hello</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>The payload to publish. eg: The temperature is {{ states(&apos;sensor.temperature&apos;) }}</summary>
    [JsonPropertyName("payload")]
    public object? Payload { get; init; }

    ///<summary>When `payload` is a Python bytes literal, evaluate the bytes literal and publish the raw data.</summary>
    [JsonPropertyName("evaluate_payload")]
    public bool? EvaluatePayload { get; init; }

    ///<summary>Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once.</summary>
    [JsonPropertyName("qos")]
    public object? Qos { get; init; }

    ///<summary>If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.</summary>
    [JsonPropertyName("retain")]
    public bool? Retain { get; init; }
}

public partial class NotifyServices
{
    private readonly IHaContext _haContext;
    public NotifyServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a notification message using the alexa_media service.</summary>
    public void AlexaMedia(NotifyAlexaMediaParameters data)
    {
        _haContext.CallService("notify", "alexa_media", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMedia(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media", null, new NotifyAlexaMediaParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_downstairs_tv integration.</summary>
    public void AlexaMediaDownstairsTv(NotifyAlexaMediaDownstairsTvParameters data)
    {
        _haContext.CallService("notify", "alexa_media_downstairs_tv", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_downstairs_tv integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaDownstairsTv(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_downstairs_tv", null, new NotifyAlexaMediaDownstairsTvParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_everywhere integration.</summary>
    public void AlexaMediaEverywhere(NotifyAlexaMediaEverywhereParameters data)
    {
        _haContext.CallService("notify", "alexa_media_everywhere", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_everywhere integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaEverywhere(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_everywhere", null, new NotifyAlexaMediaEverywhereParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_front_office_dot integration.</summary>
    public void AlexaMediaFrontOfficeDot(NotifyAlexaMediaFrontOfficeDotParameters data)
    {
        _haContext.CallService("notify", "alexa_media_front_office_dot", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_front_office_dot integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaFrontOfficeDot(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_front_office_dot", null, new NotifyAlexaMediaFrontOfficeDotParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_garage integration.</summary>
    public void AlexaMediaGarage(NotifyAlexaMediaGarageParameters data)
    {
        _haContext.CallService("notify", "alexa_media_garage", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_garage integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaGarage(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_garage", null, new NotifyAlexaMediaGarageParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_garage_echo integration.</summary>
    public void AlexaMediaGarageEcho(NotifyAlexaMediaGarageEchoParameters data)
    {
        _haContext.CallService("notify", "alexa_media_garage_echo", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_garage_echo integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaGarageEcho(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_garage_echo", null, new NotifyAlexaMediaGarageEchoParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_garage_lights integration.</summary>
    public void AlexaMediaGarageLights(NotifyAlexaMediaGarageLightsParameters data)
    {
        _haContext.CallService("notify", "alexa_media_garage_lights", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_garage_lights integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaGarageLights(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_garage_lights", null, new NotifyAlexaMediaGarageLightsParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_justin_s_2nd_echo_pop integration.</summary>
    public void AlexaMediaJustinS2ndEchoPop(NotifyAlexaMediaJustinS2ndEchoPopParameters data)
    {
        _haContext.CallService("notify", "alexa_media_justin_s_2nd_echo_pop", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_justin_s_2nd_echo_pop integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaJustinS2ndEchoPop(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_justin_s_2nd_echo_pop", null, new NotifyAlexaMediaJustinS2ndEchoPopParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_justin_s_fire_tv integration.</summary>
    public void AlexaMediaJustinSFireTv(NotifyAlexaMediaJustinSFireTvParameters data)
    {
        _haContext.CallService("notify", "alexa_media_justin_s_fire_tv", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_justin_s_fire_tv integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaJustinSFireTv(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_justin_s_fire_tv", null, new NotifyAlexaMediaJustinSFireTvParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_kitchen integration.</summary>
    public void AlexaMediaKitchen(NotifyAlexaMediaKitchenParameters data)
    {
        _haContext.CallService("notify", "alexa_media_kitchen", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_kitchen integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaKitchen(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_kitchen", null, new NotifyAlexaMediaKitchenParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_last_called integration.</summary>
    public void AlexaMediaLastCalled(NotifyAlexaMediaLastCalledParameters data)
    {
        _haContext.CallService("notify", "alexa_media_last_called", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_last_called integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaLastCalled(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_last_called", null, new NotifyAlexaMediaLastCalledParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_master_bath integration.</summary>
    public void AlexaMediaMasterBath(NotifyAlexaMediaMasterBathParameters data)
    {
        _haContext.CallService("notify", "alexa_media_master_bath", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_master_bath integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaMasterBath(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_master_bath", null, new NotifyAlexaMediaMasterBathParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_office_2 integration.</summary>
    public void AlexaMediaOffice2(NotifyAlexaMediaOffice2Parameters data)
    {
        _haContext.CallService("notify", "alexa_media_office_2", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_office_2 integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaOffice2(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_office_2", null, new NotifyAlexaMediaOffice2Parameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_shawn_s_fire_tv integration.</summary>
    public void AlexaMediaShawnSFireTv(NotifyAlexaMediaShawnSFireTvParameters data)
    {
        _haContext.CallService("notify", "alexa_media_shawn_s_fire_tv", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_shawn_s_fire_tv integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaShawnSFireTv(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_shawn_s_fire_tv", null, new NotifyAlexaMediaShawnSFireTvParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_shawn_s_fire_tv_stick integration.</summary>
    public void AlexaMediaShawnSFireTvStick(NotifyAlexaMediaShawnSFireTvStickParameters data)
    {
        _haContext.CallService("notify", "alexa_media_shawn_s_fire_tv_stick", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_shawn_s_fire_tv_stick integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaShawnSFireTvStick(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_shawn_s_fire_tv_stick", null, new NotifyAlexaMediaShawnSFireTvStickParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_this_device integration.</summary>
    public void AlexaMediaThisDevice(NotifyAlexaMediaThisDeviceParameters data)
    {
        _haContext.CallService("notify", "alexa_media_this_device", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_this_device integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaThisDevice(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_this_device", null, new NotifyAlexaMediaThisDeviceParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the all_text_devices service.</summary>
    public void AllTextDevices(NotifyAllTextDevicesParameters data)
    {
        _haContext.CallService("notify", "all_text_devices", null, data);
    }

    ///<summary>Sends a notification message using the all_text_devices service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AllTextDevices(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "all_text_devices", null, new NotifyAllTextDevicesParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the all_tts_devices service.</summary>
    public void AllTtsDevices(NotifyAllTtsDevicesParameters data)
    {
        _haContext.CallService("notify", "all_tts_devices", null, data);
    }

    ///<summary>Sends a notification message using the all_tts_devices service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AllTtsDevices(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "all_tts_devices", null, new NotifyAllTtsDevicesParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the living_room_tv service.</summary>
    public void LivingRoomTv(NotifyLivingRoomTvParameters data)
    {
        _haContext.CallService("notify", "living_room_tv", null, data);
    }

    ///<summary>Sends a notification message using the living_room_tv service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void LivingRoomTv(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "living_room_tv", null, new NotifyLivingRoomTvParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_cuddle_bear integration.</summary>
    public void MobileAppCuddleBear(NotifyMobileAppCuddleBearParameters data)
    {
        _haContext.CallService("notify", "mobile_app_cuddle_bear", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_cuddle_bear integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppCuddleBear(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_cuddle_bear", null, new NotifyMobileAppCuddleBearParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_husbear integration.</summary>
    public void MobileAppHusbear(NotifyMobileAppHusbearParameters data)
    {
        _haContext.CallService("notify", "mobile_app_husbear", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_husbear integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppHusbear(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_husbear", null, new NotifyMobileAppHusbearParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_ipad integration.</summary>
    public void MobileAppIpad(NotifyMobileAppIpadParameters data)
    {
        _haContext.CallService("notify", "mobile_app_ipad", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_ipad integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppIpad(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_ipad", null, new NotifyMobileAppIpadParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_lyriq integration.</summary>
    public void MobileAppLyriq(NotifyMobileAppLyriqParameters data)
    {
        _haContext.CallService("notify", "mobile_app_lyriq", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_lyriq integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppLyriq(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_lyriq", null, new NotifyMobileAppLyriqParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_shawns_ipad integration.</summary>
    public void MobileAppShawnsIpad(NotifyMobileAppShawnsIpadParameters data)
    {
        _haContext.CallService("notify", "mobile_app_shawns_ipad", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_shawns_ipad integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppShawnsIpad(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_shawns_ipad", null, new NotifyMobileAppShawnsIpadParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_shawns_iphone integration.</summary>
    public void MobileAppShawnsIphone(NotifyMobileAppShawnsIphoneParameters data)
    {
        _haContext.CallService("notify", "mobile_app_shawns_iphone", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_shawns_iphone integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppShawnsIphone(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_shawns_iphone", null, new NotifyMobileAppShawnsIphoneParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_shawns_macbook_pro integration.</summary>
    public void MobileAppShawnsMacbookPro(NotifyMobileAppShawnsMacbookProParameters data)
    {
        _haContext.CallService("notify", "mobile_app_shawns_macbook_pro", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_shawns_macbook_pro integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppShawnsMacbookPro(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_shawns_macbook_pro", null, new NotifyMobileAppShawnsMacbookProParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    public void Notify(NotifyNotifyParameters data)
    {
        _haContext.CallService("notify", "notify", null, data);
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void Notify(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "notify", null, new NotifyNotifyParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification that is visible in the notifications panel.</summary>
    public void PersistentNotification(NotifyPersistentNotificationParameters data)
    {
        _haContext.CallService("notify", "persistent_notification", null, data);
    }

    ///<summary>Sends a notification that is visible in the notifications panel.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title of the notification. eg: Your Garage Door Friend</param>
    ///<param name="data">Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.. eg: platform specific</param>
    public void PersistentNotification(string message, string? title = null, object? data = null)
    {
        _haContext.CallService("notify", "persistent_notification", null, new NotifyPersistentNotificationParameters { Message = message, Title = title, Data = data });
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendMessage(ServiceTarget target, NotifySendMessageParameters data)
    {
        _haContext.CallService("notify", "send_message", target, data);
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="message">Your notification message.</param>
    ///<param name="title">Title for your notification message.</param>
    public void SendMessage(ServiceTarget target, string message, string? title = null)
    {
        _haContext.CallService("notify", "send_message", target, new NotifySendMessageParameters { Message = message, Title = title });
    }
}

public partial record NotifyAlexaMediaParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaDownstairsTvParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaEverywhereParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaFrontOfficeDotParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaGarageParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaGarageEchoParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaGarageLightsParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaJustinS2ndEchoPopParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaJustinSFireTvParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaKitchenParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaLastCalledParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaMasterBathParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaOffice2Parameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaShawnSFireTvParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaShawnSFireTvStickParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaThisDeviceParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAllTextDevicesParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAllTtsDevicesParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyLivingRoomTvParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppCuddleBearParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppHusbearParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppIpadParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppLyriqParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppShawnsIpadParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppShawnsIphoneParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppShawnsMacbookProParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyNotifyParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyPersistentNotificationParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title of the notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifySendMessageParameters
{
    ///<summary>Your notification message.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification message.</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }
}

public partial class NumberServices
{
    private readonly IHaContext _haContext;
    public NumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, NumberSetValueParameters data)
    {
        _haContext.CallService("number", "set_value", target, data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="value">The target value to set. eg: 42</param>
    public void SetValue(ServiceTarget target, string? value = null)
    {
        _haContext.CallService("number", "set_value", target, new NumberSetValueParameters { Value = value });
    }
}

public partial record NumberSetValueParameters
{
    ///<summary>The target value to set. eg: 42</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class PersistentNotificationServices
{
    private readonly IHaContext _haContext;
    public PersistentNotificationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Shows a notification on the notifications panel.</summary>
    public void Create(PersistentNotificationCreateParameters data)
    {
        _haContext.CallService("persistent_notification", "create", null, data);
    }

    ///<summary>Shows a notification on the notifications panel.</summary>
    ///<param name="message">Message body of the notification. eg: Please check your configuration.yaml.</param>
    ///<param name="title">Optional title of the notification. eg: Test notification</param>
    ///<param name="notificationId">ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</param>
    public void Create(string message, string? title = null, string? notificationId = null)
    {
        _haContext.CallService("persistent_notification", "create", null, new PersistentNotificationCreateParameters { Message = message, Title = title, NotificationId = notificationId });
    }

    ///<summary>Deletes a notification from the notifications panel.</summary>
    public void Dismiss(PersistentNotificationDismissParameters data)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, data);
    }

    ///<summary>Deletes a notification from the notifications panel.</summary>
    ///<param name="notificationId">ID of the notification to be deleted. eg: 1234</param>
    public void Dismiss(string notificationId)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, new PersistentNotificationDismissParameters { NotificationId = notificationId });
    }

    ///<summary>Deletes all notifications from the notifications panel.</summary>
    public void DismissAll(object? data = null)
    {
        _haContext.CallService("persistent_notification", "dismiss_all", null, data);
    }
}

public partial record PersistentNotificationCreateParameters
{
    ///<summary>Message body of the notification. eg: Please check your configuration.yaml.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Optional title of the notification. eg: Test notification</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial record PersistentNotificationDismissParameters
{
    ///<summary>ID of the notification to be deleted. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial class PersonServices
{
    private readonly IHaContext _haContext;
    public PersonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads persons from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("person", "reload", null, data);
    }
}

public partial class RecorderServices
{
    private readonly IHaContext _haContext;
    public RecorderServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Stops the recording of events and state changes.</summary>
    public void Disable(object? data = null)
    {
        _haContext.CallService("recorder", "disable", null, data);
    }

    ///<summary>Starts the recording of events and state changes.</summary>
    public void Enable(object? data = null)
    {
        _haContext.CallService("recorder", "enable", null, data);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    public void Purge(RecorderPurgeParameters data)
    {
        _haContext.CallService("recorder", "purge", null, data);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    ///<param name="keepDays">Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</param>
    ///<param name="repack">Attempt to save disk space by rewriting the entire database file.</param>
    ///<param name="applyFilter">Apply `entity_id` and `event_type` filters in addition to time-based purge.</param>
    public void Purge(double? keepDays = null, bool? repack = null, bool? applyFilter = null)
    {
        _haContext.CallService("recorder", "purge", null, new RecorderPurgeParameters { KeepDays = keepDays, Repack = repack, ApplyFilter = applyFilter });
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    public void PurgeEntities(RecorderPurgeEntitiesParameters data)
    {
        _haContext.CallService("recorder", "purge_entities", null, data);
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    ///<param name="entityId">List of entities for which the data is to be removed from the recorder database.</param>
    ///<param name="domains">List of domains for which the data needs to be removed from the recorder database. eg: sun</param>
    ///<param name="entityGlobs">List of glob patterns used to select the entities for which the data is to be removed from the recorder database. eg: domain*.object_id*</param>
    ///<param name="keepDays">Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</param>
    public void PurgeEntities(IEnumerable<string>? entityId = null, object? domains = null, object? entityGlobs = null, double? keepDays = null)
    {
        _haContext.CallService("recorder", "purge_entities", null, new RecorderPurgeEntitiesParameters { EntityId = entityId, Domains = domains, EntityGlobs = entityGlobs, KeepDays = keepDays });
    }
}

public partial record RecorderPurgeParameters
{
    ///<summary>Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</summary>
    [JsonPropertyName("keep_days")]
    public double? KeepDays { get; init; }

    ///<summary>Attempt to save disk space by rewriting the entire database file.</summary>
    [JsonPropertyName("repack")]
    public bool? Repack { get; init; }

    ///<summary>Apply `entity_id` and `event_type` filters in addition to time-based purge.</summary>
    [JsonPropertyName("apply_filter")]
    public bool? ApplyFilter { get; init; }
}

public partial record RecorderPurgeEntitiesParameters
{
    ///<summary>List of entities for which the data is to be removed from the recorder database.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }

    ///<summary>List of domains for which the data needs to be removed from the recorder database. eg: sun</summary>
    [JsonPropertyName("domains")]
    public object? Domains { get; init; }

    ///<summary>List of glob patterns used to select the entities for which the data is to be removed from the recorder database. eg: domain*.object_id*</summary>
    [JsonPropertyName("entity_globs")]
    public object? EntityGlobs { get; init; }

    ///<summary>Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</summary>
    [JsonPropertyName("keep_days")]
    public double? KeepDays { get; init; }
}

public partial class RemoteServices
{
    private readonly IHaContext _haContext;
    public RemoteServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The target for this service call</param>
    public void DeleteCommand(ServiceTarget target, RemoteDeleteCommandParameters data)
    {
        _haContext.CallService("remote", "delete_command", target, data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public void DeleteCommand(ServiceTarget target, object command, string? device = null)
    {
        _haContext.CallService("remote", "delete_command", target, new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void LearnCommand(ServiceTarget target, RemoteLearnCommandParameters data)
    {
        _haContext.CallService("remote", "learn_command", target, data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public void LearnCommand(ServiceTarget target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        _haContext.CallService("remote", "learn_command", target, new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, RemoteSendCommandParameters data)
    {
        _haContext.CallService("remote", "send_command", target, data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public void SendCommand(ServiceTarget target, object command, string? device = null, double? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        _haContext.CallService("remote", "send_command", target, new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Sends the toggle command.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("remote", "toggle", target, data);
    }

    ///<summary>Sends the turn off command.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("remote", "turn_off", target, data);
    }

    ///<summary>Sends the turn on command.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, RemoteTurnOnParameters data)
    {
        _haContext.CallService("remote", "turn_on", target, data);
    }

    ///<summary>Sends the turn on command.</summary>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public void TurnOn(ServiceTarget target, string? activity = null)
    {
        _haContext.CallService("remote", "turn_on", target, new RemoteTurnOnParameters { Activity = activity });
    }
}

public partial record RemoteDeleteCommandParameters
{
    ///<summary>Device from which commands will be deleted. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>The single command or the list of commands to be deleted. eg: Mute</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }
}

public partial record RemoteLearnCommandParameters
{
    ///<summary>Device ID to learn command from. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to learn. eg: Turn on</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The type of command to be learned.</summary>
    [JsonPropertyName("command_type")]
    public object? CommandType { get; init; }

    ///<summary>If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</summary>
    [JsonPropertyName("alternative")]
    public bool? Alternative { get; init; }

    ///<summary>Timeout for the command to be learned.</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }
}

public partial record RemoteSendCommandParameters
{
    ///<summary>Device ID to send command to. eg: 32756745</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to send. eg: Play</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The number of times you want to repeat the commands.</summary>
    [JsonPropertyName("num_repeats")]
    public double? NumRepeats { get; init; }

    ///<summary>The time you want to wait in between repeated commands.</summary>
    [JsonPropertyName("delay_secs")]
    public double? DelaySecs { get; init; }

    ///<summary>The time you want to have it held before the release is send.</summary>
    [JsonPropertyName("hold_secs")]
    public double? HoldSecs { get; init; }
}

public partial record RemoteTurnOnParameters
{
    ///<summary>Activity ID or activity name to be started. eg: BedroomTV</summary>
    [JsonPropertyName("activity")]
    public string? Activity { get; init; }
}

public partial class ReolinkServices
{
    private readonly IHaContext _haContext;
    public ReolinkServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Plays a ringtone on a Reolink Chime.</summary>
    public void PlayChime(ReolinkPlayChimeParameters data)
    {
        _haContext.CallService("reolink", "play_chime", null, data);
    }

    ///<summary>Plays a ringtone on a Reolink Chime.</summary>
    ///<param name="deviceId">The Reolink Chime to play the ringtone on.</param>
    ///<param name="ringtone">Ringtone to play.</param>
    public void PlayChime(IEnumerable<string> deviceId, object ringtone)
    {
        _haContext.CallService("reolink", "play_chime", null, new ReolinkPlayChimeParameters { DeviceId = deviceId, Ringtone = ringtone });
    }

    ///<summary>Moves the camera with a specific speed.</summary>
    ///<param name="target">The target for this service call</param>
    public void PtzMove(ServiceTarget target, ReolinkPtzMoveParameters data)
    {
        _haContext.CallService("reolink", "ptz_move", target, data);
    }

    ///<summary>Moves the camera with a specific speed.</summary>
    ///<param name="speed">PTZ move speed.</param>
    public void PtzMove(ServiceTarget target, long speed)
    {
        _haContext.CallService("reolink", "ptz_move", target, new ReolinkPtzMoveParameters { Speed = speed });
    }
}

public partial record ReolinkPlayChimeParameters
{
    ///<summary>The Reolink Chime to play the ringtone on.</summary>
    [JsonPropertyName("device_id")]
    public IEnumerable<string>? DeviceId { get; init; }

    ///<summary>Ringtone to play.</summary>
    [JsonPropertyName("ringtone")]
    public object? Ringtone { get; init; }
}

public partial record ReolinkPtzMoveParameters
{
    ///<summary>PTZ move speed.</summary>
    [JsonPropertyName("speed")]
    public long? Speed { get; init; }
}

public partial class SceneServices
{
    private readonly IHaContext _haContext;
    public SceneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Activates a scene with configuration.</summary>
    public void Apply(SceneApplyParameters data)
    {
        _haContext.CallService("scene", "apply", null, data);
    }

    ///<summary>Activates a scene with configuration.</summary>
    ///<param name="entities">List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void Apply(object entities, double? transition = null)
    {
        _haContext.CallService("scene", "apply", null, new SceneApplyParameters { Entities = entities, Transition = transition });
    }

    ///<summary>Creates a new scene.</summary>
    public void Create(SceneCreateParameters data)
    {
        _haContext.CallService("scene", "create", null, data);
    }

    ///<summary>Creates a new scene.</summary>
    ///<param name="sceneId">The entity ID of the new scene. eg: all_lights</param>
    ///<param name="entities">List of entities and their target state. If your entities are already in the target state right now, use &apos;Entities snapshot&apos; instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </param>
    ///<param name="snapshotEntities">List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine &apos;Entities snapshot&apos; with &apos;Entity states&apos;. eg: - light.ceiling - light.kitchen </param>
    public void Create(string sceneId, object? entities = null, IEnumerable<string>? snapshotEntities = null)
    {
        _haContext.CallService("scene", "create", null, new SceneCreateParameters { SceneId = sceneId, Entities = entities, SnapshotEntities = snapshotEntities });
    }

    ///<summary>Deletes a dynamically created scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void Delete(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("scene", "delete", target, data);
    }

    ///<summary>Reloads the scenes from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("scene", "reload", null, data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SceneTurnOnParameters data)
    {
        _haContext.CallService("scene", "turn_on", target, data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void TurnOn(ServiceTarget target, double? transition = null)
    {
        _haContext.CallService("scene", "turn_on", target, new SceneTurnOnParameters { Transition = transition });
    }
}

public partial record SceneApplyParameters
{
    ///<summary>List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }
}

public partial record SceneCreateParameters
{
    ///<summary>The entity ID of the new scene. eg: all_lights</summary>
    [JsonPropertyName("scene_id")]
    public string? SceneId { get; init; }

    ///<summary>List of entities and their target state. If your entities are already in the target state right now, use &apos;Entities snapshot&apos; instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine &apos;Entities snapshot&apos; with &apos;Entity states&apos;. eg: - light.ceiling - light.kitchen </summary>
    [JsonPropertyName("snapshot_entities")]
    public IEnumerable<string>? SnapshotEntities { get; init; }
}

public partial record SceneTurnOnParameters
{
    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }
}

public partial class ScheduleServices
{
    private readonly IHaContext _haContext;
    public ScheduleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads schedules from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("schedule", "reload", null, data);
    }
}

public partial class ScriptServices
{
    private readonly IHaContext _haContext;
    public ScriptServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public void DelayGarageLightOff(object? data = null)
    {
        _haContext.CallService("script", "delay_garage_light_off", null, data);
    }

    public Task<JsonElement?> DelayGarageLightOffAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "delay_garage_light_off", null, data);
    }

    public void DelayedGarageClose(object? data = null)
    {
        _haContext.CallService("script", "delayed_garage_close", null, data);
    }

    public Task<JsonElement?> DelayedGarageCloseAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "delayed_garage_close", null, data);
    }

    public void HomeStateManager(object? data = null)
    {
        _haContext.CallService("script", "home_state_manager", null, data);
    }

    public Task<JsonElement?> HomeStateManagerAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "home_state_manager", null, data);
    }

    public void HouseSleepyTime(object? data = null)
    {
        _haContext.CallService("script", "house_sleepy_time", null, data);
    }

    public Task<JsonElement?> HouseSleepyTimeAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "house_sleepy_time", null, data);
    }

    public void KitchenAlexaTts(ScriptKitchenAlexaTtsParameters data)
    {
        _haContext.CallService("script", "kitchen_alexa_tts", null, data);
    }

    ///<param name="message">The notification message to send eg: Hello from Home Assistant!</param>
    public void KitchenAlexaTts(object message)
    {
        _haContext.CallService("script", "kitchen_alexa_tts", null, new ScriptKitchenAlexaTtsParameters { Message = message });
    }

    public Task<JsonElement?> KitchenAlexaTtsAsync(ScriptKitchenAlexaTtsParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("script", "kitchen_alexa_tts", null, data);
    }

    ///<param name="message">The notification message to send eg: Hello from Home Assistant!</param>
    public Task<JsonElement?> KitchenAlexaTtsAsync(object message)
    {
        return _haContext.CallServiceWithResponseAsync("script", "kitchen_alexa_tts", null, new ScriptKitchenAlexaTtsParameters { Message = message });
    }

    public void MainSceneDependingOnTimeOfDay(object? data = null)
    {
        _haContext.CallService("script", "main_scene_depending_on_time_of_day", null, data);
    }

    public Task<JsonElement?> MainSceneDependingOnTimeOfDayAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "main_scene_depending_on_time_of_day", null, data);
    }

    public void MasterSceneDependingOnTimeOfDay(object? data = null)
    {
        _haContext.CallService("script", "master_scene_depending_on_time_of_day", null, data);
    }

    public Task<JsonElement?> MasterSceneDependingOnTimeOfDayAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "master_scene_depending_on_time_of_day", null, data);
    }

    public void Notifcationtest(object? data = null)
    {
        _haContext.CallService("script", "notifcationtest", null, data);
    }

    public Task<JsonElement?> NotifcationtestAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "notifcationtest", null, data);
    }

    ///<summary>Send a custom notification message to a device</summary>
    public void NotifyAllDevicesWithAMessage(ScriptNotifyAllDevicesWithAMessageParameters data)
    {
        _haContext.CallService("script", "notify_all_devices_with_a_message", null, data);
    }

    ///<summary>Send a custom notification message to a device</summary>
    ///<param name="message">The notification message to send eg: Hello from Home Assistant!</param>
    public void NotifyAllDevicesWithAMessage(object message)
    {
        _haContext.CallService("script", "notify_all_devices_with_a_message", null, new ScriptNotifyAllDevicesWithAMessageParameters { Message = message });
    }

    ///<summary>Send a custom notification message to a device</summary>
    public Task<JsonElement?> NotifyAllDevicesWithAMessageAsync(ScriptNotifyAllDevicesWithAMessageParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("script", "notify_all_devices_with_a_message", null, data);
    }

    ///<summary>Send a custom notification message to a device</summary>
    ///<param name="message">The notification message to send eg: Hello from Home Assistant!</param>
    public Task<JsonElement?> NotifyAllDevicesWithAMessageAsync(object message)
    {
        return _haContext.CallServiceWithResponseAsync("script", "notify_all_devices_with_a_message", null, new ScriptNotifyAllDevicesWithAMessageParameters { Message = message });
    }

    public void OutsideLightsStateMachine(object? data = null)
    {
        _haContext.CallService("script", "outside_lights_state_machine", null, data);
    }

    public Task<JsonElement?> OutsideLightsStateMachineAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "outside_lights_state_machine", null, data);
    }

    ///<summary>Reloads all the available scripts.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("script", "reload", null, data);
    }

    public void ShawnOff(object? data = null)
    {
        _haContext.CallService("script", "shawn_off", null, data);
    }

    public Task<JsonElement?> ShawnOffAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "shawn_off", null, data);
    }

    public void ShawnOfficeTts(ScriptShawnOfficeTtsParameters data)
    {
        _haContext.CallService("script", "shawn_office_tts", null, data);
    }

    ///<param name="message">The notification message to send eg: Hello from Home Assistant!</param>
    public void ShawnOfficeTts(object message)
    {
        _haContext.CallService("script", "shawn_office_tts", null, new ScriptShawnOfficeTtsParameters { Message = message });
    }

    public Task<JsonElement?> ShawnOfficeTtsAsync(ScriptShawnOfficeTtsParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("script", "shawn_office_tts", null, data);
    }

    ///<param name="message">The notification message to send eg: Hello from Home Assistant!</param>
    public Task<JsonElement?> ShawnOfficeTtsAsync(object message)
    {
        return _haContext.CallServiceWithResponseAsync("script", "shawn_office_tts", null, new ScriptShawnOfficeTtsParameters { Message = message });
    }

    public void ShawnOn(object? data = null)
    {
        _haContext.CallService("script", "shawn_on", null, data);
    }

    public Task<JsonElement?> ShawnOnAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "shawn_on", null, data);
    }

    public void ShawnSOfficeDaytime(object? data = null)
    {
        _haContext.CallService("script", "shawn_s_office_daytime", null, data);
    }

    public Task<JsonElement?> ShawnSOfficeDaytimeAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "shawn_s_office_daytime", null, data);
    }

    public void ShawnSOfficeLightsHalloween(object? data = null)
    {
        _haContext.CallService("script", "shawn_s_office_lights_halloween", null, data);
    }

    public Task<JsonElement?> ShawnSOfficeLightsHalloweenAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "shawn_s_office_lights_halloween", null, data);
    }

    public void ShawnSOfficeLightsRelax(object? data = null)
    {
        _haContext.CallService("script", "shawn_s_office_lights_relax", null, data);
    }

    public Task<JsonElement?> ShawnSOfficeLightsRelaxAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "shawn_s_office_lights_relax", null, data);
    }

    ///<summary>Starts a script if it isn&apos;t running, stops it otherwise.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("script", "toggle", target, data);
    }

    public void TurnJustinOfficeOff(object? data = null)
    {
        _haContext.CallService("script", "turn_justin_office_off", null, data);
    }

    public Task<JsonElement?> TurnJustinOfficeOffAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "turn_justin_office_off", null, data);
    }

    public void TurnJustinOfficeOn(object? data = null)
    {
        _haContext.CallService("script", "turn_justin_office_on", null, data);
    }

    public Task<JsonElement?> TurnJustinOfficeOnAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "turn_justin_office_on", null, data);
    }

    public void TurnMainOff(object? data = null)
    {
        _haContext.CallService("script", "turn_main_off", null, data);
    }

    public Task<JsonElement?> TurnMainOffAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "turn_main_off", null, data);
    }

    public void TurnOfMaster(object? data = null)
    {
        _haContext.CallService("script", "turn_of_master", null, data);
    }

    public Task<JsonElement?> TurnOfMasterAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "turn_of_master", null, data);
    }

    ///<summary>Stops a running script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("script", "turn_off", target, data);
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("script", "turn_on", target, data);
    }
}

public partial record ScriptKitchenAlexaTtsParameters
{
    ///<summary>The notification message to send eg: Hello from Home Assistant!</summary>
    [JsonPropertyName("message")]
    public object? Message { get; init; }
}

public partial record ScriptNotifyAllDevicesWithAMessageParameters
{
    ///<summary>The notification message to send eg: Hello from Home Assistant!</summary>
    [JsonPropertyName("message")]
    public object? Message { get; init; }
}

public partial record ScriptShawnOfficeTtsParameters
{
    ///<summary>The notification message to send eg: Hello from Home Assistant!</summary>
    [JsonPropertyName("message")]
    public object? Message { get; init; }
}

public partial class SelectServices
{
    private readonly IHaContext _haContext;
    public SelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("select", "select_first", target, data);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("select", "select_last", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, SelectSelectNextParameters data)
    {
        _haContext.CallService("select", "select_next", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_next", target, new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, SelectSelectOptionParameters data)
    {
        _haContext.CallService("select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("select", "select_option", target, new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, SelectSelectPreviousParameters data)
    {
        _haContext.CallService("select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_previous", target, new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public partial record SelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record SelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record SelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the first to the last.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial class ShoppingListServices
{
    private readonly IHaContext _haContext;
    public ShoppingListServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds an item to the shopping list.</summary>
    public void AddItem(ShoppingListAddItemParameters data)
    {
        _haContext.CallService("shopping_list", "add_item", null, data);
    }

    ///<summary>Adds an item to the shopping list.</summary>
    ///<param name="name">The name of the item to add. eg: Beer</param>
    public void AddItem(string name)
    {
        _haContext.CallService("shopping_list", "add_item", null, new ShoppingListAddItemParameters { Name = name });
    }

    ///<summary>Removes completed items from the shopping list.</summary>
    public void ClearCompletedItems(object? data = null)
    {
        _haContext.CallService("shopping_list", "clear_completed_items", null, data);
    }

    ///<summary>Marks all items as completed in the shopping list (without removing them from the list).</summary>
    public void CompleteAll(object? data = null)
    {
        _haContext.CallService("shopping_list", "complete_all", null, data);
    }

    ///<summary>Marks the first item with matching name as completed in the shopping list.</summary>
    public void CompleteItem(ShoppingListCompleteItemParameters data)
    {
        _haContext.CallService("shopping_list", "complete_item", null, data);
    }

    ///<summary>Marks the first item with matching name as completed in the shopping list.</summary>
    ///<param name="name">The name of the item to mark as completed (without removing). eg: Beer</param>
    public void CompleteItem(string name)
    {
        _haContext.CallService("shopping_list", "complete_item", null, new ShoppingListCompleteItemParameters { Name = name });
    }

    ///<summary>Marks all items as incomplete in the shopping list.</summary>
    public void IncompleteAll(object? data = null)
    {
        _haContext.CallService("shopping_list", "incomplete_all", null, data);
    }

    ///<summary>Marks the first item with matching name as incomplete in the shopping list.</summary>
    public void IncompleteItem(ShoppingListIncompleteItemParameters data)
    {
        _haContext.CallService("shopping_list", "incomplete_item", null, data);
    }

    ///<summary>Marks the first item with matching name as incomplete in the shopping list.</summary>
    ///<param name="name">The name of the item to mark as incomplete. eg: Beer</param>
    public void IncompleteItem(string name)
    {
        _haContext.CallService("shopping_list", "incomplete_item", null, new ShoppingListIncompleteItemParameters { Name = name });
    }

    ///<summary>Removes the first item with matching name from the shopping list.</summary>
    public void RemoveItem(ShoppingListRemoveItemParameters data)
    {
        _haContext.CallService("shopping_list", "remove_item", null, data);
    }

    ///<summary>Removes the first item with matching name from the shopping list.</summary>
    ///<param name="name">The name of the item to remove. eg: Beer</param>
    public void RemoveItem(string name)
    {
        _haContext.CallService("shopping_list", "remove_item", null, new ShoppingListRemoveItemParameters { Name = name });
    }

    ///<summary>Sorts all items by name in the shopping list.</summary>
    public void Sort(ShoppingListSortParameters data)
    {
        _haContext.CallService("shopping_list", "sort", null, data);
    }

    ///<summary>Sorts all items by name in the shopping list.</summary>
    ///<param name="reverse">Whether to sort in reverse (descending) order.</param>
    public void Sort(bool? reverse = null)
    {
        _haContext.CallService("shopping_list", "sort", null, new ShoppingListSortParameters { Reverse = reverse });
    }
}

public partial record ShoppingListAddItemParameters
{
    ///<summary>The name of the item to add. eg: Beer</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record ShoppingListCompleteItemParameters
{
    ///<summary>The name of the item to mark as completed (without removing). eg: Beer</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record ShoppingListIncompleteItemParameters
{
    ///<summary>The name of the item to mark as incomplete. eg: Beer</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record ShoppingListRemoveItemParameters
{
    ///<summary>The name of the item to remove. eg: Beer</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record ShoppingListSortParameters
{
    ///<summary>Whether to sort in reverse (descending) order.</summary>
    [JsonPropertyName("reverse")]
    public bool? Reverse { get; init; }
}

public partial class SirenServices
{
    private readonly IHaContext _haContext;
    public SirenServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles the siren on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("siren", "toggle", target, data);
    }

    ///<summary>Turns the siren off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("siren", "turn_off", target, data);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SirenTurnOnParameters data)
    {
        _haContext.CallService("siren", "turn_on", target, data);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="tone">The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</param>
    ///<param name="duration">Number of seconds the sound is played. Must be supported by the integration. eg: 15</param>
    public void TurnOn(ServiceTarget target, string? tone = null, double? volumeLevel = null, string? duration = null)
    {
        _haContext.CallService("siren", "turn_on", target, new SirenTurnOnParameters { Tone = tone, VolumeLevel = volumeLevel, Duration = duration });
    }
}

public partial record SirenTurnOnParameters
{
    ///<summary>The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</summary>
    [JsonPropertyName("tone")]
    public string? Tone { get; init; }

    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    ///<summary>Number of seconds the sound is played. Must be supported by the integration. eg: 15</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class SonosServices
{
    private readonly IHaContext _haContext;
    public SonosServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears a Sonos timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearSleepTimer(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("sonos", "clear_sleep_timer", target, data);
    }

    ///<summary>Returns the contents of the queue.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetQueue(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("sonos", "get_queue", target, data);
    }

    ///<summary>Returns the contents of the queue.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> GetQueueAsync(ServiceTarget target, object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("sonos", "get_queue", target, data);
    }

    ///<summary>Start playing the queue from the first item.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayQueue(ServiceTarget target, SonosPlayQueueParameters data)
    {
        _haContext.CallService("sonos", "play_queue", target, data);
    }

    ///<summary>Start playing the queue from the first item.</summary>
    ///<param name="queuePosition">Position of the song in the queue to start playing from.</param>
    public void PlayQueue(ServiceTarget target, double? queuePosition = null)
    {
        _haContext.CallService("sonos", "play_queue", target, new SonosPlayQueueParameters { QueuePosition = queuePosition });
    }

    ///<summary>Removes an item from the queue.</summary>
    ///<param name="target">The target for this service call</param>
    public void RemoveFromQueue(ServiceTarget target, SonosRemoveFromQueueParameters data)
    {
        _haContext.CallService("sonos", "remove_from_queue", target, data);
    }

    ///<summary>Removes an item from the queue.</summary>
    ///<param name="queuePosition">Position in the queue to remove.</param>
    public void RemoveFromQueue(ServiceTarget target, double? queuePosition = null)
    {
        _haContext.CallService("sonos", "remove_from_queue", target, new SonosRemoveFromQueueParameters { QueuePosition = queuePosition });
    }

    ///<summary>Restores a snapshot of the media player.</summary>
    public void Restore(SonosRestoreParameters data)
    {
        _haContext.CallService("sonos", "restore", null, data);
    }

    ///<summary>Restores a snapshot of the media player.</summary>
    ///<param name="entityId">Name of entity that will be restored.</param>
    ///<param name="withGroup">True or False. Also restore the group layout.</param>
    public void Restore(string? entityId = null, bool? withGroup = null)
    {
        _haContext.CallService("sonos", "restore", null, new SonosRestoreParameters { EntityId = entityId, WithGroup = withGroup });
    }

    ///<summary>Sets a Sonos timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSleepTimer(ServiceTarget target, SonosSetSleepTimerParameters data)
    {
        _haContext.CallService("sonos", "set_sleep_timer", target, data);
    }

    ///<summary>Sets a Sonos timer.</summary>
    ///<param name="sleepTime">Number of seconds to set the timer.</param>
    public void SetSleepTimer(ServiceTarget target, double? sleepTime = null)
    {
        _haContext.CallService("sonos", "set_sleep_timer", target, new SonosSetSleepTimerParameters { SleepTime = sleepTime });
    }

    ///<summary>Takes a snapshot of the media player.</summary>
    public void Snapshot(SonosSnapshotParameters data)
    {
        _haContext.CallService("sonos", "snapshot", null, data);
    }

    ///<summary>Takes a snapshot of the media player.</summary>
    ///<param name="entityId">Name of entity that will be snapshot.</param>
    ///<param name="withGroup">True or False. Also snapshot the group layout.</param>
    public void Snapshot(string? entityId = null, bool? withGroup = null)
    {
        _haContext.CallService("sonos", "snapshot", null, new SonosSnapshotParameters { EntityId = entityId, WithGroup = withGroup });
    }

    ///<summary>Updates an alarm with new time and volume settings.</summary>
    ///<param name="target">The target for this service call</param>
    public void UpdateAlarm(ServiceTarget target, SonosUpdateAlarmParameters data)
    {
        _haContext.CallService("sonos", "update_alarm", target, data);
    }

    ///<summary>Updates an alarm with new time and volume settings.</summary>
    ///<param name="alarmId">ID for the alarm to be updated.</param>
    ///<param name="time">Set time for the alarm. eg: 07:00</param>
    ///<param name="volume">Set alarm volume level.</param>
    ///<param name="enabled">Enable or disable the alarm.</param>
    ///<param name="includeLinkedZones">Enable or disable including grouped rooms.</param>
    public void UpdateAlarm(ServiceTarget target, double alarmId, TimeOnly? time = null, double? volume = null, bool? enabled = null, bool? includeLinkedZones = null)
    {
        _haContext.CallService("sonos", "update_alarm", target, new SonosUpdateAlarmParameters { AlarmId = alarmId, Time = time, Volume = volume, Enabled = enabled, IncludeLinkedZones = includeLinkedZones });
    }
}

public partial record SonosPlayQueueParameters
{
    ///<summary>Position of the song in the queue to start playing from.</summary>
    [JsonPropertyName("queue_position")]
    public double? QueuePosition { get; init; }
}

public partial record SonosRemoveFromQueueParameters
{
    ///<summary>Position in the queue to remove.</summary>
    [JsonPropertyName("queue_position")]
    public double? QueuePosition { get; init; }
}

public partial record SonosRestoreParameters
{
    ///<summary>Name of entity that will be restored.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>True or False. Also restore the group layout.</summary>
    [JsonPropertyName("with_group")]
    public bool? WithGroup { get; init; }
}

public partial record SonosSetSleepTimerParameters
{
    ///<summary>Number of seconds to set the timer.</summary>
    [JsonPropertyName("sleep_time")]
    public double? SleepTime { get; init; }
}

public partial record SonosSnapshotParameters
{
    ///<summary>Name of entity that will be snapshot.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>True or False. Also snapshot the group layout.</summary>
    [JsonPropertyName("with_group")]
    public bool? WithGroup { get; init; }
}

public partial record SonosUpdateAlarmParameters
{
    ///<summary>ID for the alarm to be updated.</summary>
    [JsonPropertyName("alarm_id")]
    public double? AlarmId { get; init; }

    ///<summary>Set time for the alarm. eg: 07:00</summary>
    [JsonPropertyName("time")]
    public TimeOnly? Time { get; init; }

    ///<summary>Set alarm volume level.</summary>
    [JsonPropertyName("volume")]
    public double? Volume { get; init; }

    ///<summary>Enable or disable the alarm.</summary>
    [JsonPropertyName("enabled")]
    public bool? Enabled { get; init; }

    ///<summary>Enable or disable including grouped rooms.</summary>
    [JsonPropertyName("include_linked_zones")]
    public bool? IncludeLinkedZones { get; init; }
}

public partial class SwitchServices
{
    private readonly IHaContext _haContext;
    public SwitchServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles a switch on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("switch", "toggle", target, data);
    }

    ///<summary>Turns a switch off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("switch", "turn_off", target, data);
    }

    ///<summary>Turns a switch on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("switch", "turn_on", target, data);
    }
}

public partial class SystemLogServices
{
    private readonly IHaContext _haContext;
    public SystemLogServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Deletes all log entries.</summary>
    public void Clear(object? data = null)
    {
        _haContext.CallService("system_log", "clear", null, data);
    }

    ///<summary>Write log entry.</summary>
    public void Write(SystemLogWriteParameters data)
    {
        _haContext.CallService("system_log", "write", null, data);
    }

    ///<summary>Write log entry.</summary>
    ///<param name="message">Message to log. eg: Something went wrong</param>
    ///<param name="level">Log level.</param>
    ///<param name="logger">Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</param>
    public void Write(string message, object? level = null, string? logger = null)
    {
        _haContext.CallService("system_log", "write", null, new SystemLogWriteParameters { Message = message, Level = level, Logger = logger });
    }
}

public partial record SystemLogWriteParameters
{
    ///<summary>Message to log. eg: Something went wrong</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Log level.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }

    ///<summary>Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</summary>
    [JsonPropertyName("logger")]
    public string? Logger { get; init; }
}

public partial class TemplateServices
{
    private readonly IHaContext _haContext;
    public TemplateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads template entities from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("template", "reload", null, data);
    }
}

public partial class TimerServices
{
    private readonly IHaContext _haContext;
    public TimerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Resets a timer&apos;s duration to the last known initial value without firing the timer finished event.</summary>
    ///<param name="target">The target for this service call</param>
    public void Cancel(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("timer", "cancel", target, data);
    }

    ///<summary>Changes a timer by adding or subtracting a given duration.</summary>
    ///<param name="target">The target for this service call</param>
    public void Change(ServiceTarget target, TimerChangeParameters data)
    {
        _haContext.CallService("timer", "change", target, data);
    }

    ///<summary>Changes a timer by adding or subtracting a given duration.</summary>
    ///<param name="duration">Duration to add to or subtract from the running timer. eg: 00:01:00, 60 or -60</param>
    public void Change(ServiceTarget target, string duration)
    {
        _haContext.CallService("timer", "change", target, new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Finishes a running timer earlier than scheduled.</summary>
    ///<param name="target">The target for this service call</param>
    public void Finish(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("timer", "finish", target, data);
    }

    ///<summary>Pauses a running timer, retaining the remaining duration for later continuation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("timer", "pause", target, data);
    }

    ///<summary>Reloads timers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("timer", "reload", null, data);
    }

    ///<summary>Starts a timer or restarts it with a provided duration.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target, TimerStartParameters data)
    {
        _haContext.CallService("timer", "start", target, data);
    }

    ///<summary>Starts a timer or restarts it with a provided duration.</summary>
    ///<param name="duration">Custom duration to restart the timer with. eg: 00:01:00 or 60</param>
    public void Start(ServiceTarget target, string? duration = null)
    {
        _haContext.CallService("timer", "start", target, new TimerStartParameters { Duration = duration });
    }
}

public partial record TimerChangeParameters
{
    ///<summary>Duration to add to or subtract from the running timer. eg: 00:01:00, 60 or -60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial record TimerStartParameters
{
    ///<summary>Custom duration to restart the timer with. eg: 00:01:00 or 60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class TodoServices
{
    private readonly IHaContext _haContext;
    public TodoServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds a new to-do list item.</summary>
    ///<param name="target">The target for this service call</param>
    public void AddItem(ServiceTarget target, TodoAddItemParameters data)
    {
        _haContext.CallService("todo", "add_item", target, data);
    }

    ///<summary>Adds a new to-do list item.</summary>
    ///<param name="item">The name that represents the to-do item. eg: Submit income tax return</param>
    ///<param name="dueDate">The date the to-do item is expected to be completed. eg: 2023-11-17</param>
    ///<param name="dueDatetime">The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</param>
    ///<param name="description">A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</param>
    public void AddItem(ServiceTarget target, string item, DateOnly? dueDate = null, DateTime? dueDatetime = null, string? description = null)
    {
        _haContext.CallService("todo", "add_item", target, new TodoAddItemParameters { Item = item, DueDate = dueDate, DueDatetime = dueDatetime, Description = description });
    }

    ///<summary>Gets items on a to-do list.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetItems(ServiceTarget target, TodoGetItemsParameters data)
    {
        _haContext.CallService("todo", "get_items", target, data);
    }

    ///<summary>Gets items on a to-do list.</summary>
    ///<param name="status">Only return to-do items with the specified statuses. Returns not completed actions by default. eg: needs_action</param>
    public void GetItems(ServiceTarget target, IEnumerable<object>? status = null)
    {
        _haContext.CallService("todo", "get_items", target, new TodoGetItemsParameters { Status = status });
    }

    ///<summary>Gets items on a to-do list.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> GetItemsAsync(ServiceTarget target, TodoGetItemsParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("todo", "get_items", target, data);
    }

    ///<summary>Gets items on a to-do list.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="status">Only return to-do items with the specified statuses. Returns not completed actions by default. eg: needs_action</param>
    public Task<JsonElement?> GetItemsAsync(ServiceTarget target, IEnumerable<object>? status = null)
    {
        return _haContext.CallServiceWithResponseAsync("todo", "get_items", target, new TodoGetItemsParameters { Status = status });
    }

    ///<summary>Removes all to-do list items that have been completed.</summary>
    ///<param name="target">The target for this service call</param>
    public void RemoveCompletedItems(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("todo", "remove_completed_items", target, data);
    }

    ///<summary>Removes an existing to-do list item by its name.</summary>
    ///<param name="target">The target for this service call</param>
    public void RemoveItem(ServiceTarget target, TodoRemoveItemParameters data)
    {
        _haContext.CallService("todo", "remove_item", target, data);
    }

    ///<summary>Removes an existing to-do list item by its name.</summary>
    ///<param name="item">The name for the to-do list item.</param>
    public void RemoveItem(ServiceTarget target, string item)
    {
        _haContext.CallService("todo", "remove_item", target, new TodoRemoveItemParameters { Item = item });
    }

    ///<summary>Updates an existing to-do list item based on its name.</summary>
    ///<param name="target">The target for this service call</param>
    public void UpdateItem(ServiceTarget target, TodoUpdateItemParameters data)
    {
        _haContext.CallService("todo", "update_item", target, data);
    }

    ///<summary>Updates an existing to-do list item based on its name.</summary>
    ///<param name="item">The current name of the to-do item. eg: Submit income tax return</param>
    ///<param name="rename">The new name for the to-do item eg: Something else</param>
    ///<param name="status">A status or confirmation of the to-do item. eg: needs_action</param>
    ///<param name="dueDate">The date the to-do item is expected to be completed. eg: 2023-11-17</param>
    ///<param name="dueDatetime">The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</param>
    ///<param name="description">A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</param>
    public void UpdateItem(ServiceTarget target, string item, string? rename = null, object? status = null, DateOnly? dueDate = null, DateTime? dueDatetime = null, string? description = null)
    {
        _haContext.CallService("todo", "update_item", target, new TodoUpdateItemParameters { Item = item, Rename = rename, Status = status, DueDate = dueDate, DueDatetime = dueDatetime, Description = description });
    }
}

public partial record TodoAddItemParameters
{
    ///<summary>The name that represents the to-do item. eg: Submit income tax return</summary>
    [JsonPropertyName("item")]
    public string? Item { get; init; }

    ///<summary>The date the to-do item is expected to be completed. eg: 2023-11-17</summary>
    [JsonPropertyName("due_date")]
    public DateOnly? DueDate { get; init; }

    ///<summary>The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</summary>
    [JsonPropertyName("due_datetime")]
    public DateTime? DueDatetime { get; init; }

    ///<summary>A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }
}

public partial record TodoGetItemsParameters
{
    ///<summary>Only return to-do items with the specified statuses. Returns not completed actions by default. eg: needs_action</summary>
    [JsonPropertyName("status")]
    public IEnumerable<object>? Status { get; init; }
}

public partial record TodoRemoveItemParameters
{
    ///<summary>The name for the to-do list item.</summary>
    [JsonPropertyName("item")]
    public string? Item { get; init; }
}

public partial record TodoUpdateItemParameters
{
    ///<summary>The current name of the to-do item. eg: Submit income tax return</summary>
    [JsonPropertyName("item")]
    public string? Item { get; init; }

    ///<summary>The new name for the to-do item eg: Something else</summary>
    [JsonPropertyName("rename")]
    public string? Rename { get; init; }

    ///<summary>A status or confirmation of the to-do item. eg: needs_action</summary>
    [JsonPropertyName("status")]
    public object? Status { get; init; }

    ///<summary>The date the to-do item is expected to be completed. eg: 2023-11-17</summary>
    [JsonPropertyName("due_date")]
    public DateOnly? DueDate { get; init; }

    ///<summary>The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</summary>
    [JsonPropertyName("due_datetime")]
    public DateTime? DueDatetime { get; init; }

    ///<summary>A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }
}

public partial class TodoistServices
{
    private readonly IHaContext _haContext;
    public TodoistServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Creates a new task and add it to a project.</summary>
    public void NewTask(TodoistNewTaskParameters data)
    {
        _haContext.CallService("todoist", "new_task", null, data);
    }

    ///<summary>Creates a new task and add it to a project.</summary>
    ///<param name="content">The name of the task. eg: Pick up the mail.</param>
    ///<param name="description">A description for the task.</param>
    ///<param name="project">The name of the project this task should belong to. eg: Errands</param>
    ///<param name="section">The name of a section within the project to add the task to. eg: Deliveries</param>
    ///<param name="labels">Any labels that you want to apply to this task, separated by a comma. eg: Chores,Delivieries</param>
    ///<param name="assignee">A members username of a shared project to assign this task to. eg: username</param>
    ///<param name="priority">The priority of this task, from 1 (normal) to 4 (urgent).</param>
    ///<param name="dueDateString">The day this task is due, in natural language. eg: Tomorrow</param>
    ///<param name="dueDateLang">The language of due_date_string.</param>
    ///<param name="dueDate">The time this task is due, in format YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS, in UTC timezone. eg: 2019-10-22</param>
    ///<param name="reminderDateString">When should user be reminded of this task, in natural language. eg: Tomorrow</param>
    ///<param name="reminderDateLang">The language of reminder_date_string.</param>
    ///<param name="reminderDate">When should user be reminded of this task, in format YYYY-MM-DDTHH:MM:SS, in UTC timezone. eg: 2019-10-22T10:30:00</param>
    public void NewTask(string content, string? description = null, string? project = null, string? section = null, string? labels = null, string? assignee = null, double? priority = null, string? dueDateString = null, object? dueDateLang = null, string? dueDate = null, string? reminderDateString = null, object? reminderDateLang = null, string? reminderDate = null)
    {
        _haContext.CallService("todoist", "new_task", null, new TodoistNewTaskParameters { Content = content, Description = description, Project = project, Section = section, Labels = labels, Assignee = assignee, Priority = priority, DueDateString = dueDateString, DueDateLang = dueDateLang, DueDate = dueDate, ReminderDateString = reminderDateString, ReminderDateLang = reminderDateLang, ReminderDate = reminderDate });
    }
}

public partial record TodoistNewTaskParameters
{
    ///<summary>The name of the task. eg: Pick up the mail.</summary>
    [JsonPropertyName("content")]
    public string? Content { get; init; }

    ///<summary>A description for the task.</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }

    ///<summary>The name of the project this task should belong to. eg: Errands</summary>
    [JsonPropertyName("project")]
    public string? Project { get; init; }

    ///<summary>The name of a section within the project to add the task to. eg: Deliveries</summary>
    [JsonPropertyName("section")]
    public string? Section { get; init; }

    ///<summary>Any labels that you want to apply to this task, separated by a comma. eg: Chores,Delivieries</summary>
    [JsonPropertyName("labels")]
    public string? Labels { get; init; }

    ///<summary>A members username of a shared project to assign this task to. eg: username</summary>
    [JsonPropertyName("assignee")]
    public string? Assignee { get; init; }

    ///<summary>The priority of this task, from 1 (normal) to 4 (urgent).</summary>
    [JsonPropertyName("priority")]
    public double? Priority { get; init; }

    ///<summary>The day this task is due, in natural language. eg: Tomorrow</summary>
    [JsonPropertyName("due_date_string")]
    public string? DueDateString { get; init; }

    ///<summary>The language of due_date_string.</summary>
    [JsonPropertyName("due_date_lang")]
    public object? DueDateLang { get; init; }

    ///<summary>The time this task is due, in format YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS, in UTC timezone. eg: 2019-10-22</summary>
    [JsonPropertyName("due_date")]
    public string? DueDate { get; init; }

    ///<summary>When should user be reminded of this task, in natural language. eg: Tomorrow</summary>
    [JsonPropertyName("reminder_date_string")]
    public string? ReminderDateString { get; init; }

    ///<summary>The language of reminder_date_string.</summary>
    [JsonPropertyName("reminder_date_lang")]
    public object? ReminderDateLang { get; init; }

    ///<summary>When should user be reminded of this task, in format YYYY-MM-DDTHH:MM:SS, in UTC timezone. eg: 2019-10-22T10:30:00</summary>
    [JsonPropertyName("reminder_date")]
    public string? ReminderDate { get; init; }
}

public partial class TtsServices
{
    private readonly IHaContext _haContext;
    public TtsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes all cached text-to-speech files and purges the memory.</summary>
    public void ClearCache(object? data = null)
    {
        _haContext.CallService("tts", "clear_cache", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    public void CloudSay(TtsCloudSayParameters data)
    {
        _haContext.CallService("tts", "cloud_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    ///<param name="entityId"></param>
    ///<param name="message"> eg: My name is hanna</param>
    ///<param name="cache"></param>
    ///<param name="language"> eg: ru</param>
    ///<param name="options"> eg: platform specific</param>
    public void CloudSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "cloud_say", null, new TtsCloudSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void Speak(ServiceTarget target, TtsSpeakParameters data)
    {
        _haContext.CallService("tts", "speak", target, data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public void Speak(ServiceTarget target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "speak", target, new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }
}

public partial record TtsCloudSayParameters
{
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary> eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary> eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsSpeakParameters
{
    ///<summary>Media players to play the message.</summary>
    [JsonPropertyName("media_player_entity_id")]
    public string? MediaPlayerEntityId { get; init; }

    ///<summary>The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Stores this message locally so that when the text is requested again, the output can be produced more quickly.</summary>
    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary>Language to use for speech generation. eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>A dictionary containing integration-specific options. eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class UpdateServices
{
    private readonly IHaContext _haContext;
    public UpdateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearSkipped(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("update", "clear_skipped", target, data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="target">The target for this service call</param>
    public void Install(ServiceTarget target, UpdateInstallParameters data)
    {
        _haContext.CallService("update", "install", target, data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update.</param>
    public void Install(ServiceTarget target, string? version = null, bool? backup = null)
    {
        _haContext.CallService("update", "install", target, new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    ///<param name="target">The target for this service call</param>
    public void Skip(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("update", "skip", target, data);
    }
}

public partial record UpdateInstallParameters
{
    ///<summary>The version to install. If omitted, the latest version will be installed. eg: 1.0.0</summary>
    [JsonPropertyName("version")]
    public string? Version { get; init; }

    ///<summary>If supported by the integration, this creates a backup before starting the update.</summary>
    [JsonPropertyName("backup")]
    public bool? Backup { get; init; }
}

public partial class VacuumServices
{
    private readonly IHaContext _haContext;
    public VacuumServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Tells the vacuum cleaner to do a spot clean-up.</summary>
    ///<param name="target">The target for this service call</param>
    public void CleanSpot(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("vacuum", "clean_spot", target, data);
    }

    ///<summary>Locates the vacuum cleaner robot.</summary>
    ///<param name="target">The target for this service call</param>
    public void Locate(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("vacuum", "locate", target, data);
    }

    ///<summary>Pauses the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("vacuum", "pause", target, data);
    }

    ///<summary>Tells the vacuum cleaner to return to its dock.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReturnToBase(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("vacuum", "return_to_base", target, data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, VacuumSendCommandParameters data)
    {
        _haContext.CallService("vacuum", "send_command", target, data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="command">Command to execute. The commands are integration-specific. eg: set_dnd_timer</param>
    ///<param name="params">Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</param>
    public void SendCommand(ServiceTarget target, string command, object? @params = null)
    {
        _haContext.CallService("vacuum", "send_command", target, new VacuumSendCommandParameters { Command = command, Params = @params });
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanSpeed(ServiceTarget target, VacuumSetFanSpeedParameters data)
    {
        _haContext.CallService("vacuum", "set_fan_speed", target, data);
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="fanSpeed">Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</param>
    public void SetFanSpeed(ServiceTarget target, string fanSpeed)
    {
        _haContext.CallService("vacuum", "set_fan_speed", target, new VacuumSetFanSpeedParameters { FanSpeed = fanSpeed });
    }

    ///<summary>Starts or resumes the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("vacuum", "start", target, data);
    }

    ///<summary>Stops the current cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Stop(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("vacuum", "stop", target, data);
    }
}

public partial record VacuumSendCommandParameters
{
    ///<summary>Command to execute. The commands are integration-specific. eg: set_dnd_timer</summary>
    [JsonPropertyName("command")]
    public string? Command { get; init; }

    ///<summary>Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</summary>
    [JsonPropertyName("params")]
    public object? Params { get; init; }
}

public partial record VacuumSetFanSpeedParameters
{
    ///<summary>Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</summary>
    [JsonPropertyName("fan_speed")]
    public string? FanSpeed { get; init; }
}

public partial class VesyncServices
{
    private readonly IHaContext _haContext;
    public VesyncServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds new VeSync devices to Home Assistant.</summary>
    public void UpdateDevices(object? data = null)
    {
        _haContext.CallService("vesync", "update_devices", null, data);
    }
}

public partial class WeatherServices
{
    private readonly IHaContext _haContext;
    public WeatherServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetForecasts(ServiceTarget target, WeatherGetForecastsParameters data)
    {
        _haContext.CallService("weather", "get_forecasts", target, data);
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public void GetForecasts(ServiceTarget target, object @type)
    {
        _haContext.CallService("weather", "get_forecasts", target, new WeatherGetForecastsParameters { Type = @type });
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> GetForecastsAsync(ServiceTarget target, WeatherGetForecastsParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("weather", "get_forecasts", target, data);
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public Task<JsonElement?> GetForecastsAsync(ServiceTarget target, object @type)
    {
        return _haContext.CallServiceWithResponseAsync("weather", "get_forecasts", target, new WeatherGetForecastsParameters { Type = @type });
    }
}

public partial record WeatherGetForecastsParameters
{
    ///<summary>Forecast type: daily, hourly or twice daily.</summary>
    [JsonPropertyName("type")]
    public object? Type { get; init; }
}

public partial class WebostvServices
{
    private readonly IHaContext _haContext;
    public WebostvServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a button press command.</summary>
    public void Button(WebostvButtonParameters data)
    {
        _haContext.CallService("webostv", "button", null, data);
    }

    ///<summary>Sends a button press command.</summary>
    ///<param name="entityId">Name(s) of the webostv entities where to run the API method.</param>
    ///<param name="button">Name of the button to press.  Known possible values are LEFT, RIGHT, DOWN, UP, HOME, MENU, BACK, ENTER, DASH, INFO, ASTERISK, CC, EXIT, MUTE, RED, GREEN, BLUE, YELLOW, VOLUMEUP, VOLUMEDOWN, CHANNELUP, CHANNELDOWN, PLAY, PAUSE, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9. eg: LEFT</param>
    public void Button(string entityId, string button)
    {
        _haContext.CallService("webostv", "button", null, new WebostvButtonParameters { EntityId = entityId, Button = button });
    }

    ///<summary>Sends a command.</summary>
    public void Command(WebostvCommandParameters data)
    {
        _haContext.CallService("webostv", "command", null, data);
    }

    ///<summary>Sends a command.</summary>
    ///<param name="entityId">Name(s) of the webostv entities where to run the API method.</param>
    ///<param name="command">Endpoint of the command. eg: system.launcher/open</param>
    ///<param name="payload">An optional payload to provide to the endpoint in the format of key value pair(s). eg: target: https://www.google.com</param>
    public void Command(string entityId, string command, object? payload = null)
    {
        _haContext.CallService("webostv", "command", null, new WebostvCommandParameters { EntityId = entityId, Command = command, Payload = payload });
    }

    ///<summary>Sends the TV the command to change sound output.</summary>
    public void SelectSoundOutput(WebostvSelectSoundOutputParameters data)
    {
        _haContext.CallService("webostv", "select_sound_output", null, data);
    }

    ///<summary>Sends the TV the command to change sound output.</summary>
    ///<param name="entityId">Name(s) of the webostv entities to change sound output on.</param>
    ///<param name="soundOutput">Name of the sound output to switch to. eg: external_speaker</param>
    public void SelectSoundOutput(string entityId, string soundOutput)
    {
        _haContext.CallService("webostv", "select_sound_output", null, new WebostvSelectSoundOutputParameters { EntityId = entityId, SoundOutput = soundOutput });
    }
}

public partial record WebostvButtonParameters
{
    ///<summary>Name(s) of the webostv entities where to run the API method.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Name of the button to press.  Known possible values are LEFT, RIGHT, DOWN, UP, HOME, MENU, BACK, ENTER, DASH, INFO, ASTERISK, CC, EXIT, MUTE, RED, GREEN, BLUE, YELLOW, VOLUMEUP, VOLUMEDOWN, CHANNELUP, CHANNELDOWN, PLAY, PAUSE, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9. eg: LEFT</summary>
    [JsonPropertyName("button")]
    public string? Button { get; init; }
}

public partial record WebostvCommandParameters
{
    ///<summary>Name(s) of the webostv entities where to run the API method.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Endpoint of the command. eg: system.launcher/open</summary>
    [JsonPropertyName("command")]
    public string? Command { get; init; }

    ///<summary>An optional payload to provide to the endpoint in the format of key value pair(s). eg: target: https://www.google.com</summary>
    [JsonPropertyName("payload")]
    public object? Payload { get; init; }
}

public partial record WebostvSelectSoundOutputParameters
{
    ///<summary>Name(s) of the webostv entities to change sound output on.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Name of the sound output to switch to. eg: external_speaker</summary>
    [JsonPropertyName("sound_output")]
    public string? SoundOutput { get; init; }
}

public partial class ZhaServices
{
    private readonly IHaContext _haContext;
    public ZhaServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearLockUserCode(ServiceTarget target, ZhaClearLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "clear_lock_user_code", target, data);
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="codeSlot">Code slot to clear code from. eg: 1</param>
    public void ClearLockUserCode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zha", "clear_lock_user_code", target, new ZhaClearLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Disables a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableLockUserCode(ServiceTarget target, ZhaDisableLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "disable_lock_user_code", target, data);
    }

    ///<summary>Disables a user code on a lock.</summary>
    ///<param name="codeSlot">Code slot to disable. eg: 1</param>
    public void DisableLockUserCode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zha", "disable_lock_user_code", target, new ZhaDisableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Enables a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableLockUserCode(ServiceTarget target, ZhaEnableLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "enable_lock_user_code", target, data);
    }

    ///<summary>Enables a user code on a lock.</summary>
    ///<param name="codeSlot">Code slot to enable. eg: 1</param>
    public void EnableLockUserCode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zha", "enable_lock_user_code", target, new ZhaEnableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Issues a command on the specified cluster on the specified entity.</summary>
    public void IssueZigbeeClusterCommand(ZhaIssueZigbeeClusterCommandParameters data)
    {
        _haContext.CallService("zha", "issue_zigbee_cluster_command", null, data);
    }

    ///<summary>Issues a command on the specified cluster on the specified entity.</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpointId">Endpoint ID for the cluster.</param>
    ///<param name="clusterId">ZCL cluster to retrieve attributes for.</param>
    ///<param name="clusterType">Type of the cluster.</param>
    ///<param name="command">ID of the command to execute.</param>
    ///<param name="commandType">Type of the command to execute.</param>
    ///<param name="args">Arguments to pass to the command. eg: [arg1, arg2, argN]</param>
    ///<param name="params">Parameters to pass to the command.</param>
    ///<param name="manufacturer">Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</param>
    public void IssueZigbeeClusterCommand(string ieee, double endpointId, double clusterId, double command, object commandType, object? clusterType = null, object? args = null, object? @params = null, string? manufacturer = null)
    {
        _haContext.CallService("zha", "issue_zigbee_cluster_command", null, new ZhaIssueZigbeeClusterCommandParameters { Ieee = ieee, EndpointId = endpointId, ClusterId = clusterId, ClusterType = clusterType, Command = command, CommandType = commandType, Args = args, Params = @params, Manufacturer = manufacturer });
    }

    ///<summary>Issue command on the specified cluster on the specified group.</summary>
    public void IssueZigbeeGroupCommand(ZhaIssueZigbeeGroupCommandParameters data)
    {
        _haContext.CallService("zha", "issue_zigbee_group_command", null, data);
    }

    ///<summary>Issue command on the specified cluster on the specified group.</summary>
    ///<param name="group">Hexadecimal address of the group. eg: 546</param>
    ///<param name="clusterId">ZCL cluster to send command to.</param>
    ///<param name="clusterType">Type of the cluster.</param>
    ///<param name="command">ID of the command to execute.</param>
    ///<param name="args">Arguments to pass to the command. eg: [arg1, arg2, argN]</param>
    ///<param name="manufacturer">Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</param>
    public void IssueZigbeeGroupCommand(string @group, double clusterId, double command, object? clusterType = null, object? args = null, string? manufacturer = null)
    {
        _haContext.CallService("zha", "issue_zigbee_group_command", null, new ZhaIssueZigbeeGroupCommandParameters { Group = @group, ClusterId = clusterId, ClusterType = clusterType, Command = command, Args = args, Manufacturer = manufacturer });
    }

    ///<summary>Allows nodes to join the Zigbee network.</summary>
    public void Permit(ZhaPermitParameters data)
    {
        _haContext.CallService("zha", "permit", null, data);
    }

    ///<summary>Allows nodes to join the Zigbee network.</summary>
    ///<param name="duration">Time to permit joins.</param>
    ///<param name="ieee">IEEE address of the node permitting new joins. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="sourceIeee">IEEE address of the joining device (must be used with the install code). eg: 00:0a:bf:00:01:10:23:35</param>
    ///<param name="installCode">Install code of the joining device (must be used with the source_ieee). eg: 1234-5678-1234-5678-AABB-CCDD-AABB-CCDD-EEFF</param>
    ///<param name="qrCode">Value of the QR install code (different between vendors). eg: Z:000D6FFFFED4163B$I:52797BF4A5084DAA8E1712B61741CA024051</param>
    public void Permit(double? duration = null, string? ieee = null, string? sourceIeee = null, string? installCode = null, string? qrCode = null)
    {
        _haContext.CallService("zha", "permit", null, new ZhaPermitParameters { Duration = duration, Ieee = ieee, SourceIeee = sourceIeee, InstallCode = installCode, QrCode = qrCode });
    }

    ///<summary>Removes a node from the Zigbee network.</summary>
    public void Remove(ZhaRemoveParameters data)
    {
        _haContext.CallService("zha", "remove", null, data);
    }

    ///<summary>Removes a node from the Zigbee network.</summary>
    ///<param name="ieee">IEEE address of the node to remove. eg: 00:0d:6f:00:05:7d:2d:34</param>
    public void Remove(string ieee)
    {
        _haContext.CallService("zha", "remove", null, new ZhaRemoveParameters { Ieee = ieee });
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetLockUserCode(ServiceTarget target, ZhaSetLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "set_lock_user_code", target, data);
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="codeSlot">Code slot to set the code in. eg: 1</param>
    ///<param name="userCode">Code to set. eg: 1234</param>
    public void SetLockUserCode(ServiceTarget target, string codeSlot, string userCode)
    {
        _haContext.CallService("zha", "set_lock_user_code", target, new ZhaSetLockUserCodeParameters { CodeSlot = codeSlot, UserCode = userCode });
    }

    ///<summary>Sets an attribute value for the specified cluster on the specified entity.</summary>
    public void SetZigbeeClusterAttribute(ZhaSetZigbeeClusterAttributeParameters data)
    {
        _haContext.CallService("zha", "set_zigbee_cluster_attribute", null, data);
    }

    ///<summary>Sets an attribute value for the specified cluster on the specified entity.</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpointId">Endpoint ID for the cluster.</param>
    ///<param name="clusterId">ZCL cluster to retrieve attributes for.</param>
    ///<param name="clusterType">Type of the cluster.</param>
    ///<param name="attribute">ID of the attribute to set. eg: 0</param>
    ///<param name="value">Value to write to the attribute. eg: 1</param>
    ///<param name="manufacturer">Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</param>
    public void SetZigbeeClusterAttribute(string ieee, double endpointId, double clusterId, double attribute, string value, object? clusterType = null, string? manufacturer = null)
    {
        _haContext.CallService("zha", "set_zigbee_cluster_attribute", null, new ZhaSetZigbeeClusterAttributeParameters { Ieee = ieee, EndpointId = endpointId, ClusterId = clusterId, ClusterType = clusterType, Attribute = attribute, Value = value, Manufacturer = manufacturer });
    }

    ///<summary>This action uses the WD capabilities to emit a quick audible/visible pulse called a &quot;squawk&quot;. The squawk command has no effect if the WD is currently active (warning in progress).</summary>
    public void WarningDeviceSquawk(ZhaWarningDeviceSquawkParameters data)
    {
        _haContext.CallService("zha", "warning_device_squawk", null, data);
    }

    ///<summary>This action uses the WD capabilities to emit a quick audible/visible pulse called a &quot;squawk&quot;. The squawk command has no effect if the WD is currently active (warning in progress).</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="mode">The Squawk Mode field is used as a 4-bit enumeration, and can have one of the values shown in Table 8-24 of the ZCL spec - Squawk Mode Field. The exact operation of each mode (how the WD “squawks”) is implementation specific.</param>
    ///<param name="strobe">The strobe field is used as a Boolean, and determines if the visual indication is also required in addition to the audible squawk, as shown in Table 8-25 of the ZCL spec - Strobe Bit.</param>
    ///<param name="level">The squawk level field is used as a 2-bit enumeration, and determines the intensity of audible squawk sound as shown in Table 8-26 of the ZCL spec - Squawk Level Field Values.</param>
    public void WarningDeviceSquawk(string ieee, double? mode = null, double? strobe = null, double? level = null)
    {
        _haContext.CallService("zha", "warning_device_squawk", null, new ZhaWarningDeviceSquawkParameters { Ieee = ieee, Mode = mode, Strobe = strobe, Level = level });
    }

    ///<summary>This action starts the operation of the warning device. The warning device alerts the surrounding area by audible (siren) and visual (strobe) signals.</summary>
    public void WarningDeviceWarn(ZhaWarningDeviceWarnParameters data)
    {
        _haContext.CallService("zha", "warning_device_warn", null, data);
    }

    ///<summary>This action starts the operation of the warning device. The warning device alerts the surrounding area by audible (siren) and visual (strobe) signals.</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="mode">The Warning Mode field is used as a 4-bit enumeration, can have one of the values 0-6 defined below in table 8-20 of the ZCL spec. The exact behavior of the warning device in each mode is according to the relevant security standards.</param>
    ///<param name="strobe">The Strobe field is used as a 2-bit enumeration, and determines if the visual indication is required in addition to the audible siren, as indicated in Table 8-21 of the ZCL spec. &quot;0&quot; means no strobe, &quot;1&quot; means strobe. If the strobe field is “1” and the Warning Mode is “0” (“Stop”), then only the strobe is activated.</param>
    ///<param name="level">The Siren Level field is used as a 2-bit enumeration, and indicates the intensity of audible squawk sound as shown in Table 8-22 of the ZCL spec.</param>
    ///<param name="duration">Requested duration of warning, in seconds (16 bit). If both Strobe and Warning Mode are &quot;0&quot; this field is ignored.</param>
    ///<param name="dutyCycle">Indicates the length of the flash cycle. This allows you to vary the flash duration for different alarm types (e.g., fire, police, burglar). The valid range is 0-100 in increments of 10. All other values must be rounded to the nearest valid value. Strobe calculates a duty cycle over a duration of one second. The ON state must precede the OFF state. For example, if the Strobe Duty Cycle field specifies “40,”, then the strobe flashes ON for 4/10ths of a second and then turns OFF for 6/10ths of a second.</param>
    ///<param name="intensity">Indicates the intensity of the strobe as shown in Table 8-23 of the ZCL spec. This attribute is designed to vary the output of the strobe (i.e., brightness) and not its frequency, which is detailed in section 8.4.2.3.1.6 of the ZCL spec.</param>
    public void WarningDeviceWarn(string ieee, double? mode = null, double? strobe = null, double? level = null, double? duration = null, long? dutyCycle = null, double? intensity = null)
    {
        _haContext.CallService("zha", "warning_device_warn", null, new ZhaWarningDeviceWarnParameters { Ieee = ieee, Mode = mode, Strobe = strobe, Level = level, Duration = duration, DutyCycle = dutyCycle, Intensity = intensity });
    }
}

public partial record ZhaClearLockUserCodeParameters
{
    ///<summary>Code slot to clear code from. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZhaDisableLockUserCodeParameters
{
    ///<summary>Code slot to disable. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZhaEnableLockUserCodeParameters
{
    ///<summary>Code slot to enable. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZhaIssueZigbeeClusterCommandParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>Endpoint ID for the cluster.</summary>
    [JsonPropertyName("endpoint_id")]
    public double? EndpointId { get; init; }

    ///<summary>ZCL cluster to retrieve attributes for.</summary>
    [JsonPropertyName("cluster_id")]
    public double? ClusterId { get; init; }

    ///<summary>Type of the cluster.</summary>
    [JsonPropertyName("cluster_type")]
    public object? ClusterType { get; init; }

    ///<summary>ID of the command to execute.</summary>
    [JsonPropertyName("command")]
    public double? Command { get; init; }

    ///<summary>Type of the command to execute.</summary>
    [JsonPropertyName("command_type")]
    public object? CommandType { get; init; }

    ///<summary>Arguments to pass to the command. eg: [arg1, arg2, argN]</summary>
    [JsonPropertyName("args")]
    public object? Args { get; init; }

    ///<summary>Parameters to pass to the command.</summary>
    [JsonPropertyName("params")]
    public object? Params { get; init; }

    ///<summary>Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</summary>
    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }
}

public partial record ZhaIssueZigbeeGroupCommandParameters
{
    ///<summary>Hexadecimal address of the group. eg: 546</summary>
    [JsonPropertyName("group")]
    public string? Group { get; init; }

    ///<summary>ZCL cluster to send command to.</summary>
    [JsonPropertyName("cluster_id")]
    public double? ClusterId { get; init; }

    ///<summary>Type of the cluster.</summary>
    [JsonPropertyName("cluster_type")]
    public object? ClusterType { get; init; }

    ///<summary>ID of the command to execute.</summary>
    [JsonPropertyName("command")]
    public double? Command { get; init; }

    ///<summary>Arguments to pass to the command. eg: [arg1, arg2, argN]</summary>
    [JsonPropertyName("args")]
    public object? Args { get; init; }

    ///<summary>Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</summary>
    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }
}

public partial record ZhaPermitParameters
{
    ///<summary>Time to permit joins.</summary>
    [JsonPropertyName("duration")]
    public double? Duration { get; init; }

    ///<summary>IEEE address of the node permitting new joins. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>IEEE address of the joining device (must be used with the install code). eg: 00:0a:bf:00:01:10:23:35</summary>
    [JsonPropertyName("source_ieee")]
    public string? SourceIeee { get; init; }

    ///<summary>Install code of the joining device (must be used with the source_ieee). eg: 1234-5678-1234-5678-AABB-CCDD-AABB-CCDD-EEFF</summary>
    [JsonPropertyName("install_code")]
    public string? InstallCode { get; init; }

    ///<summary>Value of the QR install code (different between vendors). eg: Z:000D6FFFFED4163B$I:52797BF4A5084DAA8E1712B61741CA024051</summary>
    [JsonPropertyName("qr_code")]
    public string? QrCode { get; init; }
}

public partial record ZhaRemoveParameters
{
    ///<summary>IEEE address of the node to remove. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }
}

public partial record ZhaSetLockUserCodeParameters
{
    ///<summary>Code slot to set the code in. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }

    ///<summary>Code to set. eg: 1234</summary>
    [JsonPropertyName("user_code")]
    public string? UserCode { get; init; }
}

public partial record ZhaSetZigbeeClusterAttributeParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>Endpoint ID for the cluster.</summary>
    [JsonPropertyName("endpoint_id")]
    public double? EndpointId { get; init; }

    ///<summary>ZCL cluster to retrieve attributes for.</summary>
    [JsonPropertyName("cluster_id")]
    public double? ClusterId { get; init; }

    ///<summary>Type of the cluster.</summary>
    [JsonPropertyName("cluster_type")]
    public object? ClusterType { get; init; }

    ///<summary>ID of the attribute to set. eg: 0</summary>
    [JsonPropertyName("attribute")]
    public double? Attribute { get; init; }

    ///<summary>Value to write to the attribute. eg: 1</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }

    ///<summary>Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</summary>
    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }
}

public partial record ZhaWarningDeviceSquawkParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>The Squawk Mode field is used as a 4-bit enumeration, and can have one of the values shown in Table 8-24 of the ZCL spec - Squawk Mode Field. The exact operation of each mode (how the WD “squawks”) is implementation specific.</summary>
    [JsonPropertyName("mode")]
    public double? Mode { get; init; }

    ///<summary>The strobe field is used as a Boolean, and determines if the visual indication is also required in addition to the audible squawk, as shown in Table 8-25 of the ZCL spec - Strobe Bit.</summary>
    [JsonPropertyName("strobe")]
    public double? Strobe { get; init; }

    ///<summary>The squawk level field is used as a 2-bit enumeration, and determines the intensity of audible squawk sound as shown in Table 8-26 of the ZCL spec - Squawk Level Field Values.</summary>
    [JsonPropertyName("level")]
    public double? Level { get; init; }
}

public partial record ZhaWarningDeviceWarnParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>The Warning Mode field is used as a 4-bit enumeration, can have one of the values 0-6 defined below in table 8-20 of the ZCL spec. The exact behavior of the warning device in each mode is according to the relevant security standards.</summary>
    [JsonPropertyName("mode")]
    public double? Mode { get; init; }

    ///<summary>The Strobe field is used as a 2-bit enumeration, and determines if the visual indication is required in addition to the audible siren, as indicated in Table 8-21 of the ZCL spec. &quot;0&quot; means no strobe, &quot;1&quot; means strobe. If the strobe field is “1” and the Warning Mode is “0” (“Stop”), then only the strobe is activated.</summary>
    [JsonPropertyName("strobe")]
    public double? Strobe { get; init; }

    ///<summary>The Siren Level field is used as a 2-bit enumeration, and indicates the intensity of audible squawk sound as shown in Table 8-22 of the ZCL spec.</summary>
    [JsonPropertyName("level")]
    public double? Level { get; init; }

    ///<summary>Requested duration of warning, in seconds (16 bit). If both Strobe and Warning Mode are &quot;0&quot; this field is ignored.</summary>
    [JsonPropertyName("duration")]
    public double? Duration { get; init; }

    ///<summary>Indicates the length of the flash cycle. This allows you to vary the flash duration for different alarm types (e.g., fire, police, burglar). The valid range is 0-100 in increments of 10. All other values must be rounded to the nearest valid value. Strobe calculates a duty cycle over a duration of one second. The ON state must precede the OFF state. For example, if the Strobe Duty Cycle field specifies “40,”, then the strobe flashes ON for 4/10ths of a second and then turns OFF for 6/10ths of a second.</summary>
    [JsonPropertyName("duty_cycle")]
    public long? DutyCycle { get; init; }

    ///<summary>Indicates the intensity of the strobe as shown in Table 8-23 of the ZCL spec. This attribute is designed to vary the output of the strobe (i.e., brightness) and not its frequency, which is detailed in section 8.4.2.3.1.6 of the ZCL spec.</summary>
    [JsonPropertyName("intensity")]
    public double? Intensity { get; init; }
}

public partial class ZoneServices
{
    private readonly IHaContext _haContext;
    public ZoneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads zones from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("zone", "reload", null, data);
    }
}

public partial class ZwaveJsServices
{
    private readonly IHaContext _haContext;
    public ZwaveJsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearLockUsercode(ServiceTarget target, ZwaveJsClearLockUsercodeParameters data)
    {
        _haContext.CallService("zwave_js", "clear_lock_usercode", target, data);
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="codeSlot">Code slot to clear code from. eg: 1</param>
    public void ClearLockUsercode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zwave_js", "clear_lock_usercode", target, new ZwaveJsClearLockUsercodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Force updates the values of a Z-Wave entity.</summary>
    public void RefreshValue(ZwaveJsRefreshValueParameters data)
    {
        _haContext.CallService("zwave_js", "refresh_value", null, data);
    }

    ///<summary>Force updates the values of a Z-Wave entity.</summary>
    ///<param name="entityId">Entities to refresh. eg: - sensor.family_room_motion - switch.kitchen </param>
    ///<param name="refreshAllValues">Whether to refresh all values (true) or just the primary value (false).</param>
    public void RefreshValue(IEnumerable<string> entityId, bool? refreshAllValues = null)
    {
        _haContext.CallService("zwave_js", "refresh_value", null, new ZwaveJsRefreshValueParameters { EntityId = entityId, RefreshAllValues = refreshAllValues });
    }

    ///<summary>Sets the configuration for a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetLockConfiguration(ServiceTarget target, ZwaveJsSetLockConfigurationParameters data)
    {
        _haContext.CallService("zwave_js", "set_lock_configuration", target, data);
    }

    ///<summary>Sets the configuration for a lock.</summary>
    ///<param name="operationType">The operation type of the lock. eg: timed</param>
    ///<param name="lockTimeout">Seconds until lock mode times out. Should only be used if operation type is `timed`. eg: 1</param>
    ///<param name="autoRelockTime">Duration in seconds until lock returns to secure state. Only enforced when operation type is `constant`. eg: 1</param>
    ///<param name="holdAndReleaseTime">Duration in seconds the latch stays retracted. eg: 1</param>
    ///<param name="twistAssist">Enable Twist Assist. eg: True</param>
    ///<param name="blockToBlock">Enable block-to-block functionality. eg: True</param>
    public void SetLockConfiguration(ServiceTarget target, object operationType, double? lockTimeout = null, double? autoRelockTime = null, double? holdAndReleaseTime = null, bool? twistAssist = null, bool? blockToBlock = null)
    {
        _haContext.CallService("zwave_js", "set_lock_configuration", target, new ZwaveJsSetLockConfigurationParameters { OperationType = operationType, LockTimeout = lockTimeout, AutoRelockTime = autoRelockTime, HoldAndReleaseTime = holdAndReleaseTime, TwistAssist = twistAssist, BlockToBlock = blockToBlock });
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetLockUsercode(ServiceTarget target, ZwaveJsSetLockUsercodeParameters data)
    {
        _haContext.CallService("zwave_js", "set_lock_usercode", target, data);
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="codeSlot">Code slot to set the code. eg: 1</param>
    ///<param name="usercode">Lock code to set. eg: 1234</param>
    public void SetLockUsercode(ServiceTarget target, string codeSlot, string usercode)
    {
        _haContext.CallService("zwave_js", "set_lock_usercode", target, new ZwaveJsSetLockUsercodeParameters { CodeSlot = codeSlot, Usercode = usercode });
    }
}

public partial record ZwaveJsClearLockUsercodeParameters
{
    ///<summary>Code slot to clear code from. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZwaveJsRefreshValueParameters
{
    ///<summary>Entities to refresh. eg: - sensor.family_room_motion - switch.kitchen </summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }

    ///<summary>Whether to refresh all values (true) or just the primary value (false).</summary>
    [JsonPropertyName("refresh_all_values")]
    public bool? RefreshAllValues { get; init; }
}

public partial record ZwaveJsSetLockConfigurationParameters
{
    ///<summary>The operation type of the lock. eg: timed</summary>
    [JsonPropertyName("operation_type")]
    public object? OperationType { get; init; }

    ///<summary>Seconds until lock mode times out. Should only be used if operation type is `timed`. eg: 1</summary>
    [JsonPropertyName("lock_timeout")]
    public double? LockTimeout { get; init; }

    ///<summary>Duration in seconds until lock returns to secure state. Only enforced when operation type is `constant`. eg: 1</summary>
    [JsonPropertyName("auto_relock_time")]
    public double? AutoRelockTime { get; init; }

    ///<summary>Duration in seconds the latch stays retracted. eg: 1</summary>
    [JsonPropertyName("hold_and_release_time")]
    public double? HoldAndReleaseTime { get; init; }

    ///<summary>Enable Twist Assist. eg: True</summary>
    [JsonPropertyName("twist_assist")]
    public bool? TwistAssist { get; init; }

    ///<summary>Enable block-to-block functionality. eg: True</summary>
    [JsonPropertyName("block_to_block")]
    public bool? BlockToBlock { get; init; }
}

public partial record ZwaveJsSetLockUsercodeParameters
{
    ///<summary>Code slot to set the code. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }

    ///<summary>Lock code to set. eg: 1234</summary>
    [JsonPropertyName("usercode")]
    public string? Usercode { get; init; }
}

public static class AlarmControlPanelEntityExtensionMethods
{
    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    public static void AlarmArmAway(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        target.CallService("alarm_arm_away", data);
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    public static void AlarmArmAway(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        target.CallService("alarm_arm_away", data);
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmAway(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_away", new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmAway(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_away", new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    public static void AlarmArmCustomBypass(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        target.CallService("alarm_arm_custom_bypass", data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    public static void AlarmArmCustomBypass(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        target.CallService("alarm_arm_custom_bypass", data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmCustomBypass(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_custom_bypass", new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmCustomBypass(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_custom_bypass", new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    public static void AlarmArmHome(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        target.CallService("alarm_arm_home", data);
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    public static void AlarmArmHome(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        target.CallService("alarm_arm_home", data);
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmHome(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_home", new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmHome(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_home", new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    public static void AlarmArmNight(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmNightParameters data)
    {
        target.CallService("alarm_arm_night", data);
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    public static void AlarmArmNight(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmNightParameters data)
    {
        target.CallService("alarm_arm_night", data);
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmNight(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_night", new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmNight(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_night", new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    public static void AlarmArmVacation(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        target.CallService("alarm_arm_vacation", data);
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    public static void AlarmArmVacation(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        target.CallService("alarm_arm_vacation", data);
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmVacation(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_vacation", new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmVacation(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_vacation", new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    public static void AlarmDisarm(this AlarmControlPanelEntity target, AlarmControlPanelAlarmDisarmParameters data)
    {
        target.CallService("alarm_disarm", data);
    }

    ///<summary>Disarms the alarm.</summary>
    public static void AlarmDisarm(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmDisarmParameters data)
    {
        target.CallService("alarm_disarm", data);
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public static void AlarmDisarm(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_disarm", new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public static void AlarmDisarm(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_disarm", new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Trigger the alarm manually.</summary>
    public static void AlarmTrigger(this AlarmControlPanelEntity target, AlarmControlPanelAlarmTriggerParameters data)
    {
        target.CallService("alarm_trigger", data);
    }

    ///<summary>Trigger the alarm manually.</summary>
    public static void AlarmTrigger(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmTriggerParameters data)
    {
        target.CallService("alarm_trigger", data);
    }

    ///<summary>Trigger the alarm manually.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmTrigger(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_trigger", new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }

    ///<summary>Trigger the alarm manually.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmTrigger(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_trigger", new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }
}

public static class AndroidtvEntityExtensionMethods
{
    ///<summary>Sends an ADB command to an Android / Fire TV device.</summary>
    public static void AdbCommand(this IMediaPlayerEntityCore target, AndroidtvAdbCommandParameters data)
    {
        target.CallService("adb_command", data);
    }

    ///<summary>Sends an ADB command to an Android / Fire TV device.</summary>
    public static void AdbCommand(this IEnumerable<IMediaPlayerEntityCore> target, AndroidtvAdbCommandParameters data)
    {
        target.CallService("adb_command", data);
    }

    ///<summary>Sends an ADB command to an Android / Fire TV device.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="command">Either a key command or an ADB shell command. eg: HOME</param>
    public static void AdbCommand(this IMediaPlayerEntityCore target, string command)
    {
        target.CallService("adb_command", new AndroidtvAdbCommandParameters { Command = command });
    }

    ///<summary>Sends an ADB command to an Android / Fire TV device.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="command">Either a key command or an ADB shell command. eg: HOME</param>
    public static void AdbCommand(this IEnumerable<IMediaPlayerEntityCore> target, string command)
    {
        target.CallService("adb_command", new AndroidtvAdbCommandParameters { Command = command });
    }

    ///<summary>Downloads a file from your Android / Fire TV device to your Home Assistant instance.</summary>
    public static void Download(this IMediaPlayerEntityCore target, AndroidtvDownloadParameters data)
    {
        target.CallService("download", data);
    }

    ///<summary>Downloads a file from your Android / Fire TV device to your Home Assistant instance.</summary>
    public static void Download(this IEnumerable<IMediaPlayerEntityCore> target, AndroidtvDownloadParameters data)
    {
        target.CallService("download", data);
    }

    ///<summary>Downloads a file from your Android / Fire TV device to your Home Assistant instance.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="devicePath">The filepath on the Android / Fire TV device. eg: /storage/emulated/0/Download/example.txt</param>
    ///<param name="localPath">The filepath on your Home Assistant instance. eg: /config/www/example.txt</param>
    public static void Download(this IMediaPlayerEntityCore target, string devicePath, string localPath)
    {
        target.CallService("download", new AndroidtvDownloadParameters { DevicePath = devicePath, LocalPath = localPath });
    }

    ///<summary>Downloads a file from your Android / Fire TV device to your Home Assistant instance.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="devicePath">The filepath on the Android / Fire TV device. eg: /storage/emulated/0/Download/example.txt</param>
    ///<param name="localPath">The filepath on your Home Assistant instance. eg: /config/www/example.txt</param>
    public static void Download(this IEnumerable<IMediaPlayerEntityCore> target, string devicePath, string localPath)
    {
        target.CallService("download", new AndroidtvDownloadParameters { DevicePath = devicePath, LocalPath = localPath });
    }

    ///<summary>Translates a key press on a remote into ADB &apos;sendevent&apos; commands. You must press one button on the remote within 8 seconds of performing this action.</summary>
    public static void LearnSendevent(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("learn_sendevent", data);
    }

    ///<summary>Translates a key press on a remote into ADB &apos;sendevent&apos; commands. You must press one button on the remote within 8 seconds of performing this action.</summary>
    public static void LearnSendevent(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("learn_sendevent", data);
    }

    ///<summary>Uploads a file from your Home Assistant instance to an Android / Fire TV device.</summary>
    public static void Upload(this IMediaPlayerEntityCore target, AndroidtvUploadParameters data)
    {
        target.CallService("upload", data);
    }

    ///<summary>Uploads a file from your Home Assistant instance to an Android / Fire TV device.</summary>
    public static void Upload(this IEnumerable<IMediaPlayerEntityCore> target, AndroidtvUploadParameters data)
    {
        target.CallService("upload", data);
    }

    ///<summary>Uploads a file from your Home Assistant instance to an Android / Fire TV device.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="devicePath">The filepath on the Android / Fire TV device. eg: /storage/emulated/0/Download/example.txt</param>
    ///<param name="localPath">The filepath on your Home Assistant instance. eg: /config/www/example.txt</param>
    public static void Upload(this IMediaPlayerEntityCore target, string devicePath, string localPath)
    {
        target.CallService("upload", new AndroidtvUploadParameters { DevicePath = devicePath, LocalPath = localPath });
    }

    ///<summary>Uploads a file from your Home Assistant instance to an Android / Fire TV device.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="devicePath">The filepath on the Android / Fire TV device. eg: /storage/emulated/0/Download/example.txt</param>
    ///<param name="localPath">The filepath on your Home Assistant instance. eg: /config/www/example.txt</param>
    public static void Upload(this IEnumerable<IMediaPlayerEntityCore> target, string devicePath, string localPath)
    {
        target.CallService("upload", new AndroidtvUploadParameters { DevicePath = devicePath, LocalPath = localPath });
    }
}

public static class AutomationEntityExtensionMethods
{
    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this IAutomationEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this IEnumerable<IAutomationEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this IAutomationEntityCore target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this IEnumerable<IAutomationEntityCore> target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The IAutomationEntityCore to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this IAutomationEntityCore target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The IEnumerable&lt;IAutomationEntityCore&gt; to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this IEnumerable<IAutomationEntityCore> target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this IAutomationEntityCore target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this IEnumerable<IAutomationEntityCore> target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The IAutomationEntityCore to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this IAutomationEntityCore target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The IEnumerable&lt;IAutomationEntityCore&gt; to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this IEnumerable<IAutomationEntityCore> target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this IAutomationEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this IEnumerable<IAutomationEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class BondEntityExtensionMethods
{
    ///<summary>Start decreasing the brightness of the light. (deprecated).</summary>
    public static void StartDecreasingBrightness(this ILightEntityCore target, object? data = null)
    {
        target.CallService("start_decreasing_brightness", data);
    }

    ///<summary>Start decreasing the brightness of the light. (deprecated).</summary>
    public static void StartDecreasingBrightness(this IEnumerable<ILightEntityCore> target, object? data = null)
    {
        target.CallService("start_decreasing_brightness", data);
    }

    ///<summary>Start increasing the brightness of the light. (deprecated).</summary>
    public static void StartIncreasingBrightness(this ILightEntityCore target, object? data = null)
    {
        target.CallService("start_increasing_brightness", data);
    }

    ///<summary>Start increasing the brightness of the light. (deprecated).</summary>
    public static void StartIncreasingBrightness(this IEnumerable<ILightEntityCore> target, object? data = null)
    {
        target.CallService("start_increasing_brightness", data);
    }

    ///<summary>Stop any in-progress action and empty the queue. (deprecated).</summary>
    public static void Stop(this ILightEntityCore target, object? data = null)
    {
        target.CallService("stop", data);
    }

    ///<summary>Stop any in-progress action and empty the queue. (deprecated).</summary>
    public static void Stop(this IEnumerable<ILightEntityCore> target, object? data = null)
    {
        target.CallService("stop", data);
    }
}

public static class ButtonEntityExtensionMethods
{
    ///<summary>Press the button entity.</summary>
    public static void Press(this IButtonEntityCore target, object? data = null)
    {
        target.CallService("press", data);
    }

    ///<summary>Press the button entity.</summary>
    public static void Press(this IEnumerable<IButtonEntityCore> target, object? data = null)
    {
        target.CallService("press", data);
    }
}

public static class CalendarEntityExtensionMethods
{
    ///<summary>Adds a new calendar event.</summary>
    public static void CreateEvent(this ICalendarEntityCore target, CalendarCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Adds a new calendar event.</summary>
    public static void CreateEvent(this IEnumerable<ICalendarEntityCore> target, CalendarCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this ICalendarEntityCore target, string summary, string? description = null, DateTime? startDateTime = null, DateTime? endDateTime = null, DateOnly? startDate = null, DateOnly? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The IEnumerable&lt;ICalendarEntityCore&gt; to call this service for</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this IEnumerable<ICalendarEntityCore> target, string summary, string? description = null, DateTime? startDateTime = null, DateTime? endDateTime = null, DateOnly? startDate = null, DateOnly? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    public static Task<JsonElement?> GetEventsAsync(this ICalendarEntityCore target, CalendarGetEventsParameters data)
    {
        return target.CallServiceWithResponseAsync("get_events", data);
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with Duration. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from Start time for the specified duration.</param>
    public static Task<JsonElement?> GetEventsAsync(this ICalendarEntityCore target, DateTime? startDateTime = null, DateTime? endDateTime = null, object? duration = null)
    {
        return target.CallServiceWithResponseAsync("get_events", new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    public static void GetEvents(this ICalendarEntityCore target, CalendarGetEventsParameters data)
    {
        target.CallService("get_events", data);
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    public static void GetEvents(this IEnumerable<ICalendarEntityCore> target, CalendarGetEventsParameters data)
    {
        target.CallService("get_events", data);
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with Duration. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from Start time for the specified duration.</param>
    public static void GetEvents(this ICalendarEntityCore target, DateTime? startDateTime = null, DateTime? endDateTime = null, object? duration = null)
    {
        target.CallService("get_events", new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The IEnumerable&lt;ICalendarEntityCore&gt; to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with Duration. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from Start time for the specified duration.</param>
    public static void GetEvents(this IEnumerable<ICalendarEntityCore> target, DateTime? startDateTime = null, DateTime? endDateTime = null, object? duration = null)
    {
        target.CallService("get_events", new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }
}

public static class CameraEntityExtensionMethods
{
    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("disable_motion_detection", data);
    }

    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("disable_motion_detection", data);
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("enable_motion_detection", data);
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("enable_motion_detection", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this ICameraEntityCore target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this IEnumerable<ICameraEntityCore> target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this ICameraEntityCore target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this IEnumerable<ICameraEntityCore> target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this ICameraEntityCore target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this IEnumerable<ICameraEntityCore> target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="filename">Full path to filename. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this ICameraEntityCore target, string filename, double? duration = null, double? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="filename">Full path to filename. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this IEnumerable<ICameraEntityCore> target, string filename, double? duration = null, double? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this ICameraEntityCore target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this IEnumerable<ICameraEntityCore> target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="filename">Full path to filename. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this ICameraEntityCore target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="filename">Full path to filename. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this IEnumerable<ICameraEntityCore> target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class ClimateEntityExtensionMethods
{
    ///<summary>Turns auxiliary heater on/off.</summary>
    public static void SetAuxHeat(this IClimateEntityCore target, ClimateSetAuxHeatParameters data)
    {
        target.CallService("set_aux_heat", data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    public static void SetAuxHeat(this IEnumerable<IClimateEntityCore> target, ClimateSetAuxHeatParameters data)
    {
        target.CallService("set_aux_heat", data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public static void SetAuxHeat(this IClimateEntityCore target, bool auxHeat)
    {
        target.CallService("set_aux_heat", new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public static void SetAuxHeat(this IEnumerable<IClimateEntityCore> target, bool auxHeat)
    {
        target.CallService("set_aux_heat", new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Sets fan operation mode.</summary>
    public static void SetFanMode(this IClimateEntityCore target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Sets fan operation mode.</summary>
    public static void SetFanMode(this IEnumerable<IClimateEntityCore> target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public static void SetFanMode(this IClimateEntityCore target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public static void SetFanMode(this IEnumerable<IClimateEntityCore> target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    public static void SetHumidity(this IClimateEntityCore target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Sets target humidity.</summary>
    public static void SetHumidity(this IEnumerable<IClimateEntityCore> target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="humidity">Target humidity.</param>
    public static void SetHumidity(this IClimateEntityCore target, double humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="humidity">Target humidity.</param>
    public static void SetHumidity(this IEnumerable<IClimateEntityCore> target, double humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    public static void SetHvacMode(this IClimateEntityCore target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    public static void SetHvacMode(this IEnumerable<IClimateEntityCore> target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetHvacMode(this IClimateEntityCore target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetHvacMode(this IEnumerable<IClimateEntityCore> target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this IClimateEntityCore target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this IEnumerable<IClimateEntityCore> target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public static void SetPresetMode(this IClimateEntityCore target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public static void SetPresetMode(this IEnumerable<IClimateEntityCore> target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    public static void SetSwingHorizontalMode(this IClimateEntityCore target, ClimateSetSwingHorizontalModeParameters data)
    {
        target.CallService("set_swing_horizontal_mode", data);
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    public static void SetSwingHorizontalMode(this IEnumerable<IClimateEntityCore> target, ClimateSetSwingHorizontalModeParameters data)
    {
        target.CallService("set_swing_horizontal_mode", data);
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="swingHorizontalMode">Horizontal swing operation mode. eg: on</param>
    public static void SetSwingHorizontalMode(this IClimateEntityCore target, string swingHorizontalMode)
    {
        target.CallService("set_swing_horizontal_mode", new ClimateSetSwingHorizontalModeParameters { SwingHorizontalMode = swingHorizontalMode });
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="swingHorizontalMode">Horizontal swing operation mode. eg: on</param>
    public static void SetSwingHorizontalMode(this IEnumerable<IClimateEntityCore> target, string swingHorizontalMode)
    {
        target.CallService("set_swing_horizontal_mode", new ClimateSetSwingHorizontalModeParameters { SwingHorizontalMode = swingHorizontalMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    public static void SetSwingMode(this IClimateEntityCore target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Sets swing operation mode.</summary>
    public static void SetSwingMode(this IEnumerable<IClimateEntityCore> target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="swingMode">Swing operation mode. eg: on</param>
    public static void SetSwingMode(this IClimateEntityCore target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="swingMode">Swing operation mode. eg: on</param>
    public static void SetSwingMode(this IEnumerable<IClimateEntityCore> target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets the temperature setpoint.</summary>
    public static void SetTemperature(this IClimateEntityCore target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets the temperature setpoint.</summary>
    public static void SetTemperature(this IEnumerable<IClimateEntityCore> target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="temperature">The temperature setpoint.</param>
    ///<param name="targetTempHigh">The max temperature setpoint.</param>
    ///<param name="targetTempLow">The min temperature setpoint.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetTemperature(this IClimateEntityCore target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="temperature">The temperature setpoint.</param>
    ///<param name="targetTempHigh">The max temperature setpoint.</param>
    ///<param name="targetTempLow">The min temperature setpoint.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetTemperature(this IEnumerable<IClimateEntityCore> target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    public static void Toggle(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    public static void Toggle(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns climate device off.</summary>
    public static void TurnOff(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns climate device off.</summary>
    public static void TurnOff(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns climate device on.</summary>
    public static void TurnOn(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns climate device on.</summary>
    public static void TurnOn(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class CoverEntityExtensionMethods
{
    ///<summary>Closes a cover.</summary>
    public static void CloseCover(this ICoverEntityCore target, object? data = null)
    {
        target.CallService("close_cover", data);
    }

    ///<summary>Closes a cover.</summary>
    public static void CloseCover(this IEnumerable<ICoverEntityCore> target, object? data = null)
    {
        target.CallService("close_cover", data);
    }

    ///<summary>Tilts a cover to close.</summary>
    public static void CloseCoverTilt(this ICoverEntityCore target, object? data = null)
    {
        target.CallService("close_cover_tilt", data);
    }

    ///<summary>Tilts a cover to close.</summary>
    public static void CloseCoverTilt(this IEnumerable<ICoverEntityCore> target, object? data = null)
    {
        target.CallService("close_cover_tilt", data);
    }

    ///<summary>Opens a cover.</summary>
    public static void OpenCover(this ICoverEntityCore target, object? data = null)
    {
        target.CallService("open_cover", data);
    }

    ///<summary>Opens a cover.</summary>
    public static void OpenCover(this IEnumerable<ICoverEntityCore> target, object? data = null)
    {
        target.CallService("open_cover", data);
    }

    ///<summary>Tilts a cover open.</summary>
    public static void OpenCoverTilt(this ICoverEntityCore target, object? data = null)
    {
        target.CallService("open_cover_tilt", data);
    }

    ///<summary>Tilts a cover open.</summary>
    public static void OpenCoverTilt(this IEnumerable<ICoverEntityCore> target, object? data = null)
    {
        target.CallService("open_cover_tilt", data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    public static void SetCoverPosition(this ICoverEntityCore target, CoverSetCoverPositionParameters data)
    {
        target.CallService("set_cover_position", data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    public static void SetCoverPosition(this IEnumerable<ICoverEntityCore> target, CoverSetCoverPositionParameters data)
    {
        target.CallService("set_cover_position", data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The ICoverEntityCore to call this service for</param>
    ///<param name="position">Target position.</param>
    public static void SetCoverPosition(this ICoverEntityCore target, double position)
    {
        target.CallService("set_cover_position", new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The IEnumerable&lt;ICoverEntityCore&gt; to call this service for</param>
    ///<param name="position">Target position.</param>
    public static void SetCoverPosition(this IEnumerable<ICoverEntityCore> target, double position)
    {
        target.CallService("set_cover_position", new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    public static void SetCoverTiltPosition(this ICoverEntityCore target, CoverSetCoverTiltPositionParameters data)
    {
        target.CallService("set_cover_tilt_position", data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    public static void SetCoverTiltPosition(this IEnumerable<ICoverEntityCore> target, CoverSetCoverTiltPositionParameters data)
    {
        target.CallService("set_cover_tilt_position", data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The ICoverEntityCore to call this service for</param>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public static void SetCoverTiltPosition(this ICoverEntityCore target, double tiltPosition)
    {
        target.CallService("set_cover_tilt_position", new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The IEnumerable&lt;ICoverEntityCore&gt; to call this service for</param>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public static void SetCoverTiltPosition(this IEnumerable<ICoverEntityCore> target, double tiltPosition)
    {
        target.CallService("set_cover_tilt_position", new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Stops the cover movement.</summary>
    public static void StopCover(this ICoverEntityCore target, object? data = null)
    {
        target.CallService("stop_cover", data);
    }

    ///<summary>Stops the cover movement.</summary>
    public static void StopCover(this IEnumerable<ICoverEntityCore> target, object? data = null)
    {
        target.CallService("stop_cover", data);
    }

    ///<summary>Stops a tilting cover movement.</summary>
    public static void StopCoverTilt(this ICoverEntityCore target, object? data = null)
    {
        target.CallService("stop_cover_tilt", data);
    }

    ///<summary>Stops a tilting cover movement.</summary>
    public static void StopCoverTilt(this IEnumerable<ICoverEntityCore> target, object? data = null)
    {
        target.CallService("stop_cover_tilt", data);
    }

    ///<summary>Toggles a cover open/closed.</summary>
    public static void Toggle(this ICoverEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles a cover open/closed.</summary>
    public static void Toggle(this IEnumerable<ICoverEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    public static void ToggleCoverTilt(this ICoverEntityCore target, object? data = null)
    {
        target.CallService("toggle_cover_tilt", data);
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    public static void ToggleCoverTilt(this IEnumerable<ICoverEntityCore> target, object? data = null)
    {
        target.CallService("toggle_cover_tilt", data);
    }
}

public static class EcovacsEntityExtensionMethods
{
    ///<summary>Get the raw response for the positions of the chargers and the device itself.</summary>
    public static Task<JsonElement?> RawGetPositionsAsync(this IVacuumEntityCore target, object? data = null)
    {
        return target.CallServiceWithResponseAsync("raw_get_positions", data);
    }

    ///<summary>Get the raw response for the positions of the chargers and the device itself.</summary>
    public static void RawGetPositions(this IVacuumEntityCore target, object? data = null)
    {
        target.CallService("raw_get_positions", data);
    }

    ///<summary>Get the raw response for the positions of the chargers and the device itself.</summary>
    public static void RawGetPositions(this IEnumerable<IVacuumEntityCore> target, object? data = null)
    {
        target.CallService("raw_get_positions", data);
    }
}

public static class FanEntityExtensionMethods
{
    ///<summary>Decreases the speed of a fan.</summary>
    public static void DecreaseSpeed(this FanEntity target, FanDecreaseSpeedParameters data)
    {
        target.CallService("decrease_speed", data);
    }

    ///<summary>Decreases the speed of a fan.</summary>
    public static void DecreaseSpeed(this IEnumerable<FanEntity> target, FanDecreaseSpeedParameters data)
    {
        target.CallService("decrease_speed", data);
    }

    ///<summary>Decreases the speed of a fan.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="percentageStep">Percentage step by which the speed should be decreased.</param>
    public static void DecreaseSpeed(this FanEntity target, double? percentageStep = null)
    {
        target.CallService("decrease_speed", new FanDecreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Decreases the speed of a fan.</summary>
    ///<param name="target">The IEnumerable&lt;FanEntity&gt; to call this service for</param>
    ///<param name="percentageStep">Percentage step by which the speed should be decreased.</param>
    public static void DecreaseSpeed(this IEnumerable<FanEntity> target, double? percentageStep = null)
    {
        target.CallService("decrease_speed", new FanDecreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Increases the speed of a fan.</summary>
    public static void IncreaseSpeed(this FanEntity target, FanIncreaseSpeedParameters data)
    {
        target.CallService("increase_speed", data);
    }

    ///<summary>Increases the speed of a fan.</summary>
    public static void IncreaseSpeed(this IEnumerable<FanEntity> target, FanIncreaseSpeedParameters data)
    {
        target.CallService("increase_speed", data);
    }

    ///<summary>Increases the speed of a fan.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="percentageStep">Percentage step by which the speed should be increased.</param>
    public static void IncreaseSpeed(this FanEntity target, double? percentageStep = null)
    {
        target.CallService("increase_speed", new FanIncreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Increases the speed of a fan.</summary>
    ///<param name="target">The IEnumerable&lt;FanEntity&gt; to call this service for</param>
    ///<param name="percentageStep">Percentage step by which the speed should be increased.</param>
    public static void IncreaseSpeed(this IEnumerable<FanEntity> target, double? percentageStep = null)
    {
        target.CallService("increase_speed", new FanIncreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Controls the oscillation of a fan.</summary>
    public static void Oscillate(this FanEntity target, FanOscillateParameters data)
    {
        target.CallService("oscillate", data);
    }

    ///<summary>Controls the oscillation of a fan.</summary>
    public static void Oscillate(this IEnumerable<FanEntity> target, FanOscillateParameters data)
    {
        target.CallService("oscillate", data);
    }

    ///<summary>Controls the oscillation of a fan.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="oscillating">Turns oscillation on/off.</param>
    public static void Oscillate(this FanEntity target, bool oscillating)
    {
        target.CallService("oscillate", new FanOscillateParameters { Oscillating = oscillating });
    }

    ///<summary>Controls the oscillation of a fan.</summary>
    ///<param name="target">The IEnumerable&lt;FanEntity&gt; to call this service for</param>
    ///<param name="oscillating">Turns oscillation on/off.</param>
    public static void Oscillate(this IEnumerable<FanEntity> target, bool oscillating)
    {
        target.CallService("oscillate", new FanOscillateParameters { Oscillating = oscillating });
    }

    ///<summary>Sets a fan&apos;s rotation direction.</summary>
    public static void SetDirection(this FanEntity target, FanSetDirectionParameters data)
    {
        target.CallService("set_direction", data);
    }

    ///<summary>Sets a fan&apos;s rotation direction.</summary>
    public static void SetDirection(this IEnumerable<FanEntity> target, FanSetDirectionParameters data)
    {
        target.CallService("set_direction", data);
    }

    ///<summary>Sets a fan&apos;s rotation direction.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="direction">Direction of the fan rotation.</param>
    public static void SetDirection(this FanEntity target, object direction)
    {
        target.CallService("set_direction", new FanSetDirectionParameters { Direction = direction });
    }

    ///<summary>Sets a fan&apos;s rotation direction.</summary>
    ///<param name="target">The IEnumerable&lt;FanEntity&gt; to call this service for</param>
    ///<param name="direction">Direction of the fan rotation.</param>
    public static void SetDirection(this IEnumerable<FanEntity> target, object direction)
    {
        target.CallService("set_direction", new FanSetDirectionParameters { Direction = direction });
    }

    ///<summary>Sets the speed of a fan.</summary>
    public static void SetPercentage(this FanEntity target, FanSetPercentageParameters data)
    {
        target.CallService("set_percentage", data);
    }

    ///<summary>Sets the speed of a fan.</summary>
    public static void SetPercentage(this IEnumerable<FanEntity> target, FanSetPercentageParameters data)
    {
        target.CallService("set_percentage", data);
    }

    ///<summary>Sets the speed of a fan.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="percentage">Speed of the fan.</param>
    public static void SetPercentage(this FanEntity target, double percentage)
    {
        target.CallService("set_percentage", new FanSetPercentageParameters { Percentage = percentage });
    }

    ///<summary>Sets the speed of a fan.</summary>
    ///<param name="target">The IEnumerable&lt;FanEntity&gt; to call this service for</param>
    ///<param name="percentage">Speed of the fan.</param>
    public static void SetPercentage(this IEnumerable<FanEntity> target, double percentage)
    {
        target.CallService("set_percentage", new FanSetPercentageParameters { Percentage = percentage });
    }

    ///<summary>Sets preset fan mode.</summary>
    public static void SetPresetMode(this FanEntity target, FanSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset fan mode.</summary>
    public static void SetPresetMode(this IEnumerable<FanEntity> target, FanSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset fan mode.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="presetMode">Preset fan mode. eg: auto</param>
    public static void SetPresetMode(this FanEntity target, string presetMode)
    {
        target.CallService("set_preset_mode", new FanSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets preset fan mode.</summary>
    ///<param name="target">The IEnumerable&lt;FanEntity&gt; to call this service for</param>
    ///<param name="presetMode">Preset fan mode. eg: auto</param>
    public static void SetPresetMode(this IEnumerable<FanEntity> target, string presetMode)
    {
        target.CallService("set_preset_mode", new FanSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Toggles a fan on/off.</summary>
    public static void Toggle(this FanEntity target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles a fan on/off.</summary>
    public static void Toggle(this IEnumerable<FanEntity> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns fan off.</summary>
    public static void TurnOff(this FanEntity target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns fan off.</summary>
    public static void TurnOff(this IEnumerable<FanEntity> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns fan on.</summary>
    public static void TurnOn(this FanEntity target, FanTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns fan on.</summary>
    public static void TurnOn(this IEnumerable<FanEntity> target, FanTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="percentage">Speed of the fan.</param>
    ///<param name="presetMode">Preset fan mode. eg: auto</param>
    public static void TurnOn(this FanEntity target, double? percentage = null, string? presetMode = null)
    {
        target.CallService("turn_on", new FanTurnOnParameters { Percentage = percentage, PresetMode = presetMode });
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The IEnumerable&lt;FanEntity&gt; to call this service for</param>
    ///<param name="percentage">Speed of the fan.</param>
    ///<param name="presetMode">Preset fan mode. eg: auto</param>
    public static void TurnOn(this IEnumerable<FanEntity> target, double? percentage = null, string? presetMode = null)
    {
        target.CallService("turn_on", new FanTurnOnParameters { Percentage = percentage, PresetMode = presetMode });
    }
}

public static class HueEntityExtensionMethods
{
    ///<summary>Activates a Hue scene with more control over the options.</summary>
    public static void ActivateScene(this ISceneEntityCore target, HueActivateSceneParameters data)
    {
        target.CallService("activate_scene", data);
    }

    ///<summary>Activates a Hue scene with more control over the options.</summary>
    public static void ActivateScene(this IEnumerable<ISceneEntityCore> target, HueActivateSceneParameters data)
    {
        target.CallService("activate_scene", data);
    }

    ///<summary>Activates a Hue scene with more control over the options.</summary>
    ///<param name="target">The ISceneEntityCore to call this service for</param>
    ///<param name="transition">Transition duration it takes to bring devices to the state defined in the scene.</param>
    ///<param name="dynamic">Enable dynamic mode of the scene.</param>
    ///<param name="speed">Speed of dynamic palette for this scene.</param>
    ///<param name="brightness">Set brightness for the scene.</param>
    public static void ActivateScene(this ISceneEntityCore target, double? transition = null, bool? dynamic = null, double? speed = null, double? brightness = null)
    {
        target.CallService("activate_scene", new HueActivateSceneParameters { Transition = transition, Dynamic = dynamic, Speed = speed, Brightness = brightness });
    }

    ///<summary>Activates a Hue scene with more control over the options.</summary>
    ///<param name="target">The IEnumerable&lt;ISceneEntityCore&gt; to call this service for</param>
    ///<param name="transition">Transition duration it takes to bring devices to the state defined in the scene.</param>
    ///<param name="dynamic">Enable dynamic mode of the scene.</param>
    ///<param name="speed">Speed of dynamic palette for this scene.</param>
    ///<param name="brightness">Set brightness for the scene.</param>
    public static void ActivateScene(this IEnumerable<ISceneEntityCore> target, double? transition = null, bool? dynamic = null, double? speed = null, double? brightness = null)
    {
        target.CallService("activate_scene", new HueActivateSceneParameters { Transition = transition, Dynamic = dynamic, Speed = speed, Brightness = brightness });
    }
}

public static class ImageEntityExtensionMethods
{
    ///<summary>Takes a snapshot from an image.</summary>
    public static void Snapshot(this ImageEntity target, ImageSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from an image.</summary>
    public static void Snapshot(this IEnumerable<ImageEntity> target, ImageSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from an image.</summary>
    ///<param name="target">The ImageEntity to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/image_snapshot.jpg</param>
    public static void Snapshot(this ImageEntity target, string filename)
    {
        target.CallService("snapshot", new ImageSnapshotParameters { Filename = filename });
    }

    ///<summary>Takes a snapshot from an image.</summary>
    ///<param name="target">The IEnumerable&lt;ImageEntity&gt; to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/image_snapshot.jpg</param>
    public static void Snapshot(this IEnumerable<ImageEntity> target, string filename)
    {
        target.CallService("snapshot", new ImageSnapshotParameters { Filename = filename });
    }
}

public static class InputBooleanEntityExtensionMethods
{
    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IInputBooleanEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IEnumerable<IInputBooleanEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IInputBooleanEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IEnumerable<IInputBooleanEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IInputBooleanEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IEnumerable<IInputBooleanEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class LightEntityExtensionMethods
{
    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    public static void Toggle(this ILightEntityCore target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    public static void Toggle(this IEnumerable<ILightEntityCore> target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public static void Toggle(this ILightEntityCore target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? kelvin = null, double? brightnessPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, object? white = null, string? profile = null, object? flash = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, White = white, Profile = profile, Flash = flash });
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public static void Toggle(this IEnumerable<ILightEntityCore> target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? kelvin = null, double? brightnessPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, object? white = null, string? profile = null, object? flash = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, White = white, Profile = profile, Flash = flash });
    }

    ///<summary>Turn off one or more lights.</summary>
    public static void TurnOff(this ILightEntityCore target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turn off one or more lights.</summary>
    public static void TurnOff(this IEnumerable<ILightEntityCore> target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash"></param>
    public static void TurnOff(this ILightEntityCore target, double? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash"></param>
    public static void TurnOff(this IEnumerable<ILightEntityCore> target, double? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    public static void TurnOn(this ILightEntityCore target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    public static void TurnOn(this IEnumerable<ILightEntityCore> target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="brightnessStep"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public static void TurnOn(this ILightEntityCore target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? kelvin = null, double? brightnessPct = null, double? brightnessStepPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, double? brightnessStep = null, object? white = null, string? profile = null, object? flash = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, BrightnessStep = brightnessStep, White = white, Profile = profile, Flash = flash });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="brightnessStep"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public static void TurnOn(this IEnumerable<ILightEntityCore> target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? kelvin = null, double? brightnessPct = null, double? brightnessStepPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, double? brightnessStep = null, object? white = null, string? profile = null, object? flash = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, BrightnessStep = brightnessStep, White = white, Profile = profile, Flash = flash });
    }
}

public static class LockEntityExtensionMethods
{
    ///<summary>Locks a lock.</summary>
    public static void Lock(this ILockEntityCore target, LockLockParameters data)
    {
        target.CallService("lock", data);
    }

    ///<summary>Locks a lock.</summary>
    public static void Lock(this IEnumerable<ILockEntityCore> target, LockLockParameters data)
    {
        target.CallService("lock", data);
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="code">Code used to lock the lock. eg: 1234</param>
    public static void Lock(this ILockEntityCore target, string? code = null)
    {
        target.CallService("lock", new LockLockParameters { Code = code });
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="code">Code used to lock the lock. eg: 1234</param>
    public static void Lock(this IEnumerable<ILockEntityCore> target, string? code = null)
    {
        target.CallService("lock", new LockLockParameters { Code = code });
    }

    ///<summary>Opens a lock.</summary>
    public static void Open(this ILockEntityCore target, LockOpenParameters data)
    {
        target.CallService("open", data);
    }

    ///<summary>Opens a lock.</summary>
    public static void Open(this IEnumerable<ILockEntityCore> target, LockOpenParameters data)
    {
        target.CallService("open", data);
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="code">Code used to open the lock. eg: 1234</param>
    public static void Open(this ILockEntityCore target, string? code = null)
    {
        target.CallService("open", new LockOpenParameters { Code = code });
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="code">Code used to open the lock. eg: 1234</param>
    public static void Open(this IEnumerable<ILockEntityCore> target, string? code = null)
    {
        target.CallService("open", new LockOpenParameters { Code = code });
    }

    ///<summary>Unlocks a lock.</summary>
    public static void Unlock(this ILockEntityCore target, LockUnlockParameters data)
    {
        target.CallService("unlock", data);
    }

    ///<summary>Unlocks a lock.</summary>
    public static void Unlock(this IEnumerable<ILockEntityCore> target, LockUnlockParameters data)
    {
        target.CallService("unlock", data);
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="code">Code used to unlock the lock. eg: 1234</param>
    public static void Unlock(this ILockEntityCore target, string? code = null)
    {
        target.CallService("unlock", new LockUnlockParameters { Code = code });
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="code">Code used to unlock the lock. eg: 1234</param>
    public static void Unlock(this IEnumerable<ILockEntityCore> target, string? code = null)
    {
        target.CallService("unlock", new LockUnlockParameters { Code = code });
    }
}

public static class MediaPlayerEntityExtensionMethods
{
    ///<summary>Removes all items from the playlist.</summary>
    public static void ClearPlaylist(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("clear_playlist", data);
    }

    ///<summary>Removes all items from the playlist.</summary>
    public static void ClearPlaylist(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("clear_playlist", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this IMediaPlayerEntityCore target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in &apos;Targets&apos;. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IMediaPlayerEntityCore target, IEnumerable<string> groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in &apos;Targets&apos;. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IEnumerable<IMediaPlayerEntityCore> target, IEnumerable<string> groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_next_track", data);
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_next_track", data);
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_pause", data);
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_pause", data);
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_play", data);
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_play", data);
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_play_pause", data);
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_play_pause", data);
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_previous_track", data);
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_previous_track", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this IMediaPlayerEntityCore target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this IMediaPlayerEntityCore target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this IEnumerable<IMediaPlayerEntityCore> target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_stop", data);
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_stop", data);
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this IMediaPlayerEntityCore target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IMediaPlayerEntityCore target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    public static void RepeatSet(this IMediaPlayerEntityCore target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    public static void RepeatSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public static void RepeatSet(this IMediaPlayerEntityCore target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public static void RepeatSet(this IEnumerable<IMediaPlayerEntityCore> target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this IMediaPlayerEntityCore target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IMediaPlayerEntityCore target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IEnumerable<IMediaPlayerEntityCore> target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this IMediaPlayerEntityCore target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IMediaPlayerEntityCore target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IEnumerable<IMediaPlayerEntityCore> target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    public static void ShuffleSet(this IMediaPlayerEntityCore target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    public static void ShuffleSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public static void ShuffleSet(this IMediaPlayerEntityCore target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public static void ShuffleSet(this IEnumerable<IMediaPlayerEntityCore> target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("unjoin", data);
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("unjoin", data);
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("volume_down", data);
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("volume_down", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this IMediaPlayerEntityCore target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this IMediaPlayerEntityCore target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this IEnumerable<IMediaPlayerEntityCore> target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this IMediaPlayerEntityCore target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this IMediaPlayerEntityCore target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this IEnumerable<IMediaPlayerEntityCore> target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("volume_up", data);
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("volume_up", data);
    }
}

public static class NumberEntityExtensionMethods
{
    ///<summary>Sets the value of a number.</summary>
    public static void SetValue(this INumberEntityCore target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value of a number.</summary>
    public static void SetValue(this IEnumerable<INumberEntityCore> target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The INumberEntityCore to call this service for</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public static void SetValue(this INumberEntityCore target, string? value = null)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The IEnumerable&lt;INumberEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public static void SetValue(this IEnumerable<INumberEntityCore> target, string? value = null)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }
}

public static class RemoteEntityExtensionMethods
{
    ///<summary>Deletes a command or a list of commands from the database.</summary>
    public static void DeleteCommand(this IRemoteEntityCore target, RemoteDeleteCommandParameters data)
    {
        target.CallService("delete_command", data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    public static void DeleteCommand(this IEnumerable<IRemoteEntityCore> target, RemoteDeleteCommandParameters data)
    {
        target.CallService("delete_command", data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public static void DeleteCommand(this IRemoteEntityCore target, object command, string? device = null)
    {
        target.CallService("delete_command", new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public static void DeleteCommand(this IEnumerable<IRemoteEntityCore> target, object command, string? device = null)
    {
        target.CallService("delete_command", new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    public static void LearnCommand(this IRemoteEntityCore target, RemoteLearnCommandParameters data)
    {
        target.CallService("learn_command", data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    public static void LearnCommand(this IEnumerable<IRemoteEntityCore> target, RemoteLearnCommandParameters data)
    {
        target.CallService("learn_command", data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public static void LearnCommand(this IRemoteEntityCore target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        target.CallService("learn_command", new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public static void LearnCommand(this IEnumerable<IRemoteEntityCore> target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        target.CallService("learn_command", new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    public static void SendCommand(this IRemoteEntityCore target, RemoteSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    public static void SendCommand(this IEnumerable<IRemoteEntityCore> target, RemoteSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public static void SendCommand(this IRemoteEntityCore target, object command, string? device = null, double? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        target.CallService("send_command", new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public static void SendCommand(this IEnumerable<IRemoteEntityCore> target, object command, string? device = null, double? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        target.CallService("send_command", new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Sends the toggle command.</summary>
    public static void Toggle(this IRemoteEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Sends the toggle command.</summary>
    public static void Toggle(this IEnumerable<IRemoteEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Sends the turn off command.</summary>
    public static void TurnOff(this IRemoteEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Sends the turn off command.</summary>
    public static void TurnOff(this IEnumerable<IRemoteEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Sends the turn on command.</summary>
    public static void TurnOn(this IRemoteEntityCore target, RemoteTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Sends the turn on command.</summary>
    public static void TurnOn(this IEnumerable<IRemoteEntityCore> target, RemoteTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Sends the turn on command.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public static void TurnOn(this IRemoteEntityCore target, string? activity = null)
    {
        target.CallService("turn_on", new RemoteTurnOnParameters { Activity = activity });
    }

    ///<summary>Sends the turn on command.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public static void TurnOn(this IEnumerable<IRemoteEntityCore> target, string? activity = null)
    {
        target.CallService("turn_on", new RemoteTurnOnParameters { Activity = activity });
    }
}

public static class ReolinkEntityExtensionMethods
{
    ///<summary>Moves the camera with a specific speed.</summary>
    public static void PtzMove(this IButtonEntityCore target, ReolinkPtzMoveParameters data)
    {
        target.CallService("ptz_move", data);
    }

    ///<summary>Moves the camera with a specific speed.</summary>
    public static void PtzMove(this IEnumerable<IButtonEntityCore> target, ReolinkPtzMoveParameters data)
    {
        target.CallService("ptz_move", data);
    }

    ///<summary>Moves the camera with a specific speed.</summary>
    ///<param name="target">The IButtonEntityCore to call this service for</param>
    ///<param name="speed">PTZ move speed.</param>
    public static void PtzMove(this IButtonEntityCore target, long speed)
    {
        target.CallService("ptz_move", new ReolinkPtzMoveParameters { Speed = speed });
    }

    ///<summary>Moves the camera with a specific speed.</summary>
    ///<param name="target">The IEnumerable&lt;IButtonEntityCore&gt; to call this service for</param>
    ///<param name="speed">PTZ move speed.</param>
    public static void PtzMove(this IEnumerable<IButtonEntityCore> target, long speed)
    {
        target.CallService("ptz_move", new ReolinkPtzMoveParameters { Speed = speed });
    }
}

public static class SceneEntityExtensionMethods
{
    ///<summary>Deletes a dynamically created scene.</summary>
    public static void Delete(this ISceneEntityCore target, object? data = null)
    {
        target.CallService("delete", data);
    }

    ///<summary>Deletes a dynamically created scene.</summary>
    public static void Delete(this IEnumerable<ISceneEntityCore> target, object? data = null)
    {
        target.CallService("delete", data);
    }

    ///<summary>Activates a scene.</summary>
    public static void TurnOn(this ISceneEntityCore target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activates a scene.</summary>
    public static void TurnOn(this IEnumerable<ISceneEntityCore> target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The ISceneEntityCore to call this service for</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public static void TurnOn(this ISceneEntityCore target, double? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters { Transition = transition });
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The IEnumerable&lt;ISceneEntityCore&gt; to call this service for</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public static void TurnOn(this IEnumerable<ISceneEntityCore> target, double? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters { Transition = transition });
    }
}

public static class ScriptEntityExtensionMethods
{
    ///<summary>Starts a script if it isn&apos;t running, stops it otherwise.</summary>
    public static void Toggle(this IScriptEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Starts a script if it isn&apos;t running, stops it otherwise.</summary>
    public static void Toggle(this IEnumerable<IScriptEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Stops a running script.</summary>
    public static void TurnOff(this IScriptEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Stops a running script.</summary>
    public static void TurnOff(this IEnumerable<IScriptEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    public static void TurnOn(this IScriptEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    public static void TurnOn(this IEnumerable<IScriptEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class SelectEntityExtensionMethods
{
    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this ISelectEntityCore target, object? data = null)
    {
        target.CallService("select_first", data);
    }

    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IEnumerable<ISelectEntityCore> target, object? data = null)
    {
        target.CallService("select_first", data);
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this ISelectEntityCore target, object? data = null)
    {
        target.CallService("select_last", data);
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IEnumerable<ISelectEntityCore> target, object? data = null)
    {
        target.CallService("select_last", data);
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this ISelectEntityCore target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this IEnumerable<ISelectEntityCore> target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this ISelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this IEnumerable<ISelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this ISelectEntityCore target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IEnumerable<ISelectEntityCore> target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this ISelectEntityCore target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IEnumerable<ISelectEntityCore> target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this ISelectEntityCore target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IEnumerable<ISelectEntityCore> target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this ISelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this IEnumerable<ISelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public static class SirenEntityExtensionMethods
{
    ///<summary>Toggles the siren on/off.</summary>
    public static void Toggle(this SirenEntity target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles the siren on/off.</summary>
    public static void Toggle(this IEnumerable<SirenEntity> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns the siren off.</summary>
    public static void TurnOff(this SirenEntity target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns the siren off.</summary>
    public static void TurnOff(this IEnumerable<SirenEntity> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns the siren on.</summary>
    public static void TurnOn(this SirenEntity target, SirenTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns the siren on.</summary>
    public static void TurnOn(this IEnumerable<SirenEntity> target, SirenTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="target">The SirenEntity to call this service for</param>
    ///<param name="tone">The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</param>
    ///<param name="duration">Number of seconds the sound is played. Must be supported by the integration. eg: 15</param>
    public static void TurnOn(this SirenEntity target, string? tone = null, double? volumeLevel = null, string? duration = null)
    {
        target.CallService("turn_on", new SirenTurnOnParameters { Tone = tone, VolumeLevel = volumeLevel, Duration = duration });
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="target">The IEnumerable&lt;SirenEntity&gt; to call this service for</param>
    ///<param name="tone">The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</param>
    ///<param name="duration">Number of seconds the sound is played. Must be supported by the integration. eg: 15</param>
    public static void TurnOn(this IEnumerable<SirenEntity> target, string? tone = null, double? volumeLevel = null, string? duration = null)
    {
        target.CallService("turn_on", new SirenTurnOnParameters { Tone = tone, VolumeLevel = volumeLevel, Duration = duration });
    }
}

public static class SonosEntityExtensionMethods
{
    ///<summary>Returns the contents of the queue.</summary>
    public static Task<JsonElement?> GetQueueAsync(this IMediaPlayerEntityCore target, object? data = null)
    {
        return target.CallServiceWithResponseAsync("get_queue", data);
    }

    ///<summary>Returns the contents of the queue.</summary>
    public static void GetQueue(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("get_queue", data);
    }

    ///<summary>Returns the contents of the queue.</summary>
    public static void GetQueue(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("get_queue", data);
    }
}

public static class SwitchEntityExtensionMethods
{
    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this ISwitchEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this IEnumerable<ISwitchEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this ISwitchEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this IEnumerable<ISwitchEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this ISwitchEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this IEnumerable<ISwitchEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class TodoEntityExtensionMethods
{
    ///<summary>Adds a new to-do list item.</summary>
    public static void AddItem(this TodoEntity target, TodoAddItemParameters data)
    {
        target.CallService("add_item", data);
    }

    ///<summary>Adds a new to-do list item.</summary>
    public static void AddItem(this IEnumerable<TodoEntity> target, TodoAddItemParameters data)
    {
        target.CallService("add_item", data);
    }

    ///<summary>Adds a new to-do list item.</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="item">The name that represents the to-do item. eg: Submit income tax return</param>
    ///<param name="dueDate">The date the to-do item is expected to be completed. eg: 2023-11-17</param>
    ///<param name="dueDatetime">The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</param>
    ///<param name="description">A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</param>
    public static void AddItem(this TodoEntity target, string item, DateOnly? dueDate = null, DateTime? dueDatetime = null, string? description = null)
    {
        target.CallService("add_item", new TodoAddItemParameters { Item = item, DueDate = dueDate, DueDatetime = dueDatetime, Description = description });
    }

    ///<summary>Adds a new to-do list item.</summary>
    ///<param name="target">The IEnumerable&lt;TodoEntity&gt; to call this service for</param>
    ///<param name="item">The name that represents the to-do item. eg: Submit income tax return</param>
    ///<param name="dueDate">The date the to-do item is expected to be completed. eg: 2023-11-17</param>
    ///<param name="dueDatetime">The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</param>
    ///<param name="description">A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</param>
    public static void AddItem(this IEnumerable<TodoEntity> target, string item, DateOnly? dueDate = null, DateTime? dueDatetime = null, string? description = null)
    {
        target.CallService("add_item", new TodoAddItemParameters { Item = item, DueDate = dueDate, DueDatetime = dueDatetime, Description = description });
    }

    ///<summary>Gets items on a to-do list.</summary>
    public static Task<JsonElement?> GetItemsAsync(this TodoEntity target, TodoGetItemsParameters data)
    {
        return target.CallServiceWithResponseAsync("get_items", data);
    }

    ///<summary>Gets items on a to-do list.</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="status">Only return to-do items with the specified statuses. Returns not completed actions by default. eg: needs_action</param>
    public static Task<JsonElement?> GetItemsAsync(this TodoEntity target, IEnumerable<object>? status = null)
    {
        return target.CallServiceWithResponseAsync("get_items", new TodoGetItemsParameters { Status = status });
    }

    ///<summary>Gets items on a to-do list.</summary>
    public static void GetItems(this TodoEntity target, TodoGetItemsParameters data)
    {
        target.CallService("get_items", data);
    }

    ///<summary>Gets items on a to-do list.</summary>
    public static void GetItems(this IEnumerable<TodoEntity> target, TodoGetItemsParameters data)
    {
        target.CallService("get_items", data);
    }

    ///<summary>Gets items on a to-do list.</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="status">Only return to-do items with the specified statuses. Returns not completed actions by default. eg: needs_action</param>
    public static void GetItems(this TodoEntity target, IEnumerable<object>? status = null)
    {
        target.CallService("get_items", new TodoGetItemsParameters { Status = status });
    }

    ///<summary>Gets items on a to-do list.</summary>
    ///<param name="target">The IEnumerable&lt;TodoEntity&gt; to call this service for</param>
    ///<param name="status">Only return to-do items with the specified statuses. Returns not completed actions by default. eg: needs_action</param>
    public static void GetItems(this IEnumerable<TodoEntity> target, IEnumerable<object>? status = null)
    {
        target.CallService("get_items", new TodoGetItemsParameters { Status = status });
    }

    ///<summary>Removes all to-do list items that have been completed.</summary>
    public static void RemoveCompletedItems(this TodoEntity target, object? data = null)
    {
        target.CallService("remove_completed_items", data);
    }

    ///<summary>Removes all to-do list items that have been completed.</summary>
    public static void RemoveCompletedItems(this IEnumerable<TodoEntity> target, object? data = null)
    {
        target.CallService("remove_completed_items", data);
    }

    ///<summary>Removes an existing to-do list item by its name.</summary>
    public static void RemoveItem(this TodoEntity target, TodoRemoveItemParameters data)
    {
        target.CallService("remove_item", data);
    }

    ///<summary>Removes an existing to-do list item by its name.</summary>
    public static void RemoveItem(this IEnumerable<TodoEntity> target, TodoRemoveItemParameters data)
    {
        target.CallService("remove_item", data);
    }

    ///<summary>Removes an existing to-do list item by its name.</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="item">The name for the to-do list item.</param>
    public static void RemoveItem(this TodoEntity target, string item)
    {
        target.CallService("remove_item", new TodoRemoveItemParameters { Item = item });
    }

    ///<summary>Removes an existing to-do list item by its name.</summary>
    ///<param name="target">The IEnumerable&lt;TodoEntity&gt; to call this service for</param>
    ///<param name="item">The name for the to-do list item.</param>
    public static void RemoveItem(this IEnumerable<TodoEntity> target, string item)
    {
        target.CallService("remove_item", new TodoRemoveItemParameters { Item = item });
    }

    ///<summary>Updates an existing to-do list item based on its name.</summary>
    public static void UpdateItem(this TodoEntity target, TodoUpdateItemParameters data)
    {
        target.CallService("update_item", data);
    }

    ///<summary>Updates an existing to-do list item based on its name.</summary>
    public static void UpdateItem(this IEnumerable<TodoEntity> target, TodoUpdateItemParameters data)
    {
        target.CallService("update_item", data);
    }

    ///<summary>Updates an existing to-do list item based on its name.</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="item">The current name of the to-do item. eg: Submit income tax return</param>
    ///<param name="rename">The new name for the to-do item eg: Something else</param>
    ///<param name="status">A status or confirmation of the to-do item. eg: needs_action</param>
    ///<param name="dueDate">The date the to-do item is expected to be completed. eg: 2023-11-17</param>
    ///<param name="dueDatetime">The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</param>
    ///<param name="description">A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</param>
    public static void UpdateItem(this TodoEntity target, string item, string? rename = null, object? status = null, DateOnly? dueDate = null, DateTime? dueDatetime = null, string? description = null)
    {
        target.CallService("update_item", new TodoUpdateItemParameters { Item = item, Rename = rename, Status = status, DueDate = dueDate, DueDatetime = dueDatetime, Description = description });
    }

    ///<summary>Updates an existing to-do list item based on its name.</summary>
    ///<param name="target">The IEnumerable&lt;TodoEntity&gt; to call this service for</param>
    ///<param name="item">The current name of the to-do item. eg: Submit income tax return</param>
    ///<param name="rename">The new name for the to-do item eg: Something else</param>
    ///<param name="status">A status or confirmation of the to-do item. eg: needs_action</param>
    ///<param name="dueDate">The date the to-do item is expected to be completed. eg: 2023-11-17</param>
    ///<param name="dueDatetime">The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</param>
    ///<param name="description">A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</param>
    public static void UpdateItem(this IEnumerable<TodoEntity> target, string item, string? rename = null, object? status = null, DateOnly? dueDate = null, DateTime? dueDatetime = null, string? description = null)
    {
        target.CallService("update_item", new TodoUpdateItemParameters { Item = item, Rename = rename, Status = status, DueDate = dueDate, DueDatetime = dueDatetime, Description = description });
    }
}

public static class TtsEntityExtensionMethods
{
    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    public static void Speak(this TtsEntity target, TtsSpeakParameters data)
    {
        target.CallService("speak", data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    public static void Speak(this IEnumerable<TtsEntity> target, TtsSpeakParameters data)
    {
        target.CallService("speak", data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The TtsEntity to call this service for</param>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public static void Speak(this TtsEntity target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        target.CallService("speak", new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The IEnumerable&lt;TtsEntity&gt; to call this service for</param>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public static void Speak(this IEnumerable<TtsEntity> target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        target.CallService("speak", new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }
}

public static class UpdateEntityExtensionMethods
{
    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IUpdateEntityCore target, object? data = null)
    {
        target.CallService("clear_skipped", data);
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IEnumerable<IUpdateEntityCore> target, object? data = null)
    {
        target.CallService("clear_skipped", data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    public static void Install(this IUpdateEntityCore target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    public static void Install(this IEnumerable<IUpdateEntityCore> target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="target">The IUpdateEntityCore to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update.</param>
    public static void Install(this IUpdateEntityCore target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="target">The IEnumerable&lt;IUpdateEntityCore&gt; to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update.</param>
    public static void Install(this IEnumerable<IUpdateEntityCore> target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IUpdateEntityCore target, object? data = null)
    {
        target.CallService("skip", data);
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IEnumerable<IUpdateEntityCore> target, object? data = null)
    {
        target.CallService("skip", data);
    }
}

public static class VacuumEntityExtensionMethods
{
    ///<summary>Tells the vacuum cleaner to do a spot clean-up.</summary>
    public static void CleanSpot(this IVacuumEntityCore target, object? data = null)
    {
        target.CallService("clean_spot", data);
    }

    ///<summary>Tells the vacuum cleaner to do a spot clean-up.</summary>
    public static void CleanSpot(this IEnumerable<IVacuumEntityCore> target, object? data = null)
    {
        target.CallService("clean_spot", data);
    }

    ///<summary>Locates the vacuum cleaner robot.</summary>
    public static void Locate(this IVacuumEntityCore target, object? data = null)
    {
        target.CallService("locate", data);
    }

    ///<summary>Locates the vacuum cleaner robot.</summary>
    public static void Locate(this IEnumerable<IVacuumEntityCore> target, object? data = null)
    {
        target.CallService("locate", data);
    }

    ///<summary>Pauses the cleaning task.</summary>
    public static void Pause(this IVacuumEntityCore target, object? data = null)
    {
        target.CallService("pause", data);
    }

    ///<summary>Pauses the cleaning task.</summary>
    public static void Pause(this IEnumerable<IVacuumEntityCore> target, object? data = null)
    {
        target.CallService("pause", data);
    }

    ///<summary>Tells the vacuum cleaner to return to its dock.</summary>
    public static void ReturnToBase(this IVacuumEntityCore target, object? data = null)
    {
        target.CallService("return_to_base", data);
    }

    ///<summary>Tells the vacuum cleaner to return to its dock.</summary>
    public static void ReturnToBase(this IEnumerable<IVacuumEntityCore> target, object? data = null)
    {
        target.CallService("return_to_base", data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    public static void SendCommand(this IVacuumEntityCore target, VacuumSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    public static void SendCommand(this IEnumerable<IVacuumEntityCore> target, VacuumSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The IVacuumEntityCore to call this service for</param>
    ///<param name="command">Command to execute. The commands are integration-specific. eg: set_dnd_timer</param>
    ///<param name="params">Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</param>
    public static void SendCommand(this IVacuumEntityCore target, string command, object? @params = null)
    {
        target.CallService("send_command", new VacuumSendCommandParameters { Command = command, Params = @params });
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The IEnumerable&lt;IVacuumEntityCore&gt; to call this service for</param>
    ///<param name="command">Command to execute. The commands are integration-specific. eg: set_dnd_timer</param>
    ///<param name="params">Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</param>
    public static void SendCommand(this IEnumerable<IVacuumEntityCore> target, string command, object? @params = null)
    {
        target.CallService("send_command", new VacuumSendCommandParameters { Command = command, Params = @params });
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    public static void SetFanSpeed(this IVacuumEntityCore target, VacuumSetFanSpeedParameters data)
    {
        target.CallService("set_fan_speed", data);
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    public static void SetFanSpeed(this IEnumerable<IVacuumEntityCore> target, VacuumSetFanSpeedParameters data)
    {
        target.CallService("set_fan_speed", data);
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The IVacuumEntityCore to call this service for</param>
    ///<param name="fanSpeed">Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</param>
    public static void SetFanSpeed(this IVacuumEntityCore target, string fanSpeed)
    {
        target.CallService("set_fan_speed", new VacuumSetFanSpeedParameters { FanSpeed = fanSpeed });
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The IEnumerable&lt;IVacuumEntityCore&gt; to call this service for</param>
    ///<param name="fanSpeed">Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</param>
    public static void SetFanSpeed(this IEnumerable<IVacuumEntityCore> target, string fanSpeed)
    {
        target.CallService("set_fan_speed", new VacuumSetFanSpeedParameters { FanSpeed = fanSpeed });
    }

    ///<summary>Starts or resumes the cleaning task.</summary>
    public static void Start(this IVacuumEntityCore target, object? data = null)
    {
        target.CallService("start", data);
    }

    ///<summary>Starts or resumes the cleaning task.</summary>
    public static void Start(this IEnumerable<IVacuumEntityCore> target, object? data = null)
    {
        target.CallService("start", data);
    }

    ///<summary>Stops the current cleaning task.</summary>
    public static void Stop(this IVacuumEntityCore target, object? data = null)
    {
        target.CallService("stop", data);
    }

    ///<summary>Stops the current cleaning task.</summary>
    public static void Stop(this IEnumerable<IVacuumEntityCore> target, object? data = null)
    {
        target.CallService("stop", data);
    }
}

public static class WeatherEntityExtensionMethods
{
    ///<summary>Get weather forecasts.</summary>
    public static Task<JsonElement?> GetForecastsAsync(this IWeatherEntityCore target, WeatherGetForecastsParameters data)
    {
        return target.CallServiceWithResponseAsync("get_forecasts", data);
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The IWeatherEntityCore to call this service for</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public static Task<JsonElement?> GetForecastsAsync(this IWeatherEntityCore target, object @type)
    {
        return target.CallServiceWithResponseAsync("get_forecasts", new WeatherGetForecastsParameters { Type = @type });
    }

    ///<summary>Get weather forecasts.</summary>
    public static void GetForecasts(this IWeatherEntityCore target, WeatherGetForecastsParameters data)
    {
        target.CallService("get_forecasts", data);
    }

    ///<summary>Get weather forecasts.</summary>
    public static void GetForecasts(this IEnumerable<IWeatherEntityCore> target, WeatherGetForecastsParameters data)
    {
        target.CallService("get_forecasts", data);
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The IWeatherEntityCore to call this service for</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public static void GetForecasts(this IWeatherEntityCore target, object @type)
    {
        target.CallService("get_forecasts", new WeatherGetForecastsParameters { Type = @type });
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The IEnumerable&lt;IWeatherEntityCore&gt; to call this service for</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public static void GetForecasts(this IEnumerable<IWeatherEntityCore> target, object @type)
    {
        target.CallService("get_forecasts", new WeatherGetForecastsParameters { Type = @type });
    }
}

public static class ZhaEntityExtensionMethods
{
    ///<summary>Clears a user code from a lock.</summary>
    public static void ClearLockUserCode(this ILockEntityCore target, ZhaClearLockUserCodeParameters data)
    {
        target.CallService("clear_lock_user_code", data);
    }

    ///<summary>Clears a user code from a lock.</summary>
    public static void ClearLockUserCode(this IEnumerable<ILockEntityCore> target, ZhaClearLockUserCodeParameters data)
    {
        target.CallService("clear_lock_user_code", data);
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="codeSlot">Code slot to clear code from. eg: 1</param>
    public static void ClearLockUserCode(this ILockEntityCore target, string codeSlot)
    {
        target.CallService("clear_lock_user_code", new ZhaClearLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="codeSlot">Code slot to clear code from. eg: 1</param>
    public static void ClearLockUserCode(this IEnumerable<ILockEntityCore> target, string codeSlot)
    {
        target.CallService("clear_lock_user_code", new ZhaClearLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Disables a user code on a lock.</summary>
    public static void DisableLockUserCode(this ILockEntityCore target, ZhaDisableLockUserCodeParameters data)
    {
        target.CallService("disable_lock_user_code", data);
    }

    ///<summary>Disables a user code on a lock.</summary>
    public static void DisableLockUserCode(this IEnumerable<ILockEntityCore> target, ZhaDisableLockUserCodeParameters data)
    {
        target.CallService("disable_lock_user_code", data);
    }

    ///<summary>Disables a user code on a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="codeSlot">Code slot to disable. eg: 1</param>
    public static void DisableLockUserCode(this ILockEntityCore target, string codeSlot)
    {
        target.CallService("disable_lock_user_code", new ZhaDisableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Disables a user code on a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="codeSlot">Code slot to disable. eg: 1</param>
    public static void DisableLockUserCode(this IEnumerable<ILockEntityCore> target, string codeSlot)
    {
        target.CallService("disable_lock_user_code", new ZhaDisableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Enables a user code on a lock.</summary>
    public static void EnableLockUserCode(this ILockEntityCore target, ZhaEnableLockUserCodeParameters data)
    {
        target.CallService("enable_lock_user_code", data);
    }

    ///<summary>Enables a user code on a lock.</summary>
    public static void EnableLockUserCode(this IEnumerable<ILockEntityCore> target, ZhaEnableLockUserCodeParameters data)
    {
        target.CallService("enable_lock_user_code", data);
    }

    ///<summary>Enables a user code on a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="codeSlot">Code slot to enable. eg: 1</param>
    public static void EnableLockUserCode(this ILockEntityCore target, string codeSlot)
    {
        target.CallService("enable_lock_user_code", new ZhaEnableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Enables a user code on a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="codeSlot">Code slot to enable. eg: 1</param>
    public static void EnableLockUserCode(this IEnumerable<ILockEntityCore> target, string codeSlot)
    {
        target.CallService("enable_lock_user_code", new ZhaEnableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Sets a user code on a lock.</summary>
    public static void SetLockUserCode(this ILockEntityCore target, ZhaSetLockUserCodeParameters data)
    {
        target.CallService("set_lock_user_code", data);
    }

    ///<summary>Sets a user code on a lock.</summary>
    public static void SetLockUserCode(this IEnumerable<ILockEntityCore> target, ZhaSetLockUserCodeParameters data)
    {
        target.CallService("set_lock_user_code", data);
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="codeSlot">Code slot to set the code in. eg: 1</param>
    ///<param name="userCode">Code to set. eg: 1234</param>
    public static void SetLockUserCode(this ILockEntityCore target, string codeSlot, string userCode)
    {
        target.CallService("set_lock_user_code", new ZhaSetLockUserCodeParameters { CodeSlot = codeSlot, UserCode = userCode });
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="codeSlot">Code slot to set the code in. eg: 1</param>
    ///<param name="userCode">Code to set. eg: 1234</param>
    public static void SetLockUserCode(this IEnumerable<ILockEntityCore> target, string codeSlot, string userCode)
    {
        target.CallService("set_lock_user_code", new ZhaSetLockUserCodeParameters { CodeSlot = codeSlot, UserCode = userCode });
    }
}

public static class ZwaveJsEntityExtensionMethods
{
    ///<summary>Clears a user code from a lock.</summary>
    public static void ClearLockUsercode(this ILockEntityCore target, ZwaveJsClearLockUsercodeParameters data)
    {
        target.CallService("clear_lock_usercode", data);
    }

    ///<summary>Clears a user code from a lock.</summary>
    public static void ClearLockUsercode(this IEnumerable<ILockEntityCore> target, ZwaveJsClearLockUsercodeParameters data)
    {
        target.CallService("clear_lock_usercode", data);
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="codeSlot">Code slot to clear code from. eg: 1</param>
    public static void ClearLockUsercode(this ILockEntityCore target, string codeSlot)
    {
        target.CallService("clear_lock_usercode", new ZwaveJsClearLockUsercodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="codeSlot">Code slot to clear code from. eg: 1</param>
    public static void ClearLockUsercode(this IEnumerable<ILockEntityCore> target, string codeSlot)
    {
        target.CallService("clear_lock_usercode", new ZwaveJsClearLockUsercodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Sets the configuration for a lock.</summary>
    public static void SetLockConfiguration(this ILockEntityCore target, ZwaveJsSetLockConfigurationParameters data)
    {
        target.CallService("set_lock_configuration", data);
    }

    ///<summary>Sets the configuration for a lock.</summary>
    public static void SetLockConfiguration(this IEnumerable<ILockEntityCore> target, ZwaveJsSetLockConfigurationParameters data)
    {
        target.CallService("set_lock_configuration", data);
    }

    ///<summary>Sets the configuration for a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="operationType">The operation type of the lock. eg: timed</param>
    ///<param name="lockTimeout">Seconds until lock mode times out. Should only be used if operation type is `timed`. eg: 1</param>
    ///<param name="autoRelockTime">Duration in seconds until lock returns to secure state. Only enforced when operation type is `constant`. eg: 1</param>
    ///<param name="holdAndReleaseTime">Duration in seconds the latch stays retracted. eg: 1</param>
    ///<param name="twistAssist">Enable Twist Assist. eg: True</param>
    ///<param name="blockToBlock">Enable block-to-block functionality. eg: True</param>
    public static void SetLockConfiguration(this ILockEntityCore target, object operationType, double? lockTimeout = null, double? autoRelockTime = null, double? holdAndReleaseTime = null, bool? twistAssist = null, bool? blockToBlock = null)
    {
        target.CallService("set_lock_configuration", new ZwaveJsSetLockConfigurationParameters { OperationType = operationType, LockTimeout = lockTimeout, AutoRelockTime = autoRelockTime, HoldAndReleaseTime = holdAndReleaseTime, TwistAssist = twistAssist, BlockToBlock = blockToBlock });
    }

    ///<summary>Sets the configuration for a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="operationType">The operation type of the lock. eg: timed</param>
    ///<param name="lockTimeout">Seconds until lock mode times out. Should only be used if operation type is `timed`. eg: 1</param>
    ///<param name="autoRelockTime">Duration in seconds until lock returns to secure state. Only enforced when operation type is `constant`. eg: 1</param>
    ///<param name="holdAndReleaseTime">Duration in seconds the latch stays retracted. eg: 1</param>
    ///<param name="twistAssist">Enable Twist Assist. eg: True</param>
    ///<param name="blockToBlock">Enable block-to-block functionality. eg: True</param>
    public static void SetLockConfiguration(this IEnumerable<ILockEntityCore> target, object operationType, double? lockTimeout = null, double? autoRelockTime = null, double? holdAndReleaseTime = null, bool? twistAssist = null, bool? blockToBlock = null)
    {
        target.CallService("set_lock_configuration", new ZwaveJsSetLockConfigurationParameters { OperationType = operationType, LockTimeout = lockTimeout, AutoRelockTime = autoRelockTime, HoldAndReleaseTime = holdAndReleaseTime, TwistAssist = twistAssist, BlockToBlock = blockToBlock });
    }

    ///<summary>Sets a user code on a lock.</summary>
    public static void SetLockUsercode(this ILockEntityCore target, ZwaveJsSetLockUsercodeParameters data)
    {
        target.CallService("set_lock_usercode", data);
    }

    ///<summary>Sets a user code on a lock.</summary>
    public static void SetLockUsercode(this IEnumerable<ILockEntityCore> target, ZwaveJsSetLockUsercodeParameters data)
    {
        target.CallService("set_lock_usercode", data);
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="codeSlot">Code slot to set the code. eg: 1</param>
    ///<param name="usercode">Lock code to set. eg: 1234</param>
    public static void SetLockUsercode(this ILockEntityCore target, string codeSlot, string usercode)
    {
        target.CallService("set_lock_usercode", new ZwaveJsSetLockUsercodeParameters { CodeSlot = codeSlot, Usercode = usercode });
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="codeSlot">Code slot to set the code. eg: 1</param>
    ///<param name="usercode">Lock code to set. eg: 1234</param>
    public static void SetLockUsercode(this IEnumerable<ILockEntityCore> target, string codeSlot, string usercode)
    {
        target.CallService("set_lock_usercode", new ZwaveJsSetLockUsercodeParameters { CodeSlot = codeSlot, Usercode = usercode });
    }
}